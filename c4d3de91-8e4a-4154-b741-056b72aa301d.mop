{
  "Name": "SKTimeMarker",
  "_id": "c4d3de91-8e4a-4154-b741-056b72aa301d",
  "Namespace": "user.tenfour",
  "Description": "use as just a placeholder for cues\r\nit can convert beats to time, that's pretty cool. and if you give it a beat offset it will be relative to that beat.\r\n",
  "Inputs": [
    {
      "Name": "TransitionSec",
      "MetaInstanceID": "ed64ff45-3210-4f3e-ad16-a5618537304c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TransitionBeat",
      "MetaInstanceID": "ff596265-426b-4e10-a10b-8d60202ee25f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.R",
      "MetaInstanceID": "2daebbf3-a4bd-41e8-84ff-e5a207762fb3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.G",
      "MetaInstanceID": "6b1a843c-a22c-4b8c-9dd4-71a99e4d340a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.7"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.B",
      "MetaInstanceID": "aef14164-33ff-4b4d-a10b-fd6804b0972c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.3"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.A",
      "MetaInstanceID": "1c20ed4a-8ea0-42b7-b7c9-25dea51fec02",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BeatOffset",
      "MetaInstanceID": "cf0cebec-694e-4cf4-9271-66c503cb1bba",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Beat",
      "MetaInstanceID": "fd1599e4-50a4-46e4-96ff-87d0253ec347",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "Time",
      "MetaInstanceID": "78d849a3-9e7f-4d04-824f-25baad4a123b",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "RelativeTime",
      "MetaInstanceID": "695442b4-93b3-47d8-a49d-3dd48c957217",
      "MetaID": "9f831cf2-a1ec-41f4-ba80-cced9736af6b"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "7600e50b-f39b-4603-8cbe-c688c420b87b",
      "MetaID": "89f04cd4-3a88-4fa3-b02a-d60eae58df2d",
      "Name": "SKTimeMarkerFunc",
      "Version": "8b1569ed-8a14-42c7-84bd-dfad7c8da746",
      "Type": "Generic",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "",
        "namespace Framefield.Core.ID89f04cd4_3a88_4fa3_b02a_d60eae58df2d",
        "{",
        "    public class Class_SKTimeMarker : OperatorPart.Function,",
        "        Framefield.Core.OperatorPartTraits.ITimeMarker,",
        "        Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            TransitionSec = 0,",
        "            ColorR = 1,",
        "            ColorG = 2,",
        "            ColorB = 3,",
        "            ColorA = 4,",
        "            TransitionBeat = 5,",
        "            BeatOffset = 6",
        "        }",
        "        //<<< _inputids",
        "        ",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            Beat = 0,",
        "            Time = 1,",
        "            RelativeTime = 2",
        "        }",
        "        //<<< _outputids",
        "",
        "        /*private double BeatsToSeconds(double beats, double bpm)",
        "        {",
        "            beats *= 60;",
        "            beats /= bpm;",
        "            return beats;",
        "        }*/",
        "        private float GetTime(double beats, double sec)",
        "        {",
        "            double? beatsec = null;",
        "            if (Framefield.Core.OperatorPartContext.SKServerState.Server != null) {",
        "                if (Framefield.Core.OperatorPartContext.SKServerState.Server.Transport != null) {",
        "                    beatsec = Framefield.Core.OperatorPartContext.SKServerState.Server.Transport.CurrentRegionBeatToRegionSeconds(beats);",
        "                }",
        "            }",
        "            if (!beatsec.HasValue)",
        "                return (float)sec;//beats (float)(BeatsToSeconds(beats, bpm) + sec);",
        "            return (float)(sec + beatsec.Value);",
        "        }",
        "",
        "    \t// for itimemmarker",
        "        public double Time {",
        "            get",
        "            {",
        "                double sec = GetInputValue((int)InputId.TransitionSec);",
        "                double beats = GetInputValue((int)InputId.TransitionBeat);",
        "                double beatOffset = GetInputValue((int)InputId.BeatOffset);",
        "                var skstate = Framefield.Core.OperatorPartContext.SKServerState;",
        "                //double bpm = skstate.BPM;",
        "                //if (Math.Abs(bpm) < 1)",
        "                //    bpm = 120;",
        "                ",
        "                //if (context.GlobalObjects.ContainsKey(\"SKPlayerState\")) {",
        "                  //  var skstate = (SlashKickPerformer.SKPlayerState)context.GlobalObjects[\"SKPlayerState\"];",
        "                    //bpm = (float)skstate.BPM;",
        "                    //Logger.Info(this,\"setting time to {0}\", skstate.ProgramTime);",
        "                //}",
        "                return GetTime(beats + beatOffset, sec);",
        "            }",
        "            set",
        "            {",
        "                SetInputValue((int)InputId.TransitionSec, value);",
        "                SetInputValue((int)InputId.TransitionBeat, 0);",
        "            }",
        "        }",
        "",
        "",
        "        public Color4 Color {",
        "            get {",
        "                return new Color4((float)GetInputValue((int)InputId.ColorR),",
        "                                  (float)GetInputValue((int)InputId.ColorG),",
        "                                  (float)GetInputValue((int)InputId.ColorB),",
        "                                  (float)GetInputValue((int)InputId.ColorA));",
        "            }",
        "            set {",
        "                SetInputValue((int)InputId.ColorA, (double)value.Alpha);",
        "                SetInputValue((int)InputId.ColorR, (double)value.Red);",
        "                SetInputValue((int)InputId.ColorG, (double)value.Green);",
        "                SetInputValue((int)InputId.ColorB, (double)value.Blue);",
        "            }",
        "        }",
        "        ",
        "        ",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var TransitionSec = inputs[(int)InputId.TransitionSec].Eval(context).Value;",
        "            var ColorR = inputs[(int)InputId.ColorR].Eval(context).Value;",
        "            var ColorG = inputs[(int)InputId.ColorG].Eval(context).Value;",
        "            var ColorB = inputs[(int)InputId.ColorB].Eval(context).Value;",
        "            var ColorA = inputs[(int)InputId.ColorA].Eval(context).Value;",
        "            var Color = new Color4(ColorR, ColorG, ColorB, ColorA);",
        "            var TransitionBeat = inputs[(int)InputId.TransitionBeat].Eval(context).Value;",
        "            var BeatOffset = inputs[(int)InputId.BeatOffset].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            var skstate = Framefield.Core.OperatorPartContext.SKServerState;",
        "",
        "            //if (context.GlobalObjects.ContainsKey(\"SKPlayerState\")) {",
        "                //var skstate = (SlashKickPerformer.SKPlayerState)context.GlobalObjects[\"SKPlayerState\"];",
        "                context.Time = (float)skstate.ProgramTime;",
        "                //Logger.Info(this,\"setting time to {0}\", skstate.ProgramTime);",
        "            //}",
        "            ",
        "            float timeSec;",
        "            ",
        "            switch (outputIdx) {",
        "                case (int)OutputId.Time:",
        "                    //timeSec = GetTime(TransitionBeat - BeatOffset, TransitionSec);",
        "                    timeSec = GetTime(BeatOffset + TransitionBeat, TransitionSec);",
        "                    ",
        "                    //Logger.Info(this,\"TransitionPoint; time={0}\", context.Time);",
        "                    context.Value = timeSec;",
        "                    return context;",
        "                case (int)OutputId.Beat:",
        "                    context.Value = TransitionBeat + BeatOffset;",
        "                    return context;",
        "                case (int)OutputId.RelativeTime:",
        "                    timeSec = GetTime(TransitionBeat + BeatOffset, TransitionSec);",
        "                    context.Value = context.Time - timeSec;",
        "                    return context;",
        "            }",
        "            ",
        "            //Logger.Info(this,\"unknown outputid\");",
        "            return context;",
        "        }",
        "",
        "        private double GetInputValue(int index) {",
        "            return OperatorPartUtilities.GetInputFloatValue(OperatorPart.Connections[index]);",
        "        }",
        "",
        "        private void SetInputValue(int index, double val) {",
        "            OperatorPart opPart = OperatorPart.Connections[index];",
        "            if (opPart.Connections.Count == 0) {",
        "                opPart.Func = Utilities.CreateValueFunction(new Float((float)val));",
        "            }",
        "        }",
        "",
        "    }",
        "}",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ed64ff45-3210-4f3e-ad16-a5618537304c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7600e50b-f39b-4603-8cbe-c688c420b87b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2daebbf3-a4bd-41e8-84ff-e5a207762fb3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7600e50b-f39b-4603-8cbe-c688c420b87b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6b1a843c-a22c-4b8c-9dd4-71a99e4d340a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7600e50b-f39b-4603-8cbe-c688c420b87b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "aef14164-33ff-4b4d-a10b-fd6804b0972c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7600e50b-f39b-4603-8cbe-c688c420b87b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1c20ed4a-8ea0-42b7-b7c9-25dea51fec02",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7600e50b-f39b-4603-8cbe-c688c420b87b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ff596265-426b-4e10-a10b-8d60202ee25f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7600e50b-f39b-4603-8cbe-c688c420b87b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cf0cebec-694e-4cf4-9271-66c503cb1bba",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7600e50b-f39b-4603-8cbe-c688c420b87b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7600e50b-f39b-4603-8cbe-c688c420b87b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "fd1599e4-50a4-46e4-96ff-87d0253ec347"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7600e50b-f39b-4603-8cbe-c688c420b87b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "78d849a3-9e7f-4d04-824f-25baad4a123b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7600e50b-f39b-4603-8cbe-c688c420b87b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "695442b4-93b3-47d8-a49d-3dd48c957217"
    }
  ]
}