{
  "Name": "XXXglitch07",
  "_id": "7e45e702-addb-42bf-a2cf-aea4d256d619",
  "Namespace": "user.tenfour.shaders",
  "Description": "rgbanoise fork\r\nrenders an image purely from pixel shader",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "a272ba96-53d9-410e-867f-13fab3e8ffb1",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "float iTime;",
          "//<<< _parameters\r",
          "\r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "#define iResolution RenderTargetSize\r",
          "#define vec2 float2\r",
          "#define vec3 float3\r",
          "#define vec4 float4\r",
          "#define mat2 float2x2\r",
          "#define fract frac\r",
          "#define mod fmod\r",
          "\r",
          "static const float z = 1.;\r",
          "static const float complexity = 13.;\r",
          "static const float speed = .5;// scene changing speed\r",
          "static const float density = .8; // 0-1\r",
          "\r",
          "static const float PI = atan(1.)*4.;\r",
          "\r",
          "vec4 hash42(vec2 p)\r",
          "{\r",
          "\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\r",
          "    p4 += dot(p4, p4.wzxy+33.33);\r",
          "    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\r",
          "}\r",
          "\r",
          "mat2 rot2D(float r){\r",
          "    return mat2(cos(r), sin(r), -sin(r), cos(r));\r",
          "}\r",
          "#define q(x,p) (floor((x)/(p))*(p))\r",
          "\r",
          "\r",
          "void mainImage( out vec4 o, vec2 C)\r",
          "{\r",
          "    vec2 R = iResolution.xy;\r",
          "    vec2 uv = C/R.xy;\r",
          "    vec2 N = uv;\r",
          "    uv.x *= R.x/R.y;\r",
          "    uv *= z;\r",
          "    float t = iTime+1e4;\r",
          "    uv += floor(t*speed)*z*1.618;// scene switcher\r",
          "    o = vec4(1,1,1,1);\r",
          "\r",
          "    for (float i = 1.;i <= complexity; ++ i) {\r",
          "        vec4 h = hash42(floor(uv+i));\r",
          "        vec2 p = fract(uv+i)-.5;\r",
          "        //p *= rot2D(h.x*PI*2.);\r",
          "        p = mul(p, rot2D(h.x*PI*2.));\r",
          "        uv += p * h.z;\r",
          "        h = hash42(floor(uv));\r",
          "        h += length(fract(p+q(iTime,.1)*.1)); // animate\r",
          "        h = fract(h);\r",
          "        if (i < 2. || h.w > density) {\r",
          "            o *= h;\r",
          "        }\r",
          "    }\r",
          "    o=pow(o,o-o+.5);\r",
          "  \to=step(.5,o) * mod(C.y,3.)/2.;\r",
          "}\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o;\r",
          "    mainImage(o, input.pos.xy);\r",
          "    o.a = 1.0;\r",
          "    return o;\r",
          "}\r",
          "",
          "//<<< PS\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "iTime",
      "MetaInstanceID": "fea9860a-ea70-492e-b684-35684288c5e5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "-1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "1ff06474-6097-4c47-862e-70a5ad420349",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "b1a1a92d-8c73-427c-ac08-97e5308db562",
      "MetaID": "9139e44d-c40b-4324-9ef5-38a8b2c16d83",
      "Name": "XXXglitch07Func",
      "Version": "34c330e4-6cac-4f8e-a22e-2d5d6907269e",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID9139e44d_c40b_4324_9ef5_38a8b2c16d83",
        "{",
        "    public class Class_glitch07 : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            iTime = 1",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var iTime = inputs[(int)InputId.iTime].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            if (iTime < 0) {",
        "                iTime = context.Time;",
        "            }",
        "",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"iTime\").AsScalar().Set(iTime);",
        "                //<<< _setup",
        "",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b1a1a92d-8c73-427c-ac08-97e5308db562",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1ff06474-6097-4c47-862e-70a5ad420349"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a272ba96-53d9-410e-867f-13fab3e8ffb1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b1a1a92d-8c73-427c-ac08-97e5308db562"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "fea9860a-ea70-492e-b684-35684288c5e5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b1a1a92d-8c73-427c-ac08-97e5308db562"
    }
  ]
}