{
  "Name": "SH_FactoryWindows",
  "_id": "09306fe1-57ae-4414-abce-fb8d84060bda",
  "Namespace": "user.tenfour.shaders",
  "Description": "https://www.shadertoy.com/view/Wsy3z3",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "1a768152-aa51-4d3f-ac21-e16b216dbbb5",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "float UnevennessFactor;",
          "float2 Position;",
          "float Layers;",
          "float ColorBias;",
          "float2 Zoom;",
          "float Saturation;",
          "float ShadeDTOA;",
          "float ShadeMix;",
          "float OutputExponent;",
          "float ShadeExponent;",
          "Texture2D HashTexture;",
          "float NoiseScaleOrSeed;",
          "float SizeBias;",
          "float MinLayers;",
          "//<<< _parameters\r",
          "\r",
          "const float iBPM;\r",
          "const float iProgram;\r",
          "const float iTime;\r",
          "const float iBeat;\r",
          "static const float PI = atan(1.)*4.;\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "#define iResolution RenderTargetSize\r",
          "#define vec2 float2\r",
          "#define vec3 float3\r",
          "#define vec4 float4\r",
          "#define mat2 float2x2\r",
          "#define fract frac\r",
          "#define mod fmod\r",
          "#define mix lerp\r",
          "#define vec20 (float2(0,0))\r",
          "#define vec30 (float3(0,0,0))\r",
          "#define vec40 (float4(0,0,0,0))\r",
          "#define vec21 (float2(1,1))\r",
          "#define vec31 (float3(1,1,1))\r",
          "#define vec41 (float4(1,1,1,1))\r",
          "#define vec2x(x) (float2((x),(x)))\r",
          "#define vec3x(x) (float3((x),(x),(x)))\r",
          "#define vec4x(x) (float4((x),(x),(x),(x)))\r",
          "\r",
          "\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Wrap;",
          "    AddressV = Wrap;",
          "};",
          "\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "// fork of https://www.shadertoy.com/view/3dVGDW\r",
          "\r",
          "float dtoa(float d, float amount){\r",
          "    return 1. / clamp(d*amount, 1., amount);\r",
          "}\r",
          "\r",
          "vec4 hash42(vec2 p)\r",
          "{\r",
          "\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\r",
          "    p4 += dot(p4, p4.wzxy+33.33);\r",
          "    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\r",
          "}\r",
          "/*\r",
          "vec4 hash42(vec2 p) {\r",
          "    vec3 h1 = HashTexture.Sample(samLinear, p).rgb;\r",
          "    vec3 h2 = HashTexture.Sample(samLinear, (p+1.77)).rgb;\r",
          "    return float4(h1.y, h2);\r",
          "}\r",
          "*/\r",
          "void mainImage( out vec4 o, in vec2 fragCoord )\r",
          "{\r",
          "    vec2 R = iResolution.xy;\r",
          "    vec2 uv = fragCoord/iResolution.xy-.5;\r",
          "    vec2 N = uv;\r",
          "    uv.x *= R.x / R.y;\r",
          "    vec2 uvghost = uv;\r",
          "\r",
          "    uv /= Zoom;\r",
          "    uv += Position;\r",
          "    \r",
          "    o = vec4x(1);\r",
          "\r",
          "    vec2 cellUL = floor(uv);\r",
          "    vec2 cellBR = cellUL + 1.5;\r",
          "    vec2 seed = cellUL * NoiseScaleOrSeed;// top-level cell ID\r",
          "    \r",
          "    vec2 evenCellUL = cellUL;// keep an evenly-split uv in order to keeep consistent cellIDs\r",
          "    vec2 evenCellBR = cellBR;\r",
          "\r",
          "    for(float i = 1.; i <= Layers; ++ i) {\r",
          "        vec4 h = hash42(seed+(vec2(evenCellBR.x, evenCellUL.y)+10.));\r",
          "        float dl = abs(uv.x - cellUL.x);// distance to edge of cell, left edge\r",
          "        dl = min(dl, length(uv.y - cellUL.y));// bottom (inv y)\r",
          "        dl = min(dl, length(uv.x - cellBR.x));// right\r",
          "        dl = min(dl, length(uv.y - cellBR.y));// top\r",
          "\r",
          "        float r = 1;\r",
          "        float col2 = 1.-dtoa(dl, (h.z+.05)*(ShadeDTOA*Layers));\r",
          "        vec3 col = h.xyz;\r",
          "        o.rgb *= mix(1,pow(max(0,col2),ShadeExponent),ShadeMix);\r",
          "        if (h.w < ColorBias)// sometimes color a window\r",
          "        \to.rgb *= mix(col, vec3x(col.r+col.g+col.b)/3.,1-Saturation);\r",
          "        \r",
          "        h.y = mix(.5, h.y, UnevennessFactor);// favor dividing evenly\r",
          "        vec2 pt = mix(cellUL, cellBR, h.y);\r",
          "        vec2 evenpt = mix(evenCellUL, evenCellBR, .5);\r",
          "        \r",
          "        if (h.w <SizeBias  && i >= MinLayers)\r",
          "            break;\r",
          "\r",
          "        if (uv.x < pt.x) {// descend into quadrant\r",
          "            if (uv.y < pt.y) {\r",
          "                cellBR = pt.xy;\r",
          "                evenCellBR = evenpt;\r",
          "            } else {\r",
          "              \tcellUL.y = pt.y;\r",
          "              \tcellBR.x = pt.x;\r",
          "              \tevenCellUL.y = evenpt.y;\r",
          "              \tevenCellBR.x = evenpt.x;\r",
          "            }\r",
          "        } else {\r",
          "            if (uv.y > pt.y) {\r",
          "                cellUL = pt.xy;\r",
          "                evenCellUL = evenpt.xy;\r",
          "            } else {\r",
          "                cellUL.x = pt.x;\r",
          "                cellBR.y = pt.y;\r",
          "                evenCellUL.x = evenpt.x;\r",
          "                evenCellBR.x = evenpt.y;\r",
          "            }\r",
          "\t    }\r",
          "    }\r",
          "    \r",
          "    o = clamp(o,0.,1.);\r",
          "    o = pow(o,o-o+OutputExponent);\r",
          "    o.a = 1.;\r",
          "}\r",
          "\r",
          "\r",
          "",
          "//<<< PS\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o;\r",
          "    mainImage(o, input.pos.xy);\r",
          "    o = clamp(o,0.,1.);\r",
          "    o.a = 1.0;\r",
          "    return o;\r",
          "}\r",
          "\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Layers",
      "MetaInstanceID": "5251f9ba-f8a3-49b5-8338-3a05a1cfb931",
      "DefaultValue": {
        "Type": "Float",
        "Value": "8"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "20",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Position.X",
      "MetaInstanceID": "2ffbcdf0-2a49-44a1-823c-a0d850a7d2dc",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Position.Y",
      "MetaInstanceID": "85f6f650-5569-4dde-b59a-abb6cf55c21d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Zoom.X",
      "MetaInstanceID": "e0774152-177c-4c41-8e60-12bcfd47ef0d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Zoom.Y",
      "MetaInstanceID": "fbb04c55-6550-44b1-b62b-6defd7c9d186",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ShadeDTOA",
      "MetaInstanceID": "fa5d870f-4c37-4479-baaf-f29977538109",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1000"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "UnevennessFactor",
      "MetaInstanceID": "cfc04cd9-bb39-4cbe-b968-bf1ac69a20e4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.2"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.005",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ShadeMix",
      "MetaInstanceID": "7bc3018e-e906-46e9-b4cf-4833618655a3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.005",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ShadeExponent",
      "MetaInstanceID": "d65c50fd-2533-42f0-a5c9-5b18a1bb640f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorBias",
      "MetaInstanceID": "47fd99f4-1e36-4b97-a86f-e774b0935933",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.3"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.005",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Saturation",
      "MetaInstanceID": "4f204555-a99d-4795-90ef-6632f1bf1ff7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.8"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.005",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "OutputExponent",
      "MetaInstanceID": "154945e6-c60f-4425-a2e4-ebf2c18f992d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "HashTexture",
      "MetaInstanceID": "ae9e3ee9-03a8-4ee8-bb76-3f74f86789cc",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseScaleOrSeed",
      "MetaInstanceID": "d0d9709c-8521-4340-b14f-3a35b0688327",
      "DefaultValue": {
        "Type": "Float",
        "Value": "3"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SizeBias",
      "MetaInstanceID": "c6ab5db8-1568-464d-a6a7-59e2229eb4c4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.005",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MinLayers",
      "MetaInstanceID": "2c2916b1-4322-4c3d-8037-54342db7a324",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "when size bias is used, at least this many layers must be rendered before bailing",
      "Min": "0",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "b3db080d-4a45-418b-a968-47f02b4c7740",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6",
      "MetaID": "3839c263-5f15-4c9e-8337-295b904d68f4",
      "Name": "SH_FactoryWindowsFunc",
      "Version": "9541dcf7-c5f1-4123-af01-3eed88f41ae7",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID3839c263_5f15_4c9e_8337_295b904d68f4",
        "{",
        "    public class Class_SH_FactoryWindows : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            UnevennessFactor = 1,",
        "            PositionX = 2,",
        "            PositionY = 3,",
        "            Layers = 4,",
        "            ColorBias = 5,",
        "            ZoomX = 6,",
        "            ZoomY = 7,",
        "            Saturation = 8,",
        "            ShadeDTOA = 9,",
        "            ShadeMix = 10,",
        "            OutputExponent = 11,",
        "            ShadeExponent = 12,",
        "            HashTexture = 13,",
        "            NoiseScaleOrSeed = 14,",
        "            SizeBias = 15,",
        "            MinLayers = 16",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var UnevennessFactor = inputs[(int)InputId.UnevennessFactor].Eval(context).Value;",
        "            var PositionX = inputs[(int)InputId.PositionX].Eval(context).Value;",
        "            var PositionY = inputs[(int)InputId.PositionY].Eval(context).Value;",
        "            var Position = new Vector2(PositionX, PositionY);",
        "            var Layers = inputs[(int)InputId.Layers].Eval(context).Value;",
        "            var ColorBias = inputs[(int)InputId.ColorBias].Eval(context).Value;",
        "            var ZoomX = inputs[(int)InputId.ZoomX].Eval(context).Value;",
        "            var ZoomY = inputs[(int)InputId.ZoomY].Eval(context).Value;",
        "            var Zoom = new Vector2(ZoomX, ZoomY);",
        "            var Saturation = inputs[(int)InputId.Saturation].Eval(context).Value;",
        "            var ShadeDTOA = inputs[(int)InputId.ShadeDTOA].Eval(context).Value;",
        "            var ShadeMix = inputs[(int)InputId.ShadeMix].Eval(context).Value;",
        "            var OutputExponent = inputs[(int)InputId.OutputExponent].Eval(context).Value;",
        "            var ShadeExponent = inputs[(int)InputId.ShadeExponent].Eval(context).Value;",
        "            var HashTexture = inputs[(int)InputId.HashTexture].Eval(context).Image; // Needs to be checked for null!",
        "            var NoiseScaleOrSeed = inputs[(int)InputId.NoiseScaleOrSeed].Eval(context).Value;",
        "            var SizeBias = inputs[(int)InputId.SizeBias].Eval(context).Value;",
        "            var MinLayers = inputs[(int)InputId.MinLayers].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                using (var HashTextureView = new ShaderResourceView(context.D3DDevice, HashTexture))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"UnevennessFactor\").AsScalar().Set(UnevennessFactor);",
        "                    _effect.GetVariableByName(\"Position\").AsVector().Set(new Vector2(PositionX, PositionY));",
        "                    _effect.GetVariableByName(\"Layers\").AsScalar().Set(Layers);",
        "                    _effect.GetVariableByName(\"ColorBias\").AsScalar().Set(ColorBias);",
        "                    _effect.GetVariableByName(\"Zoom\").AsVector().Set(new Vector2(ZoomX, ZoomY));",
        "                    _effect.GetVariableByName(\"Saturation\").AsScalar().Set(Saturation);",
        "                    _effect.GetVariableByName(\"ShadeDTOA\").AsScalar().Set(ShadeDTOA);",
        "                    _effect.GetVariableByName(\"ShadeMix\").AsScalar().Set(ShadeMix);",
        "                    _effect.GetVariableByName(\"OutputExponent\").AsScalar().Set(OutputExponent);",
        "                    _effect.GetVariableByName(\"ShadeExponent\").AsScalar().Set(ShadeExponent);",
        "                    _effect.GetVariableByName(\"HashTexture\").AsShaderResource().SetResource(HashTextureView);",
        "                    _effect.GetVariableByName(\"NoiseScaleOrSeed\").AsScalar().Set(NoiseScaleOrSeed);",
        "                    _effect.GetVariableByName(\"SizeBias\").AsScalar().Set(SizeBias);",
        "                    _effect.GetVariableByName(\"MinLayers\").AsScalar().Set(MinLayers);",
        "                //<<< _setup",
        "",
        "                var skstate = Framefield.Core.OperatorPartContext.SKServerState;",
        "                    _effect.GetVariableByName(\"iBPM\").AsScalar().Set((float)skstate.BPM);",
        "                    _effect.GetVariableByName(\"iProgram\").AsScalar().Set(skstate.ProgramIndex);",
        "                    _effect.GetVariableByName(\"iBeat\").AsScalar().Set((float)skstate.Beat);",
        "",
        "                _effect.GetVariableByName(\"iTime\").AsScalar().Set(context.Time);",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b3db080d-4a45-418b-a968-47f02b4c7740"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1a768152-aa51-4d3f-ac21-e16b216dbbb5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cfc04cd9-bb39-4cbe-b968-bf1ac69a20e4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2ffbcdf0-2a49-44a1-823c-a0d850a7d2dc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "85f6f650-5569-4dde-b59a-abb6cf55c21d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5251f9ba-f8a3-49b5-8338-3a05a1cfb931",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "47fd99f4-1e36-4b97-a86f-e774b0935933",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e0774152-177c-4c41-8e60-12bcfd47ef0d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "fbb04c55-6550-44b1-b62b-6defd7c9d186",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4f204555-a99d-4795-90ef-6632f1bf1ff7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "fa5d870f-4c37-4479-baaf-f29977538109",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7bc3018e-e906-46e9-b4cf-4833618655a3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "154945e6-c60f-4425-a2e4-ebf2c18f992d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d65c50fd-2533-42f0-a5c9-5b18a1bb640f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ae9e3ee9-03a8-4ee8-bb76-3f74f86789cc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d0d9709c-8521-4340-b14f-3a35b0688327",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c6ab5db8-1568-464d-a6a7-59e2229eb4c4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2c2916b1-4322-4c3d-8037-54342db7a324",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9d257aa5-2395-4543-b4b1-d0062ea2e0d6"
    }
  ]
}