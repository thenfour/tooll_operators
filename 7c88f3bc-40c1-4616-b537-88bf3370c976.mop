{
  "Name": "SH_Waves03",
  "_id": "7c88f3bc-40c1-4616-b537-88bf3370c976",
  "Namespace": "user.tenfour.shaders",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "67f8a3e1-8301-4cc1-b998-2f7c38464ab4",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "float Zoom;",
          "float LineThickness;",
          "float2 Position;",
          "float ShadeExponent;",
          "float LineThickness2;",
          "//<<< _parameters\r",
          "float iTime;\r",
          "static const float PI = atan(1.)*4.;\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "\r",
          "float2x2 rot2D(float r){\r",
          "    return float2x2(cos(r), -sin(r), sin(r), cos(r));\r",
          "}\r",
          "\r",
          "//----------------------------------------------------------------------------------------\r",
          "// 4 out, 2 in...\r",
          "float4 hash42(float2 p)\r",
          "{\r",
          "\tfloat4 p4 = frac(p.xyxy * float4(.1031, .1030, .0973, .1099));\r",
          "    p4 += dot(p4, p4.wzxy+33.33);\r",
          "    return frac((p4.xxyz+p4.yzzw)*p4.zywx);\r",
          "}\r",
          "\r",
          "\r",
          "// polynomial smooth min (k = 0.1);\r",
          "float smin( float a, float b, float k )\r",
          "{\r",
          "    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\r",
          "    return lerp( b, a, h ) - k*h*(1.0-h);\r",
          "}\r",
          "float smax(float a, float b, float k) {\r",
          "    return -smin(-a, -b, k);\r",
          "}\r",
          "\r",
          "static const float k = .1;\r",
          "float opSmoothSubtraction( float d1, float d2 ) { return smax(-d1,d2, k); }\r",
          "float opSmoothIntersection( float d1, float d2 ) { return smax(d1,d2, k); }\r",
          "float opSmoothUnion( float d1, float d2 ) { return smin(d1,d2, k); }\r",
          "\r",
          "float opUnion( float d1, float d2 ) { return min(d1,d2); }\r",
          "float opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\r",
          "float opIntersection( float d1, float d2 ) { return max(d1,d2); }\r",
          "float opXor(float lhs, float rhs) {\r",
          "    return opUnion(opIntersection(lhs, -(rhs)), opIntersection(rhs, -(lhs)));\r",
          "}\r",
          "float opSmoothXor(float lhs, float rhs) {\r",
          "    return opSmoothUnion(opSmoothIntersection(lhs, -(rhs)), opSmoothIntersection(rhs, -(lhs)));\r",
          "}\r",
          "\r",
          "#define dtoa(d, amount) (1. / clamp((d)*(amount), 1., (amount)))\r",
          "\r",
          "\r",
          "float sdTriangle( in float2 p, in float2 p0, in float2 p1, in float2 p2 )\r",
          "{\r",
          "    float2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\r",
          "    float2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\r",
          "    float2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\r",
          "    float2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\r",
          "    float2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\r",
          "    float s = sign( e0.x*e2.y - e0.y*e2.x );\r",
          "    float2 d = min(min(float2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\r",
          "                     float2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\r",
          "                     float2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\r",
          "    return -sqrt(d.x)*sign(d.y);\r",
          "}\r",
          "float sdLine( in float2 p, in float2 a, in float2 b )\r",
          "{\r",
          "    float2 pa = p-a, ba = b-a;\r",
          "    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\r",
          "    return length( pa - ba*h );\r",
          "}\r",
          "\r",
          "float sdEquilateralTriangle( in float2 p )\r",
          "{\r",
          "    const float k = sqrt(3.0);\r",
          "    p.x = abs(p.x) - 1.0;\r",
          "    p.y = p.y + 1.0/k;\r",
          "    if( p.x+k*p.y>0.0 ) p = float2(p.x-k*p.y,-k*p.x-p.y)/2.0;\r",
          "    p.x -= clamp( p.x, -2.0, 0.0 );\r",
          "    return -length(p)*sign(p.y);\r",
          "}\r",
          "\r",
          "float rsin(float x, float low, float high)\r",
          "{\r",
          "    return (sin(x)*.5+.5) * (high-low) + low;\r",
          "}\r",
          "\r",
          "float sdshape(float2 uv)\r",
          "{\r",
          "    float2 origuv = uv;\r",
          "\r",
          "    float2 cellID2 = floor(uv-.5);\r",
          "    float4 h = hash42(cellID2);\r",
          "    uv = frac(uv-.5);\r",
          "    uv -=.5;\r",
          "    float ret = length(uv)-.5;\r",
          "    \r",
          "    float a = sin(iTime + h.x*PI2 + origuv.x* 1 + origuv.y * 1)*.5+.5;\r",
          "    //float a = h.x + iTime*.1;\r",
          "    a *= PI2;\r",
          "    //a += 2;\r",
          "    \r",
          "    float2 cp = float2(sin(a), cos(a))*.2;\r",
          "    float sd2 = length(uv-cp)-.5;\r",
          "    ret = opSubtraction(sd2, ret);\r",
          "    return ret;\r",
          "}\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o = float4(1,1,1,1);\r",
          "    float2 R = RenderTargetSize.xy;\r",
          "    float2 uv = input.pos.xy / R;\r",
          "    \r",
          "    float t = iTime*.6;\r",
          "    uv -= .5;\r",
          "    uv.x *= R.x / R.y;\r",
          "    uv *= Zoom;\r",
          "    uv += Position;\r",
          "\r",
          "    o = float4(0,0,0,1);\r",
          "    //float cellID = floor(uv.x+.5);\r",
          "    float sd = 1e7;\r",
          "    \r",
          "    sd = opUnion(sd, sdshape(uv+float2(0,0)));\r",
          "    //sd = opUnion(sd, sdshape(uv+float2(-1,-1)));\r",
          "    //sd = opUnion(sd, sdshape(uv+float2(0,-1)));\r",
          "    //sd = opUnion(sd, sdshape(uv+float2(1,-1)));\r",
          "/*\r",
          "    sd = opUnion(sd, sdshape(uv+float2(-1,0)));\r",
          "    sd = opUnion(sd, sdshape(uv+float2(1,0)));\r",
          "        \r",
          "    sd = opUnion(sd, sdshape(uv+float2(-1,1)));\r",
          "    sd = opUnion(sd, sdshape(uv+float2(0,1)));\r",
          "    sd = opUnion(sd, sdshape(uv+float2(1,1)));\r",
          "*/\r",
          "    o.rgb += dtoa(sd-LineThickness2, 1*float3(10,100,400));// * (pow(max(0,sd*100), .3));\r",
          "    o.rgb *= pow(max(0,sd+LineThickness),ShadeExponent);\r",
          "\r",
          "    //float4 h = hash42(cellID + 100);\r",
          "    //cellID += h.y*100;\r",
          "    \r",
          "    o.rgb = 1-clamp(o.rgb,0,1);\r",
          "    \r",
          "    return o;\r",
          "}\r",
          "\r",
          "",
          "//<<< PS\r",
          "\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Zoom",
      "MetaInstanceID": "902480e0-5cf7-4916-bc15-4ca8acbaf355",
      "DefaultValue": {
        "Type": "Float",
        "Value": "3"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0.001",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "LineThickness",
      "MetaInstanceID": "ecf86fa4-cba3-4d81-bd73-ccfb5222dd05",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-1",
      "Max": "1",
      "Scale": "0.005",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "LineThickness2",
      "MetaInstanceID": "8e6b8807-0d20-4b7f-a9a4-4cfc76f69301",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ShadeExponent",
      "MetaInstanceID": "2715c7d3-0fc9-43a3-a9d1-6ecf7a7b2d7f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.3"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0.001",
      "Max": "10000",
      "Scale": "0.005",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Position.X",
      "MetaInstanceID": "e16f9e63-084d-4fda-9979-c1c3d02d4ee6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Position.Y",
      "MetaInstanceID": "9367ad83-ecf6-4087-909e-555e5b516bbe",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "ebed10d9-6ebb-40f0-8d75-3f6d776bbf6d",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "cabc321b-c416-4abb-a562-98325363417d",
      "MetaID": "f5187a24-6cce-4429-b2d6-7cd5ea7636df",
      "Name": "SH_Waves03Func",
      "Version": "fd958edb-b6bc-480b-bcc9-722610fd9f55",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.IDf5187a24_6cce_4429_b2d6_7cd5ea7636df",
        "{",
        "    public class Class_SH_Waves03 : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Zoom = 1,",
        "            LineThickness = 2,",
        "            PositionX = 3,",
        "            PositionY = 4,",
        "            ShadeExponent = 5,",
        "            LineThickness2 = 6",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Zoom = inputs[(int)InputId.Zoom].Eval(context).Value;",
        "            var LineThickness = inputs[(int)InputId.LineThickness].Eval(context).Value;",
        "            var PositionX = inputs[(int)InputId.PositionX].Eval(context).Value;",
        "            var PositionY = inputs[(int)InputId.PositionY].Eval(context).Value;",
        "            var Position = new Vector2(PositionX, PositionY);",
        "            var ShadeExponent = inputs[(int)InputId.ShadeExponent].Eval(context).Value;",
        "            var LineThickness2 = inputs[(int)InputId.LineThickness2].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Zoom\").AsScalar().Set(Zoom);",
        "                    _effect.GetVariableByName(\"LineThickness\").AsScalar().Set(LineThickness);",
        "                    _effect.GetVariableByName(\"Position\").AsVector().Set(new Vector2(PositionX, PositionY));",
        "                    _effect.GetVariableByName(\"ShadeExponent\").AsScalar().Set(ShadeExponent);",
        "                    _effect.GetVariableByName(\"LineThickness2\").AsScalar().Set(LineThickness2);",
        "                //<<< _setup",
        "",
        "                _effect.GetVariableByName(\"iTime\").AsScalar().Set(context.Time);",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cabc321b-c416-4abb-a562-98325363417d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ebed10d9-6ebb-40f0-8d75-3f6d776bbf6d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "67f8a3e1-8301-4cc1-b998-2f7c38464ab4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "cabc321b-c416-4abb-a562-98325363417d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "902480e0-5cf7-4916-bc15-4ca8acbaf355",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "cabc321b-c416-4abb-a562-98325363417d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ecf86fa4-cba3-4d81-bd73-ccfb5222dd05",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "cabc321b-c416-4abb-a562-98325363417d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e16f9e63-084d-4fda-9979-c1c3d02d4ee6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "cabc321b-c416-4abb-a562-98325363417d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9367ad83-ecf6-4087-909e-555e5b516bbe",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "cabc321b-c416-4abb-a562-98325363417d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2715c7d3-0fc9-43a3-a9d1-6ecf7a7b2d7f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "cabc321b-c416-4abb-a562-98325363417d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8e6b8807-0d20-4b7f-a9a4-4cfc76f69301",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "cabc321b-c416-4abb-a562-98325363417d"
    }
  ]
}