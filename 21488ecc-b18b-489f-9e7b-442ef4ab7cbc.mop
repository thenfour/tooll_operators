{
  "Name": "SKTransitionCurveTimeMarker",
  "_id": "21488ecc-b18b-489f-9e7b-442ef4ab7cbc",
  "Namespace": "user.tenfour",
  "Description": "a transition curve which is visible on the timeline view. pretty much superior to transitioncurve vanilla.\r\n\r\nit can support a \"point\" peak curve with ant/release, or a transition before or after the point.\r\n\r\nuse SKRemapTimeMarker to base other curves off this point.\r\n\r\nor use it to automate SKTimeClipValue to combine markers into a timeclip.\r\n\r\nor use ListIndex to determine which TimeMarker the playhead is currently in..... together with SKSceneIndexTransition and SelectImage, and you have a full-on scene switcher based on timemarkers as cues.\r\n",
  "Inputs": [
    {
      "Name": "TransitionSec",
      "MetaInstanceID": "4e471f27-5417-4eb0-b568-31a8777d0842",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TransitionBeat",
      "MetaInstanceID": "0ae882fa-c574-4f17-8a64-73dd954cb89c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.R",
      "MetaInstanceID": "133662e1-c36e-4f88-9a5b-477a4ae5b4d6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.G",
      "MetaInstanceID": "3fd6bbcc-35c3-4817-a690-9159237168b5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.B",
      "MetaInstanceID": "662b6d4f-f390-480a-9a28-b07794631abd",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.A",
      "MetaInstanceID": "4918be8f-f456-4035-9e35-d033e1306392",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "OutputABC.A",
      "MetaInstanceID": "b50c3391-4ab8-4274-85e7-13f18585e90e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "OutputABC.B",
      "MetaInstanceID": "1b1285ea-595a-426d-9c35-d7390a4dd0fd",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "OutputABC.C",
      "MetaInstanceID": "64729395-61ce-4b5e-b79c-ceedca77ce36",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ABTimeSlopePos.Time",
      "MetaInstanceID": "cba0ffb8-7b46-426c-9465-ff0c647ceaa8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ABTimeSlopePos.Slope",
      "MetaInstanceID": "efafdf8d-f8b3-4bcd-8ce0-8a52495812de",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-0.97",
      "Max": "0.97",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ABTimeSlopePos.CurvePos",
      "MetaInstanceID": "690ed981-a86d-4c55-bc4b-a8878969fec1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BCTimeSlopePos.Time",
      "MetaInstanceID": "9a4c34c6-51ce-4f18-88f3-21424d23c76d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BCTimeSlopePos.Slope",
      "MetaInstanceID": "0a7c2e83-d103-4e69-ba4d-6654154c224a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-0.97",
      "Max": "0.97",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BCTimeSlopePos.CurvePos",
      "MetaInstanceID": "2e054d01-5460-415b-85dc-9262aee3c08b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Value",
      "MetaInstanceID": "35e940bd-ddd7-499b-a9fa-3d5332578469",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "RelativeTime",
      "MetaInstanceID": "ebafcbd7-1e5a-47f0-9002-89995dc3df81",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "TransitionPoint",
      "MetaInstanceID": "20a72394-8297-4422-8d4a-1d63c7b02653",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b",
      "MetaID": "9de60f6b-8040-47b8-81ac-67ee5f1e2a35",
      "Name": "SKTransitionCurveTimeMarkerFunc",
      "Version": "e4abe2ed-57e4-4d8e-b89e-7057ef52918f",
      "Type": "Generic",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "",
        "namespace Framefield.Core.ID9de60f6b_8040_47b8_81ac_67ee5f1e2a35",
        "{",
        "    public class Class_SKTransitionCurveTimeMarker : OperatorPart.Function,",
        "        Framefield.Core.OperatorPartTraits.ITimeMarker,",
        "        Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            TransitionSec = 0,",
        "            ColorR = 1,",
        "            ColorG = 2,",
        "            ColorB = 3,",
        "            ColorA = 4,",
        "            OutputABCA = 5,",
        "            OutputABCB = 6,",
        "            ABTimeSlopePosSlope = 7,",
        "            ABTimeSlopePosTime = 8,",
        "            BCTimeSlopePosTime = 9,",
        "            ABTimeSlopePosCurvePos = 10,",
        "            BCTimeSlopePosSlope = 11,",
        "            BCTimeSlopePosCurvePos = 12,",
        "            OutputABCC = 13,",
        "            TransitionBeat = 14",
        "        }",
        "        //<<< _inputids",
        "        ",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            Value = 0,",
        "            RelativeTime = 1,",
        "            TransitionPoint = 2",
        "        }",
        "        //<<< _outputids",
        "",
        "        /*private double BeatsToSeconds(double beats, double bpm)",
        "        {",
        "            beats *= 60;",
        "            beats /= bpm;",
        "            return beats;",
        "        }*/",
        "        private float GetTime(double beats, double sec)",
        "        {",
        "            double? beatsec = null;",
        "            if (Framefield.Core.OperatorPartContext.SKServerState.Server != null) {",
        "                if (Framefield.Core.OperatorPartContext.SKServerState.Server.Transport != null) {",
        "                    beatsec = Framefield.Core.OperatorPartContext.SKServerState.Server.Transport.CurrentRegionBeatToRegionSeconds(beats);",
        "                }",
        "            }",
        "            if (!beatsec.HasValue)",
        "                return (float)sec;//beats (float)(BeatsToSeconds(beats, bpm) + sec);",
        "            return (float)(sec + beatsec.Value);",
        "        }",
        "",
        "    \t// for itimemmarker",
        "        public double Time {",
        "            get",
        "            {",
        "                double sec = GetInputValue((int)InputId.TransitionSec);",
        "                double beats = GetInputValue((int)InputId.TransitionBeat);",
        "                var skstate = Framefield.Core.OperatorPartContext.SKServerState;",
        "                //double bpm = skstate.BPM;",
        "                //if (Math.Abs(bpm) < 1)",
        "                //    bpm = 120;",
        "                ",
        "                    //bpm = (float)skstate.BPM;",
        "                    //Logger.Info(this,\"setting time to {0}\", skstate.ProgramTime);",
        "                return GetTime(beats, sec);",
        "            }",
        "            set",
        "            {",
        "                SetInputValue((int)InputId.TransitionSec, value);",
        "                SetInputValue((int)InputId.TransitionBeat, 0);",
        "            }",
        "        }",
        "",
        "",
        "        public Color4 Color {",
        "            get {",
        "                return new Color4((float)GetInputValue((int)InputId.ColorR),",
        "                                  (float)GetInputValue((int)InputId.ColorG),",
        "                                  (float)GetInputValue((int)InputId.ColorB),",
        "                                  (float)GetInputValue((int)InputId.ColorA));",
        "            }",
        "            set {",
        "                SetInputValue((int)InputId.ColorA, (double)value.Alpha);",
        "                SetInputValue((int)InputId.ColorR, (double)value.Red);",
        "                SetInputValue((int)InputId.ColorG, (double)value.Green);",
        "                SetInputValue((int)InputId.ColorB, (double)value.Blue);",
        "            }",
        "        }",
        "        ",
        "        ",
        "        ",
        "        // here's an actual 2-stage variable smoothstep that seems to serve us better.",
        "        // https://www.desmos.com/calculator/3zhzwbfrxd",
        "        // most of the time we would want s {0,1}. s can also be {-1,0} but it's not a useful shape i think.",
        "        // s is slope.",
        "        public static double SmoothStepVariable(double _x, double _p, double _s)",
        "        {",
        "            double c = (2 / (1.0 - _s)) - 1;",
        "            if (_x <= _p) {",
        "                return f(c, _x, _p);",
        "            }",
        "            return 1.0 - f(c, 1.0 - _x, 1.0 - _p);",
        "        }",
        "        static Func<double, double, double, double> f = (c, x, n) => {",
        "            double d = Math.Pow(n, c - 1);",
        "            if (Math.Abs(d) < 0.0001) {",
        "                return 1;",
        "            }",
        "            //Logger.Info(\"d:{0}\", d);",
        "            return Math.Pow(x, c) / d;",
        "        };",
        "        static Func<double, double, double, double> g = (c, x, n) => c * Math.Pow(x, c - 1);",
        "",
        "",
        "        private float MapValue(float leftValue, float rightValue, float time, float antTime, float relTime, float curvePos01, float edgeTime, float slope)",
        "        {",
        "            time -= edgeTime;",
        "            double x = time;",
        "            double y = 0;",
        "            if ((antTime + relTime) == 0) {",
        "                // avoid div0; deal with instant transitions.",
        "                x = Math.Sign(x);",
        "            } else {",
        "                x = time + antTime;",
        "                x /= antTime + relTime;",
        "            }",
        "            ",
        "            if (x <= 0) y = 0;",
        "            else if (x >= 1) y = 1;",
        "            else {",
        "                // within curve range",
        "                //double p = antTime / (antTime + relTime);",
        "                y = SmoothStepVariable(x, curvePos01, slope);",
        "            }",
        "            return Utilities.Lerp(leftValue, rightValue, (float)y);",
        "        }",
        "",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _paramsk",
        "            var TransitionSec = inputs[(int)InputId.TransitionSec].Eval(context).Value;",
        "            //var ColorR = inputs[(int)InputId.ColorR].Eval(context).Value;",
        "            //var ColorG = inputs[(int)InputId.ColorG].Eval(context).Value;",
        "            //var ColorB = inputs[(int)InputId.ColorB].Eval(context).Value;",
        "            //var ColorA = inputs[(int)InputId.ColorA].Eval(context).Value;",
        "            //var Color = new Color4(ColorR, ColorG, ColorB, ColorA);",
        "            var OutputABCA = inputs[(int)InputId.OutputABCA].Eval(context).Value;",
        "            var OutputABCB = inputs[(int)InputId.OutputABCB].Eval(context).Value;",
        "            var OutputABCC = inputs[(int)InputId.OutputABCC].Eval(context).Value;",
        "            //var OutputABC = new Vector3(OutputABCA, OutputABCB, OutputABCC);",
        "            var ABTimeSlopePosSlope = inputs[(int)InputId.ABTimeSlopePosSlope].Eval(context).Value;",
        "            var ABTimeSlopePosTime = inputs[(int)InputId.ABTimeSlopePosTime].Eval(context).Value;",
        "            var ABTimeSlopePosCurvePos = inputs[(int)InputId.ABTimeSlopePosCurvePos].Eval(context).Value;",
        "            //var ABTimeSlopePos = new Vector3(ABTimeSlopePosSlope, ABTimeSlopePosTime, ABTimeSlopePosCurvePos);",
        "            var BCTimeSlopePosTime = inputs[(int)InputId.BCTimeSlopePosTime].Eval(context).Value;",
        "            var BCTimeSlopePosSlope = inputs[(int)InputId.BCTimeSlopePosSlope].Eval(context).Value;",
        "            var BCTimeSlopePosCurvePos = inputs[(int)InputId.BCTimeSlopePosCurvePos].Eval(context).Value;",
        "            //var BCTimeSlopePos = new Vector3(BCTimeSlopePosTime, BCTimeSlopePosSlope, BCTimeSlopePosCurvePos);",
        "            var TransitionBeat = inputs[(int)InputId.TransitionBeat].Eval(context).Value;",
        "            //<<< _paramsk",
        "            ",
        "            var skstate = Framefield.Core.OperatorPartContext.SKServerState;",
        "",
        "                context.Time = (float)skstate.ProgramTime;",
        "            ",
        "            float timeSec = GetTime(TransitionBeat, TransitionSec);",
        "            ",
        "            switch (outputIdx) {",
        "                case (int)OutputId.Value:",
        "                    float leftValue = MapValue(",
        "                        OutputABCA, OutputABCB,",
        "                        context.Time,",
        "                        ABTimeSlopePosTime, 0, ABTimeSlopePosCurvePos,",
        "                        timeSec,",
        "                        ABTimeSlopePosSlope",
        "                        );",
        "",
        "                    float rightValue = MapValue(",
        "                        leftValue, OutputABCC,",
        "                        context.Time,",
        "                        0, BCTimeSlopePosTime, BCTimeSlopePosCurvePos,",
        "                        timeSec,",
        "                        BCTimeSlopePosSlope",
        "                        );",
        "",
        "                    context.Value = rightValue;",
        "                    return context;",
        "                case (int)OutputId.RelativeTime:",
        "                    context.Value = context.Time - timeSec;",
        "                    //Logger.Info(this,\"relative time; output={0}\", context.Value);",
        "                    return context;",
        "                case (int)OutputId.TransitionPoint:",
        "                    //Logger.Info(this,\"TransitionPoint; time={0}\", context.Time);",
        "                    context.Value = timeSec;",
        "                    return context;",
        "            }",
        "            ",
        "            //Logger.Info(this,\"unknown outputid\");",
        "            return context;",
        "        }",
        "",
        "        private double GetInputValue(int index) {",
        "            return OperatorPartUtilities.GetInputFloatValue(OperatorPart.Connections[index]);",
        "        }",
        "",
        "        private void SetInputValue(int index, double val) {",
        "            OperatorPart opPart = OperatorPart.Connections[index];",
        "            if (opPart.Connections.Count == 0) {",
        "                opPart.Func = Utilities.CreateValueFunction(new Float((float)val));",
        "            }",
        "        }",
        "",
        "    }",
        "}",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4e471f27-5417-4eb0-b568-31a8777d0842",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "133662e1-c36e-4f88-9a5b-477a4ae5b4d6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3fd6bbcc-35c3-4817-a690-9159237168b5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "662b6d4f-f390-480a-9a28-b07794631abd",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4918be8f-f456-4035-9e35-d033e1306392",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b50c3391-4ab8-4274-85e7-13f18585e90e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1b1285ea-595a-426d-9c35-d7390a4dd0fd",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "efafdf8d-f8b3-4bcd-8ce0-8a52495812de",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cba0ffb8-7b46-426c-9465-ff0c647ceaa8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9a4c34c6-51ce-4f18-88f3-21424d23c76d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "690ed981-a86d-4c55-bc4b-a8878969fec1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0a7c2e83-d103-4e69-ba4d-6654154c224a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2e054d01-5460-415b-85dc-9262aee3c08b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "64729395-61ce-4b5e-b79c-ceedca77ce36",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0ae882fa-c574-4f17-8a64-73dd954cb89c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "35e940bd-ddd7-499b-a9fa-3d5332578469"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ebafcbd7-1e5a-47f0-9002-89995dc3df81"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d4922e23-1ca5-4427-b92c-ad8d2c3ff97b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "20a72394-8297-4422-8d4a-1d63c7b02653"
    }
  ]
}