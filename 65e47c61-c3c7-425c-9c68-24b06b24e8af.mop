{
  "Name": "SelectiveDitherMerger",
  "_id": "65e47c61-c3c7-425c-9c68-24b06b24e8af",
  "Namespace": "user.tenfour.experiments",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "298badd5-4a9e-44f2-8c6a-16b50c22a182",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D Bayer;",
          "float SampleRadius;",
          "Texture2D Blue;",
          "Texture2D Image;",
          "float OutputType;",
          "float2 Pixellate;",
          "float Threshold;",
          "//<<< _parameters\r",
          " \r",
          "//>>> setup\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_LINEAR_MIP_POINT;\r",
          "    //Filter = MIN_MAG_LINEAR;\r",
          "    AddressU = Clamp;\r",
          "    AddressV = Clamp;\r",
          "};\r",
          "//<<< setup\r",
          "\r",
          "//>>> declarations\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float2 texCoord : TEXCOORD;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float2 texCoord: TEXCOORD0;\t    \r",
          "    float3 worldTViewPos: TEXCOORD1;\r",
          "    float3 worldTViewDir: TEXCOORD2;\r",
          "};\r",
          "//<<< declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float2 pos = floor(input.pos.xy / Pixellate) * Pixellate;\r",
          "    float sx = SampleRadius * Pixellate.x;\r",
          "    float sy = SampleRadius * Pixellate.y;\r",
          "\r",
          "    //float width, height;\r",
          "    //Image.GetDimensions(width, height);\r",
          "    \r",
          "    //float sx = SampleRadius / width;\r",
          "    //float sy = SampleRadius / height;\r",
          "\r",
          "    /*\r",
          "    float4 y1= Image.Sample(samLinear, float2(input.texCoord.x,       input.texCoord.y + sy));\r",
          "    float4 y2= Image.Sample(samLinear, float2(input.texCoord.x,       input.texCoord.y - sy));\r",
          "    \r",
          "    float4 x1= Image.Sample(samLinear,  float2(input.texCoord.x + sx, input.texCoord.y));\r",
          "    float4 x2= Image.Sample(samLinear,  float2(input.texCoord.x - sx, input.texCoord.y)); \r",
          "    float4 m =  Image.Sample(samLinear, float2(input.texCoord.x,      input.texCoord.y)); \r",
          "    */\r",
          "    //return ((m-y1) + (m-y2) + (m-x1) + (m-x2)) * Strength;\r",
          "\r",
          "\r",
          "    float4 y1= Image.Load(int3(pos.x,       pos.y + sy, 0));\r",
          "    float4 y2= Image.Load(int3(pos.x,       pos.y - sy, 0));\r",
          "    \r",
          "    float4 x1= Image.Load( int3(pos.x + sx, pos.y, 0));\r",
          "    float4 x2= Image.Load( int3(pos.x - sx, pos.y, 0)); \r",
          "    float4 m =  Image.Load(int3(pos.x,      pos.y, 0)); \r",
          "\r",
          "\r",
          "    //float4 bay = Bayer.Sample(samLinear, input.texCoord);\r",
          "    //float4 blue = Blue.Sample(samLinear, input.texCoord);\r",
          "    float4 bay = Bayer.Load(input.pos.xyz);\r",
          "    float4 blue = Blue.Load(input.pos.xyz);\r",
          "    if (OutputType == 3) {// bayer\r",
          "        return bay;\r",
          "    }\r",
          "    if (OutputType == 4) {// blue\r",
          "        return blue;\r",
          "    }\r",
          "\r",
          "    float average =  (           \r",
          "                    abs(x1.r-m.r) + abs(x2.r-m.r) + abs(y1.r - m.r) +abs(y2.r - m.r) +\r",
          "                    abs(x1.g-m.g) + abs(x2.g-m.g) + abs(y1.g - m.g) +abs(y2.g - m.g) +\r",
          "                    abs(x1.b-m.b) + abs(x2.b-m.b) + abs(y1.b - m.b) +abs(y2.b - m.b)\r",
          "                ) / 5;// * Strength;// + Contrast;\r",
          "    \r",
          "    average = step(average, Threshold);\r",
          "    \r",
          "    if (OutputType == 0){\r",
          "        return lerp(bay, blue, average);\r",
          "    }\r",
          "    if (OutputType == 1) {\r",
          "        return float4(average,average, average, 1);\r",
          "    }\r",
          "    if (OutputType == 2) {// input\r",
          "        return m;\r",
          "    }\r",
          "        \r",
          "    \r",
          "    return float4(1,1, 0, 1);\r",
          "    \r",
          "//    return  clamp(float4(average,average,average,1),0 , 10000);\r",
          "    \r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "604d1749-6cfc-4583-87d4-5d89c51094ef",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Bayer",
      "MetaInstanceID": "094dfb9d-1046-438f-baa4-43fd4db2e172",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Blue",
      "MetaInstanceID": "15c6935b-b863-4c00-a959-c37103f2b7e4",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SampleRadius",
      "MetaInstanceID": "4e64e4be-3582-451c-9648-4d67afe7deb4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "2"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "OutputType",
      "MetaInstanceID": "1ca661d9-d2d8-49a8-a03a-67985872842e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "4",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Result",
          "Value": "0"
        },
        {
          "Name": "Mask",
          "Value": "1"
        },
        {
          "Name": "Input",
          "Value": "2"
        },
        {
          "Name": "Bayer",
          "Value": "3"
        },
        {
          "Name": "Blue",
          "Value": "4"
        }
      ]
    },
    {
      "Name": "Pixellate.X",
      "MetaInstanceID": "fd25203f-3023-4dfb-bf05-58a4712f6136",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Pixellate.Y",
      "MetaInstanceID": "696ac602-5d73-4342-9951-c2c305cf8cb9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Threshold",
      "MetaInstanceID": "30caa519-6497-4c59-aea6-0f606a9bd9de",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.005",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "8344e496-b03c-4b32-a8e1-d1361ece04ef",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "ee17919f-2d65-4321-9197-584e23c1ba6f",
      "MetaID": "e1b38073-3cd5-46b2-ac75-cecd1c0b7eb5",
      "Name": "SelectiveDitherMergerFunc",
      "Version": "8964067e-1593-4a52-bbc5-5f9c508e682f",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.IDe1b38073_3cd5_46b2_ac75_cecd1c0b7eb5",
        "{",
        "    public class Class_SelectiveDitherMerger : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Bayer = 1,",
        "            SampleRadius = 2,",
        "            Blue = 3,",
        "            Image = 4,",
        "            OutputType = 5,",
        "            PixellateX = 6,",
        "            PixellateY = 7,",
        "            Threshold = 8",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Bayer = inputs[(int)InputId.Bayer].Eval(context).Image; // Needs to be checked for null!",
        "            var SampleRadius = inputs[(int)InputId.SampleRadius].Eval(context).Value;",
        "            var Blue = inputs[(int)InputId.Blue].Eval(context).Image; // Needs to be checked for null!",
        "            var Image = inputs[(int)InputId.Image].Eval(context).Image; // Needs to be checked for null!",
        "            var OutputType = (int) inputs[(int)InputId.OutputType].Eval(context).Value;",
        "            var PixellateX = inputs[(int)InputId.PixellateX].Eval(context).Value;",
        "            var PixellateY = inputs[(int)InputId.PixellateY].Eval(context).Value;",
        "            var Pixellate = new Vector2(PixellateX, PixellateY);",
        "            var Threshold = inputs[(int)InputId.Threshold].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            if(Image == null)",
        "                return context;",
        "",
        "",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                using (var BayerView = new ShaderResourceView(context.D3DDevice, Bayer))",
        "                using (var BlueView = new ShaderResourceView(context.D3DDevice, Blue))",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Bayer\").AsShaderResource().SetResource(BayerView);",
        "                    _effect.GetVariableByName(\"SampleRadius\").AsScalar().Set(SampleRadius);",
        "                    _effect.GetVariableByName(\"Blue\").AsShaderResource().SetResource(BlueView);",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"OutputType\").AsScalar().Set(OutputType);",
        "                    _effect.GetVariableByName(\"Pixellate\").AsVector().Set(new Vector2(PixellateX, PixellateY));",
        "                    _effect.GetVariableByName(\"Threshold\").AsScalar().Set(Threshold);",
        "                //<<< _setup",
        "",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ee17919f-2d65-4321-9197-584e23c1ba6f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8344e496-b03c-4b32-a8e1-d1361ece04ef"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "298badd5-4a9e-44f2-8c6a-16b50c22a182",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ee17919f-2d65-4321-9197-584e23c1ba6f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "094dfb9d-1046-438f-baa4-43fd4db2e172",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ee17919f-2d65-4321-9197-584e23c1ba6f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4e64e4be-3582-451c-9648-4d67afe7deb4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ee17919f-2d65-4321-9197-584e23c1ba6f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "15c6935b-b863-4c00-a959-c37103f2b7e4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ee17919f-2d65-4321-9197-584e23c1ba6f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "604d1749-6cfc-4583-87d4-5d89c51094ef",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ee17919f-2d65-4321-9197-584e23c1ba6f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1ca661d9-d2d8-49a8-a03a-67985872842e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ee17919f-2d65-4321-9197-584e23c1ba6f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "fd25203f-3023-4dfb-bf05-58a4712f6136",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ee17919f-2d65-4321-9197-584e23c1ba6f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "696ac602-5d73-4342-9951-c2c305cf8cb9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ee17919f-2d65-4321-9197-584e23c1ba6f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "30caa519-6497-4c59-aea6-0f606a9bd9de",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ee17919f-2d65-4321-9197-584e23c1ba6f"
    }
  ]
}