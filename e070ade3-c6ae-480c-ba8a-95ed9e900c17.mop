{
  "Name": "SH_Hypnosquare",
  "_id": "e070ade3-c6ae-480c-ba8a-95ed9e900c17",
  "Namespace": "user.tenfour.shaders",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "03f5f7ad-64af-4d5b-be24-dd634e5d0271",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "float Rotation;",
          "float Phase;",
          "float Lift;",
          "float Noise;",
          "//<<< _parameters\r",
          "\r",
          "const float iBPM;\r",
          "const float iProgram;\r",
          "const float iTime;\r",
          "const float iBeat;\r",
          "static const float PI = atan(1.)*4.;\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "#define iResolution RenderTargetSize\r",
          "#define vec2 float2\r",
          "#define vec3 float3\r",
          "#define vec4 float4\r",
          "#define mat2 float2x2\r",
          "#define fract frac\r",
          "#define mod fmod\r",
          "#define mix lerp\r",
          "#define vec20 (float2(0,0))\r",
          "#define vec30 (float3(0,0,0))\r",
          "#define vec40 (float4(0,0,0,0))\r",
          "#define vec21 (float2(1,1))\r",
          "#define vec31 (float3(1,1,1))\r",
          "#define vec41 (float4(1,1,1,1))\r",
          "#define vec2x(x) (float2((x),(x)))\r",
          "#define vec3x(x) (float3((x),(x),(x)))\r",
          "#define vec4x(x) (float4((x),(x),(x),(x)))\r",
          "\r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "\r",
          "\r",
          "// fixed for mobile + safari\r",
          "void mainImage(out vec4 o, vec2 O)\r",
          "{\r",
          "    float a = Rotation;\r",
          "    float s=sin(a),c=cos(a);\r",
          "    vec2 R = iResolution.xy,\r",
          "        V=mul((O-.5*R)/R.y*5., float2x2(c,-s,s,c))\r",
          "        ,N=O/R-.5;\r",
          "\r",
          "\r",
          "    o=Lift+frac(Phase+abs(vec4(N,-N)*.2+V.x)+abs(V.y));\r",
          "    \r",
          "    //o -= Noise*fract(sin(dot(R+iTime+1e3,N))*1e5);\r",
          "    \r",
          "    o -= dot(N,N*3.);\r",
          "        \r",
          "    o.rg -= .2;\r",
          "}\r",
          "\r",
          "",
          "//<<< PS\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o;\r",
          "    mainImage(o, input.pos.xy);\r",
          "    o = clamp(o,0.,1.);\r",
          "    o.a = 1.0;\r",
          "    return o;\r",
          "}\r",
          "\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotation",
      "MetaInstanceID": "7de5c2ef-1620-496e-b181-3ace30f38967",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Phase",
      "MetaInstanceID": "76c2b06b-82e7-46b7-9e1c-35fd110835e4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Lift",
      "MetaInstanceID": "5c1085dc-edae-478f-ba99-2f35032f2426",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.2"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "41d55c81-16b6-407a-94aa-6ed5ac3c5eca",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "81d6076e-76dd-4606-b7d4-8260bed03edf",
      "MetaID": "71f4be5d-30d5-4344-811d-18c3fe850e4b",
      "Name": "SH_HypnosquareFunc",
      "Version": "197db96b-95d5-4963-a908-99a5e499cb0c",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID71f4be5d_30d5_4344_811d_18c3fe850e4b",
        "{",
        "    public class Class_SH_Hypnosquare : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Rotation = 1,",
        "            Phase = 2,",
        "            Lift = 3",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Rotation = inputs[(int)InputId.Rotation].Eval(context).Value;",
        "            var Phase = inputs[(int)InputId.Phase].Eval(context).Value;",
        "            var Lift = inputs[(int)InputId.Lift].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Rotation\").AsScalar().Set(Rotation);",
        "                    _effect.GetVariableByName(\"Phase\").AsScalar().Set(Phase);",
        "                    _effect.GetVariableByName(\"Lift\").AsScalar().Set(Lift);",
        "                //<<< _setup",
        "",
        "                if (context.GlobalObjects.ContainsKey(\"SKPlayerState\")) {",
        "                  var skstate = (SlashKickPerformer.SKPlayerState)context.GlobalObjects[\"SKPlayerState\"];",
        "                    _effect.GetVariableByName(\"iBPM\").AsScalar().Set((float)skstate.BPM);",
        "                    _effect.GetVariableByName(\"iProgram\").AsScalar().Set(skstate.ProgramIndex);",
        "                    _effect.GetVariableByName(\"iBeat\").AsScalar().Set((float)skstate.Beat);",
        "                }",
        "",
        "                _effect.GetVariableByName(\"iTime\").AsScalar().Set(context.Time);",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "81d6076e-76dd-4606-b7d4-8260bed03edf",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "41d55c81-16b6-407a-94aa-6ed5ac3c5eca"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "03f5f7ad-64af-4d5b-be24-dd634e5d0271",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "81d6076e-76dd-4606-b7d4-8260bed03edf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7de5c2ef-1620-496e-b181-3ace30f38967",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "81d6076e-76dd-4606-b7d4-8260bed03edf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "76c2b06b-82e7-46b7-9e1c-35fd110835e4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "81d6076e-76dd-4606-b7d4-8260bed03edf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5c1085dc-edae-478f-ba99-2f35032f2426",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "81d6076e-76dd-4606-b7d4-8260bed03edf"
    }
  ]
}