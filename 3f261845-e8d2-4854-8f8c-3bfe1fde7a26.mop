{
  "Name": "TriangleTunnel",
  "_id": "3f261845-e8d2-4854-8f8c-3bfe1fde7a26",
  "Namespace": "user.tenfour.shaders",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "f087c3cc-da58-4d31-9d50-1e2ea9731928",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "float2 Radius;",
          "float3 CamPos;",
          "float Iterations;",
          "float TriDepth;",
          "float2 Thickness;",
          "float Rotate;",
          "//<<< _parameters\r",
          "\r",
          "const float iTime;\r",
          "static const float PI = atan(1.)*4.;\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "#define iResolution RenderTargetSize\r",
          "#define vec2 float2\r",
          "#define vec3 float3\r",
          "#define vec4 float4\r",
          "#define mat2 float2x2\r",
          "#define fract frac\r",
          "#define mod fmod\r",
          "#define mix lerp\r",
          "#define vec20 (float2(0,0))\r",
          "#define vec30 (float3(0,0,0))\r",
          "#define vec40 (float4(0,0,0,0))\r",
          "#define vec21 (float2(1,1))\r",
          "#define vec31 (float3(1,1,1))\r",
          "#define vec41 (float4(1,1,1,1))\r",
          "#define vec2x(x) (float2((x),(x)))\r",
          "#define vec3x(x) (float3((x),(x),(x)))\r",
          "#define vec4x(x) (float4((x),(x),(x),(x)))\r",
          "\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;//ANISOTROPIC;",
          "    AddressU = Wrap;",
          "    AddressV = Wrap;",
          "};",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "// https://www.shadertoy.com/view/MdsBR4\r",
          "\r",
          "float sdTriPrism( vec3 p, vec2 h )\r",
          "{\r",
          "    vec3 q = abs(p);\r",
          "    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\r",
          "}\r",
          "\r",
          "float opS( float d1, float d2 )\r",
          "{\r",
          "    return max(-d1,d2);\r",
          "}\r",
          "\r",
          "float3x3 rotz(float a) {\r",
          "    float s = sin(a), c = cos(a);\r",
          "    return float3x3(\r",
          "        c, s, 0, -s, c, 0, 0, 0, 1\r",
          "    );\r",
          "}\r",
          "\r",
          "vec3 hash31(float p)\r",
          "{\r",
          "   vec3 p3 = fract(p * vec3(.1031, .1030, .0973));\r",
          "   p3 += dot(p3, p3.yzx+33.33);\r",
          "   return fract((p3.xxy+p3.yzz)*p3.zyx); \r",
          "}\r",
          "\r",
          "float4 map(vec3 p)\r",
          "{\r",
          "    vec3 q = p;\r",
          "    float id = floor(p.z*2.);\r",
          "    p.z = frac(p.z*2.)-0.5;\r",
          "    \r",
          "    vec3 h = hash31(id + 1e2);\r",
          "    // x = rotation\r",
          "    // y = outer radius\r",
          "    // z = thickness\r",
          "\r",
          "    float a = (h.x - .5) * Rotate;\r",
          "    p = mul(p, rotz(a));\r",
          "    \r",
          "    float outerRad = mix(Radius.x, Radius.y, h.y);\r",
          "    float innerRad = 1.-mix(Thickness.x, Thickness.y, h.z);// 1.-thickness.\r",
          "    innerRad *= outerRad;\r",
          "    \r",
          "\tfloat outer = sdTriPrism(p, vec2(outerRad, TriDepth));\r",
          "    float inner = sdTriPrism(p, vec2(innerRad, TriDepth*2. + 1.));\r",
          "    return float4(hash31(id), opS(inner, outer));\r",
          "}\r",
          "\r",
          "void mainImage( out vec4 fragColor, in vec2 fragCoord )\r",
          "{\r",
          "    vec2 _p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\r",
          "    vec3 ray = normalize(vec3(_p, 1.0));\r",
          "    vec3 cam = CamPos;\r",
          "    \r",
          "    float depth = 0.0, d = 0.0, iter = 0.0;\r",
          "    vec3 p;\r",
          "    vec3 col = vec3(0,0,0);\r",
          "    \r",
          "    for( int i = 0; i < Iterations; i ++)\r",
          "    {\r",
          "    \tp = depth * ray + cam;\r",
          "        float4 m = map(p);\r",
          "        col = m.rgb;\r",
          "        d = m.a;\r",
          "\r",
          "        if (d < 0.001) {\r",
          "\t\t\tbreak;\r",
          "        }\r",
          "\r",
          "\t\tdepth += d * 0.5;\r",
          "\t\titer++;\r",
          "    }\r",
          "    \r",
          "    fragColor.rgb = col * iter / Iterations / depth;\r",
          "    fragColor.a = 1./depth;\r",
          "}\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o;\r",
          "    mainImage(o, input.pos.xy);\r",
          "    o = clamp(o,0.,1.);\r",
          "    return o;\r",
          "}\r",
          "",
          "//<<< PS\r",
          "\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "CamPos.X",
      "MetaInstanceID": "86f5461d-1d24-4919-962b-bf088db73e5d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "CamPos.Y",
      "MetaInstanceID": "a3850e73-545e-46fe-979a-bbcb1909343e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "CamPos.Z",
      "MetaInstanceID": "940ecdd8-0241-4c54-a0b6-0bdafd64a9a6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Iterations",
      "MetaInstanceID": "68e19c3d-2a7b-4ab6-80aa-84c07e3c14f2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "60"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TriDepth",
      "MetaInstanceID": "15d94ab4-5172-4bd6-8b92-c7901f12b87f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.15"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "0.5",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Radius.Min",
      "MetaInstanceID": "a994361b-5dfb-4388-aa3d-cec4178dff75",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Radius.Max",
      "MetaInstanceID": "293cfdf5-872c-47c5-82c8-4e6d7d33833f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Thickness.Min",
      "MetaInstanceID": "db1603c0-182c-4974-a320-ea982eeec43b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Thickness.Max",
      "MetaInstanceID": "4fcffd39-3b69-410f-9bef-e95f7372712a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate",
      "MetaInstanceID": "2d731179-c841-43f3-a39e-2ced78468ba7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "42c45c9e-9b1d-4bd0-ab26-74ddbfcf5a9b",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "148b2642-474d-4824-8dd5-7e6c80f4fd7f",
      "MetaID": "2480e147-f910-40ce-985c-a8cb3308577d",
      "Name": "TriangleTunnelFunc",
      "Version": "6a964323-453d-4774-b551-b10565c0a521",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID2480e147_f910_40ce_985c_a8cb3308577d",
        "{",
        "    public class Class_TriangleTunnel : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            RadiusMin = 1,",
        "            RadiusMax = 2,",
        "            CamPosX = 3,",
        "            CamPosY = 4,",
        "            CamPosZ = 5,",
        "            Iterations = 6,",
        "            TriDepth = 7,",
        "            ThicknessMin = 8,",
        "            ThicknessMax = 9,",
        "            Rotate = 10",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var RadiusMin = inputs[(int)InputId.RadiusMin].Eval(context).Value;",
        "            var RadiusMax = inputs[(int)InputId.RadiusMax].Eval(context).Value;",
        "            var Radius = new Vector2(RadiusMin, RadiusMax);",
        "            var CamPosX = inputs[(int)InputId.CamPosX].Eval(context).Value;",
        "            var CamPosY = inputs[(int)InputId.CamPosY].Eval(context).Value;",
        "            var CamPosZ = inputs[(int)InputId.CamPosZ].Eval(context).Value;",
        "            var CamPos = new Vector3(CamPosX, CamPosY, CamPosZ);",
        "            var Iterations = inputs[(int)InputId.Iterations].Eval(context).Value;",
        "            var TriDepth = inputs[(int)InputId.TriDepth].Eval(context).Value;",
        "            var ThicknessMin = inputs[(int)InputId.ThicknessMin].Eval(context).Value;",
        "            var ThicknessMax = inputs[(int)InputId.ThicknessMax].Eval(context).Value;",
        "            var Thickness = new Vector2(ThicknessMin, ThicknessMax);",
        "            var Rotate = inputs[(int)InputId.Rotate].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Radius\").AsVector().Set(new Vector2(RadiusMin, RadiusMax));",
        "                    _effect.GetVariableByName(\"CamPos\").AsVector().Set(new Vector3(CamPosX, CamPosY, CamPosZ));",
        "                    _effect.GetVariableByName(\"Iterations\").AsScalar().Set(Iterations);",
        "                    _effect.GetVariableByName(\"TriDepth\").AsScalar().Set(TriDepth);",
        "                    _effect.GetVariableByName(\"Thickness\").AsVector().Set(new Vector2(ThicknessMin, ThicknessMax));",
        "                    _effect.GetVariableByName(\"Rotate\").AsScalar().Set(Rotate);",
        "                //<<< _setup",
        "",
        "                _effect.GetVariableByName(\"iTime\").AsScalar().Set(context.Time);",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "148b2642-474d-4824-8dd5-7e6c80f4fd7f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "42c45c9e-9b1d-4bd0-ab26-74ddbfcf5a9b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f087c3cc-da58-4d31-9d50-1e2ea9731928",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "148b2642-474d-4824-8dd5-7e6c80f4fd7f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a994361b-5dfb-4388-aa3d-cec4178dff75",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "148b2642-474d-4824-8dd5-7e6c80f4fd7f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "293cfdf5-872c-47c5-82c8-4e6d7d33833f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "148b2642-474d-4824-8dd5-7e6c80f4fd7f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "86f5461d-1d24-4919-962b-bf088db73e5d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "148b2642-474d-4824-8dd5-7e6c80f4fd7f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a3850e73-545e-46fe-979a-bbcb1909343e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "148b2642-474d-4824-8dd5-7e6c80f4fd7f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "940ecdd8-0241-4c54-a0b6-0bdafd64a9a6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "148b2642-474d-4824-8dd5-7e6c80f4fd7f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "68e19c3d-2a7b-4ab6-80aa-84c07e3c14f2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "148b2642-474d-4824-8dd5-7e6c80f4fd7f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "15d94ab4-5172-4bd6-8b92-c7901f12b87f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "148b2642-474d-4824-8dd5-7e6c80f4fd7f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "db1603c0-182c-4974-a320-ea982eeec43b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "148b2642-474d-4824-8dd5-7e6c80f4fd7f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4fcffd39-3b69-410f-9bef-e95f7372712a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "148b2642-474d-4824-8dd5-7e6c80f4fd7f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2d731179-c841-43f3-a39e-2ced78468ba7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "148b2642-474d-4824-8dd5-7e6c80f4fd7f"
    }
  ]
}