{
  "Name": "LoadRefMapAndFont3",
  "_id": "32bdaf39-9bc0-41bc-aa8c-63f54e5bf190",
  "Namespace": "user.tenfour",
  "Description": "",
  "Inputs": [
    {
      "Name": "ArgsFilePath",
      "MetaInstanceID": "1a15fbdd-365b-476b-b662-7377bdd13263",
      "DefaultValue": {
        "Type": "Text",
        "Value": ""
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "75f64f26-01c3-45f2-a48a-fe9ae0a4e8ce",
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "ddf16986-e6cf-432b-a8ea-43f74ccab712",
      "MetaID": "29c4c899-667b-4fe7-997f-d5d02da5740f",
      "Name": "LoadRefMapAndFont3Func",
      "Version": "6e36e1c5-e55f-40f7-aa34-e2c5487b5038",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using System.IO;",
        "",
        "namespace Framefield.Core.ID29c4c899_667b_4fe7_997f_d5d02da5740f",
        "{",
        "    public class Class_LoadRefMapAndFont3 : OperatorPart.Function",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            ArgsFilePath = 0",
        "        }",
        "        //<<< _inputids",
        "",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            Image = 0",
        "        }",
        "        //<<< _outputids",
        "",
        "        public override void Dispose() {",
        "            Utilities.DisposeObj(ref _refImageResource);",
        "            Utilities.DisposeObj(ref _fontImageResource);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) ",
        "        {",
        "            //>>> _params",
        "            var ArgsFilePath = inputs[(int)InputId.ArgsFilePath].Eval(context).Text;",
        "            //<<< _params",
        "            ",
        "            DateTime? writeTime = null;",
        "            if (ArgsFilePath == _lastArgsPath) {",
        "                writeTime = System.IO.File.GetLastWriteTime(ArgsFilePath);",
        "                //Logger.Info(this,\"writeTime '{0}'\", writeTime);",
        "                if (writeTime.Value == _lastArgsWriteTime)",
        "                {",
        "                    Changed = false;",
        "                }",
        "            }",
        "",
        "            _lastArgsPath = ArgsFilePath;",
        "            ",
        "            if (!writeTime.HasValue) {",
        "                // shouldn't really be called except some debugging cases.",
        "                writeTime = System.IO.File.GetLastWriteTime(ArgsFilePath);",
        "            }",
        "            ",
        "            _lastArgsWriteTime = writeTime.Value;",
        "",
        "            if (Changed)",
        "            {",
        "                Dispose();",
        "                ",
        "                var lines = System.IO.File.ReadAllLines(ArgsFilePath);",
        "                for (int i = 0; i < lines.Length - 1; ++ i) {",
        "                    if (lines[i].Equals(\"-pf\", StringComparison.InvariantCultureIgnoreCase)) {",
        "                        string s = lines[i + 1].ToLowerInvariant();",
        "                        if (s == \"square\") {",
        "                            pixelFormat = 0;",
        "                            Logger.Info(this,\"Pixel format: square\");",
        "                        }",
        "                        if (s == \"fivetile\") {",
        "                            pixelFormat = 1;",
        "                            Logger.Info(this,\"Pixel format: five tile\");",
        "                        }",
        "                    }",
        "                    if (lines[i].Equals(\"-cs\", StringComparison.InvariantCultureIgnoreCase)) {",
        "                        string s = lines[i + 1].ToLowerInvariant();",
        "                        switch(s) {",
        "                            case \"hsl\":// 0=hsl, 1=jpeg, 2=lab, 3=nyuv",
        "                                colorSpace = 0;",
        "                                Logger.Info(this,\"Colorspace: HSL\");",
        "                                break;",
        "                            case \"jpeg\":// 0=hsl, 1=jpeg, 2=lab, 3=nyuv",
        "                                colorSpace = 1;",
        "                                Logger.Info(this,\"Colorspace: JPEG\");",
        "                                break;",
        "                            case \"lab\":// 0=hsl, 1=jpeg, 2=lab, 3=nyuv",
        "                                colorSpace = 2;",
        "                                Logger.Info(this,\"Colorspace: LAB\");",
        "                                break;",
        "                            case \"nyuv\":// 0=hsl, 1=jpeg, 2=lab, 3=nyuv",
        "                                colorSpace = 3;",
        "                                Logger.Info(this,\"Colorspace: NYUV\");",
        "                                break;",
        "                        }",
        "                    }",
        "                    else if (lines[i].Equals(\"-charsize\", StringComparison.InvariantCultureIgnoreCase)) {",
        "                        string s = lines[i + 1];",
        "                        charSizeX = Convert.ToInt32(s.Split('x')[0]);",
        "                        charSizeY = Convert.ToInt32(s.Split('x')[1]);",
        "                        Logger.Info(this,\"Char size: {0} x {1}\", charSizeX, charSizeY);",
        "                    }",
        "                }",
        "                for (int i = 0; i < lines.Length - 1; ++ i) {",
        "                    if (lines[i].Equals(\"-pfargs\", StringComparison.InvariantCultureIgnoreCase)) {",
        "                        if (pixelFormat == 0) {",
        "                            // 8v3x3+0",
        "                            string s = lines[i + 1];",
        "                            valuesPerComponent = Convert.ToInt32(s.Split('v')[0]);",
        "                            s = s.Split('v')[1];",
        "                            chromaElements = Convert.ToInt32(s.Split('+')[1]);",
        "                            s = s.Split('+')[0];",
        "                            lumaTilesX = Convert.ToInt32(s.Split('x')[0]);",
        "                            lumaTilesY = Convert.ToInt32(s.Split('x')[1]);",
        "                            Logger.Info(this,\"Pixel format args: {0}v{1}x{2}+{3}\", valuesPerComponent, lumaTilesX, lumaTilesY, chromaElements);",
        "                        } else {",
        "                            // 8v5+0",
        "                            string s = lines[i + 1];",
        "                            valuesPerComponent = Convert.ToInt32(s.Split('v')[0]);",
        "                            s = s.Split('v')[1];",
        "                            chromaElements = Convert.ToInt32(s.Split('+')[1]);",
        "                            lumaTilesX = 5;",
        "                            lumaTilesY = 1;",
        "                            s = s.Split('+')[0];",
        "                            Logger.Info(this,\"Pixel format args: {0}v5+{1}\", valuesPerComponent, chromaElements);",
        "                        }",
        "                    }",
        "                }",
        "                ",
        "                string dir = System.IO.Path.GetDirectoryName(ArgsFilePath);",
        "",
        "                string refMapPath = System.IO.Directory.EnumerateFiles(dir, \"mapref_*\", System.IO.SearchOption.TopDirectoryOnly).First();",
        "                Logger.Info(this,\"Ref map image loaded from '{0}'\", refMapPath);",
        "                string fontPath = System.IO.Directory.EnumerateFiles(dir, \"mapfont_*\", System.IO.SearchOption.TopDirectoryOnly).First();",
        "                Logger.Info(this,\"Font image loaded from '{0}'\", fontPath);",
        "                ",
        "                _refImageResource = ResourceManager.ReadImage(refMapPath);",
        "                //Logger.Error(this,\"RefImagefile not found '{0}'\", RefImagePath);",
        "                _fontImageResource = ResourceManager.ReadImage(fontPath);  ",
        "",
        "                Changed = false;",
        "            }",
        "",
        "            if (_refImageResource != null && _fontImageResource != null)",
        "            {",
        "                context.Dynamic = new Dictionary<string, object>();",
        "                context.Dynamic[\"CharSize\"] = new Vector2(charSizeX, charSizeY);",
        "                context.Dynamic[\"ValuesPerTile\"] = valuesPerComponent;",
        "                context.Dynamic[\"LuminanceTiles\"] = new Vector2(lumaTilesX, lumaTilesY);",
        "                context.Dynamic[\"ChromaElements\"] = chromaElements;",
        "                context.Dynamic[\"PixelFormat\"] = pixelFormat;// 0=square, 1=fivetile",
        "                context.Dynamic[\"ColorSpace\"] = colorSpace;",
        "                context.Dynamic[\"ArgsFilePath\"] = ArgsFilePath;",
        "                ",
        "                context.Dynamic[\"HashCode\"] = string.Format(\"{0}|{1}\", ArgsFilePath, _lastArgsWriteTime.ToBinary().ToString(\"x\"));",
        "                ",
        "                context.Dynamic[\"RefImage\"] = _refImageResource.Image;",
        "                context.Dynamic[\"FontImage\"] = _fontImageResource.Image;",
        "            }",
        "            else",
        "            {",
        "                context.Dynamic = null;",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        ImageResource _refImageResource;",
        "        ImageResource _fontImageResource;",
        "        int charSizeX = 8;",
        "        int charSizeY = 8;",
        "        int valuesPerComponent = 8;",
        "        int lumaTilesX = 2;",
        "        int lumaTilesY = 2;",
        "        int chromaElements = 2;",
        "        int pixelFormat = 0;// 0=square, 1=fivetile",
        "        int colorSpace = 0;// 0=hsl, 1=jpeg, 2=lab, 3=nyuv",
        "",
        "        DateTime _lastArgsWriteTime = DateTime.MaxValue;//_lastArgsPath = String.Empty; // prevent loading",
        "        string _lastArgsPath = \"\";",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1a15fbdd-365b-476b-b662-7377bdd13263",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ddf16986-e6cf-432b-a8ea-43f74ccab712"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ddf16986-e6cf-432b-a8ea-43f74ccab712",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "75f64f26-01c3-45f2-a48a-fe9ae0a4e8ce"
    }
  ]
}