{
  "Name": "ASCIIFilterRef2XXX",
  "_id": "cde891df-c5dd-4bc4-b83c-49f339a830ab",
  "Namespace": "user.tenfour",
  "Description": "Y=multi component",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "b9957924-6fd3-4cc6-a8cc-2d10d3dbbed1",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D Image;",
          "float Scale;",
          "//<<< _parameters\r",
          "Texture2D RefImage;\r",
          "Texture2D FontImage;\r",
          "float2 CharSize;\r",
          "float ValuesPerTile;\r",
          "float2 LuminanceTiles;\r",
          "float ChromaElements;\r",
          "float MapEntryCount;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float2 texCoord : TEXCOORD;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float2 texCoord: TEXCOORD0;\r",
          "};\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "#define Round(c) (floor((c)+.5)\r",
          "/*\r",
          "float3 rgb2xyz( float3 c ) {\r",
          "    float3 tmp;\r",
          "    tmp.x = ( c.r > 0.04045 ) ? pow( abs(( c.r + 0.055 ) / 1.055), 2.4 ) : c.r / 12.92;\r",
          "    tmp.y = ( c.g > 0.04045 ) ? pow( abs(( c.g + 0.055 ) / 1.055), 2.4 ) : c.g / 12.92,\r",
          "    tmp.z = ( c.b > 0.04045 ) ? pow( abs(( c.b + 0.055 ) / 1.055), 2.4 ) : c.b / 12.92;\r",
          "    const float3x3 mat = float3x3(\r",
          "\t\t0.4124, 0.3576, 0.1805,\r",
          "        0.2126, 0.7152, 0.0722,\r",
          "        0.0193, 0.1192, 0.9505 \r",
          "\t);\r",
          "    return 100.0 * mul(tmp, mat);\r",
          "}\r",
          "\r",
          "float3 xyz2lab( float3 c ) {\r",
          "    float3 n = c / float3(95.047, 100, 108.883);\r",
          "    float3 v;\r",
          "    v.x = ( n.x > 0.008856 ) ? pow( abs(n.x), 1.0 / 3.0 ) : ( 7.787 * n.x ) + ( 16.0 / 116.0 );\r",
          "    v.y = ( n.y > 0.008856 ) ? pow( abs(n.y), 1.0 / 3.0 ) : ( 7.787 * n.y ) + ( 16.0 / 116.0 );\r",
          "    v.z = ( n.z > 0.008856 ) ? pow( abs(n.z), 1.0 / 3.0 ) : ( 7.787 * n.z ) + ( 16.0 / 116.0 );\r",
          "    return float3(( 116.0 * v.y ) - 16.0, 500.0 * ( v.x - v.y ), 200.0 * ( v.y - v.z ));\r",
          "}\r",
          "float3 rgb2lab( float3 c ) {\r",
          "    float3 lab = xyz2lab( rgb2xyz( c ) );\r",
          "    return float3( lab.x / 100.0, 0.5 + 0.5 * ( lab.y / 127.0 ), 0.5 + 0.5 * ( lab.z / 127.0 ));\r",
          "}\r",
          "*/\r",
          "float3 rgb2NYUV(float3 c) {\r",
          "    float2 uv = float2(c.g - c.b, c.r - c.b);\r",
          "    uv /= 2;\r",
          "    uv = frac(uv + 1);// so -.5-0 maps to .5 to 1, and 0-.5 still maps to 0-.5.\r",
          "    \r",
          "    return float3((c.r + c.g + c.b)/3.0,\r",
          "        uv);\r",
          "\r",
          "//    return float3((c.r + c.g + c.b)/3.0,\r",
          "   //     (c.g - c.b) * .5 + .5,\r",
          "    //    (c.r - c.b) * .5 + .5);\r",
          "}\r",
          "float ToGrayscale(float3 c){\r",
          "    return (c.r + c.g + c.b)/3.0;\r",
          "}\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    // the upper-left pixel position of the character-sized cell.\r",
          "    float2 ScaledCharSize = CharSize * Scale;\r",
          "    int2 srcCellOrigin = floor(input.pos.xy / ScaledCharSize) * ScaledCharSize;// pixel position of the cell upper left\r",
          "    int2 srcCellPos = input.pos.xy - srcCellOrigin; // pixel position within this cell, 0-ScaledCharSize\r",
          "    float2 HalfTileSize = ScaledCharSize / 2.;\r",
          "    srcCellPos /= Scale;// now in coords that play well with the font texture\r",
          "    \r",
          "    //float imgW, imgH;\r",
          "    //Image.GetDimensions(imgW, imgH);\r",
          "    \r",
          "    float refW, refH;\r",
          "    RefImage.GetDimensions(refW, refH);\r",
          "\r",
          "    float fontImgW, fontImgH;\r",
          "    FontImage.GetDimensions(fontImgW, fontImgH);\r",
          "\r",
          "    uint fontCellsX = (uint)(fontImgW / CharSize.x);\r",
          "\r",
          "    float halfSegCenter = 0.25 / ValuesPerTile;\r",
          "\r",
          "    float vals[11];\r",
          "    float3 srcColor;\r",
          "    float3 yuv, charRGB = float3(0,0,0);\r",
          "    for (int ty = 0; ty < LuminanceTiles.y; ++ ty) {\r",
          "        for (int tx = 0; tx < LuminanceTiles.x; ++ tx) {\r",
          "            float2 tileIndex = float2(tx, ty);\r",
          "            float2 tilePos = (tileIndex / LuminanceTiles) * ScaledCharSize; // pixel position of the upper-left corner of this tile relative to the char cell\r",
          "            srcColor = Image.Load(int3(srcCellOrigin + tilePos + HalfTileSize + .5, 0)).rgb; // sample the center-ish pix of this tile\r",
          "          //srcColor = float3(0,0,0);\r",
          "            vals[tx + ty * LuminanceTiles.x] = clamp(ToGrayscale(srcColor), 0, 1);\r",
          "            charRGB += srcColor;\r",
          "        }\r",
          "    }\r",
          "    \r",
          "    float lumaComponents = LuminanceTiles.x * LuminanceTiles.y;\r",
          "    if (ChromaElements >= 2.0) {\r",
          "        charRGB /= lumaComponents;\r",
          "        float3 charYUV = rgb2NYUV(charRGB);\r",
          "        vals[lumaComponents] = charYUV.g;\r",
          "        vals[lumaComponents + 1] = charYUV.b;\r",
          "    }\r",
          "    \r",
          "    uint ID = 0;\r",
          "    for (int i = lumaComponents + ChromaElements - 1; i >= 0 ; -- i) {\r",
          "        float v = vals[i];\r",
          "        v -= halfSegCenter;\r",
          "        v = clamp(v, 0, 1);\r",
          "        v *= ValuesPerTile;\r",
          "        ID *= ValuesPerTile;\r",
          "        ID += (int)floor(v);\r",
          "    }\r",
          "    \r",
          "    //ID = clamp(ID, 0, MapEntryCount);\r",
          "\r",
          "    //return float4(vals[3], vals[4], vals[5],1);\r",
          "\r",
          "    //float d = abs(ID - 7500);\r",
          "    //return float4(d *.0001,0,0,1);\r",
          "    //return float4(ValuesPerTile / 10, 0,0,1);\r",
          "\r",
          "    int2 refCell = int2(ID % (uint)refW, ID / (uint)refW);\r",
          "    //return float4((float)refCell.x / 48.0, (float)refCell.y / 36.0, 0, 1);\r",
          "    \r",
          "    float3 ref = RefImage.Load(int3(refCell, 0)).rgb * 255.0;\r",
          "    \r",
          "    // convert ref to linear index.\r",
          "    int fontID = ((int)ref.r) + ((int)ref.g * 256) + ((int)ref.b * 65536);\r",
          "    int2 fontCell = int2(fontID % fontCellsX, fontID / fontCellsX);\r",
          "\r",
          "    float3 fontColor = FontImage.Load(int3((fontCell * CharSize) + srcCellPos, 0)).rgb;\r",
          "    return float4(fontColor,1);\r",
          "\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "3df6a921-218a-4c11-a97f-2da17fd3bc73",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MapArgsFilePath",
      "MetaInstanceID": "89d11a8e-b05f-48b7-8b7c-75a2266774ed",
      "DefaultValue": {
        "Type": "Text",
        "Value": ""
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scale",
      "MetaInstanceID": "4e607818-ec61-4913-bad4-14a1036a8052",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "INTEGRAL.\r\n",
      "Min": "0.01",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "4ec436e5-dbeb-4023-96a6-712a2352036d",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "df5d76ad-6af4-4b19-9c7e-e67fda60f71a",
      "MetaID": "d46141ed-d625-4280-a77a-bae927e980a3",
      "Name": "ASCIIFilterRef2XXXFunc",
      "Version": "0de5f053-227a-4582-a58f-50d220782ae5",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.IDd46141ed_d625_4280_a77a_bae927e980a3",
        "{",
        "    public class Class_ASCIIFilterRef2 : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Scale = 2,",
        "            MapArgsFilePath = 3",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override void Dispose() {",
        "            Utilities.DisposeObj(ref _refImageResource);",
        "            Utilities.DisposeObj(ref _fontImageResource);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Image = inputs[(int)InputId.Image].Eval(context).Image; // Needs to be checked for null!",
        "            var Scale = inputs[(int)InputId.Scale].Eval(context).Value;",
        "            var MapArgsFilePath = inputs[(int)InputId.MapArgsFilePath].Eval(context).Text;",
        "            //<<< _params",
        "",
        "",
        "            if (MapArgsFilePath == _lastArgsPath)",
        "            {",
        "                Changed = false;",
        "            }",
        "",
        "            _lastArgsPath = MapArgsFilePath;",
        "            ",
        "",
        "            if (Changed)",
        "            {",
        "                Dispose();",
        "                ",
        "                var lines = System.IO.File.ReadAllLines(MapArgsFilePath);",
        "                for (int i = 0; i < lines.Length - 1; ++ i) {",
        "                    if (lines[i].Equals(\"-pfargs\", StringComparison.InvariantCultureIgnoreCase)) {",
        "                        // 8v3x3+0",
        "                        string s = lines[i + 1];",
        "                        valuesPerComponent = Convert.ToInt32(s.Split('v')[0]);",
        "                        s = s.Split('v')[1];",
        "                        chromaElements = Convert.ToInt32(s.Split('+')[1]);",
        "                        s = s.Split('+')[0];",
        "                        lumaTilesX = Convert.ToInt32(s.Split('x')[0]);",
        "                        lumaTilesY = Convert.ToInt32(s.Split('x')[1]);",
        "                    }",
        "                    if (lines[i].Equals(\"-charsize\", StringComparison.InvariantCultureIgnoreCase)) {",
        "                        string s = lines[i + 1];",
        "                        charSizeX = Convert.ToInt32(s.Split('x')[0]);",
        "                        charSizeY = Convert.ToInt32(s.Split('x')[1]);",
        "                    }",
        "                }",
        "                ",
        "                string dir = System.IO.Path.GetDirectoryName(MapArgsFilePath);",
        "",
        "                string refMapPath = System.IO.Directory.EnumerateFiles(dir, \"mapref_*\", System.IO.SearchOption.TopDirectoryOnly).First();",
        "                Logger.Info(this,\"Ref map image loaded from '{0}'\", refMapPath);",
        "                string fontPath = System.IO.Directory.EnumerateFiles(dir, \"mapfont_*\", System.IO.SearchOption.TopDirectoryOnly).First();",
        "                Logger.Info(this,\"Font image loaded from '{0}'\", fontPath);",
        "                ",
        "                _refImageResource = ResourceManager.ReadImage(refMapPath);",
        "                //Logger.Error(this,\"RefImagefile not found '{0}'\", RefImagePath);",
        "                _fontImageResource = ResourceManager.ReadImage(fontPath);  ",
        "",
        "                Changed = false;",
        "            }",
        "",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"Scale\").AsScalar().Set(Scale);",
        "                //<<< _setup",
        "",
        "                    using (var RefImageView = new ShaderResourceView(context.D3DDevice, _refImageResource))",
        "                    using (var FontImageView = new ShaderResourceView(context.D3DDevice, _fontImageResource))",
        "                    {",
        "                        //Logger.Debug(this,\"MapImageView is {0}\", MapImageView.GetType());",
        "                        _effect.GetVariableByName(\"RefImage\").AsShaderResource().SetResource(RefImageView);",
        "                        _effect.GetVariableByName(\"FontImage\").AsShaderResource().SetResource(FontImageView);",
        "                ",
        "                        _effect.GetVariableByName(\"CharSize\").AsVector().Set(new Vector2(charSizeX, charSizeY));",
        "                        _effect.GetVariableByName(\"LuminanceTiles\").AsVector().Set(new Vector2(lumaTilesX, lumaTilesY));",
        "                        _effect.GetVariableByName(\"ValuesPerTile\").AsScalar().Set(valuesPerComponent);",
        "                        _effect.GetVariableByName(\"ChromaElements\").AsScalar().Set(chromaElements);",
        "                        ",
        "                        int dimensions = (int)Math.Round(chromaElements + lumaTilesX);",
        "                        int valuesPerTile = (int)Math.Round(valuesPerComponent);",
        "                        int mapEntryCount = (int)Math.Round(Math.Pow(valuesPerTile, dimensions));",
        "                        ",
        "                        _effect.GetVariableByName(\"MapEntryCount\").AsScalar().Set(mapEntryCount);",
        "                        ",
        "",
        "                        Render(context);",
        "                    }",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "        ImageResource _refImageResource;",
        "        ImageResource _fontImageResource;",
        "        int charSizeX = 8;",
        "        int charSizeY = 8;",
        "        int valuesPerComponent = 8;",
        "        int lumaTilesX = 2;",
        "        int lumaTilesY = 2;",
        "        int chromaElements = 2;",
        "        String _lastArgsPath = String.Empty; // prevent loading",
        "",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "df5d76ad-6af4-4b19-9c7e-e67fda60f71a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4ec436e5-dbeb-4023-96a6-712a2352036d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b9957924-6fd3-4cc6-a8cc-2d10d3dbbed1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "df5d76ad-6af4-4b19-9c7e-e67fda60f71a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3df6a921-218a-4c11-a97f-2da17fd3bc73",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "df5d76ad-6af4-4b19-9c7e-e67fda60f71a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4e607818-ec61-4913-bad4-14a1036a8052",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "df5d76ad-6af4-4b19-9c7e-e67fda60f71a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "89d11a8e-b05f-48b7-8b7c-75a2266774ed",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "df5d76ad-6af4-4b19-9c7e-e67fda60f71a"
    }
  ]
}