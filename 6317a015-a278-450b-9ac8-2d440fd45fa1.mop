{
  "Name": "SH_BloominPartition",
  "_id": "6317a015-a278-450b-9ac8-2d440fd45fa1",
  "Namespace": "user.tenfour.shaders",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "12b74c0a-ccd6-4fc3-974f-86073d55187f",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "float BlossomStrength;",
          "float WhiteOut;",
          "//<<< _parameters\r",
          "\r",
          "const float iBPM;\r",
          "const float iProgram;\r",
          "const float iTime;\r",
          "const float iBeat;\r",
          "\r",
          "\r",
          "\r",
          "#define iResolution RenderTargetSize\r",
          "#define vec2 float2\r",
          "#define vec3 float3\r",
          "#define vec4 float4\r",
          "#define mat2 float2x2\r",
          "#define fract frac\r",
          "#define mod fmod\r",
          "\r",
          "\r",
          "\r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "#define POINTS 7.\r",
          "#define PARTITIONS 7.\r",
          "\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "vec4 hash41(float p)\r",
          "{\r",
          "\tvec4 p4 = fract(p * vec4(.1031, .1030, .0973, .1099));\r",
          "    p4 += dot(p4, p4.wzxy+33.33);\r",
          "    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\r",
          "}\r",
          "\r",
          "void mainImage( out vec4 o, vec2 C)\r",
          "{\r",
          "    vec2 R = iResolution.xy;\r",
          "    vec2 N = C/R-.5;\r",
          "    vec2 uv = N;\r",
          "    uv.x *= R.x/R.y;\r",
          "    float t = iTime *.5;\r",
          "    uv *= 1.7;\r",
          "\r",
          "    vec4 nearestPt = vec4(0,0,0,0)+1e4;//xy=pt, z = seed, w=dist\r",
          "    vec4 nearestPt2;// second-nearest point. xy=pt, z = seed, w=dist\r",
          "\to = vec4(1,1,1,1);\r",
          "    float ipartition = 0.;\r",
          "    for (; ipartition < PARTITIONS; ++ ipartition) {\r",
          "        vec4 hpart = hash41(1e2+ipartition);\r",
          "        for (float i = 0.; i < POINTS; ++ i) {\r",
          "            vec4 h = hash41((i+1.)*PARTITIONS+(ipartition+1.));\r",
          "            vec4 pt = vec4(\r",
          "                sin((h.x)*PI2+t*h.z)*.5,// generating points could be improved; this is pretty bad 4real\r",
          "                cos((h.y)*PI2+t*h.w)*.5,\r",
          "                h.z,// some kind of random seed\r",
          "                0);\r",
          "\r",
          "            pt.w = length(uv - pt.xy);\r",
          "            o.rgb /= clamp(pt.w*3.,0.1,1.);\r",
          "\r",
          "           \tpt.w *= pt.w;\r",
          "            if (pt.w < nearestPt.w) {\r",
          "                nearestPt2 = nearestPt;\r",
          "                nearestPt = pt;\r",
          "            } else if (pt.w < nearestPt2.w) {\r",
          "                nearestPt2 = pt;\r",
          "            }\r",
          "        }\r",
          "\r",
          "        // just for performance, trying to avoid a 2nd hash here. but it means\r",
          "        // certain colors will be favored visually. i don't mind, that's an opportunity\r",
          "        // to stylize\r",
          "        //o *= hash41(nearestPt.z*1e2);\r",
          "        o.rgb *= nearestPt.zxy;\r",
          "        float d = nearestPt2.w - nearestPt.w;\r",
          "        if (d < 0.02) {\r",
          "            // if dist to 2nd-nearest point is small, then we're on a border\r",
          "            break;\r",
          "        }\r",
          "        \r",
          "        //uv -= nearestPt.xy*(sin(t*1.5)+.2);// blossom effect\r",
          "        uv -= nearestPt.xy*(frac(iBeat/2.)*BlossomStrength);// blossom effect\r",
          "        uv *= 1.1;\r",
          "        uv = uv.yx; // cheap attempt to reduce regularity\r",
          "    }\r",
          "    \r",
          "\to /= ipartition + 1.;\r",
          "    o = clamp(o,0.,1.);\r",
          "    o = pow(o, o-o+.5);\r",
          "    o = lerp(o, vec4(1,1,1,1), WhiteOut);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "",
          "//<<< PS\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o;\r",
          "    mainImage(o, input.pos.xy);\r",
          "    o.a = 1.0;\r",
          "    return o;\r",
          "}\r",
          "\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BlossomStrength",
      "MetaInstanceID": "6eed2736-9657-4b67-a717-70d49c2ee4aa",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "WhiteOut",
      "MetaInstanceID": "9ba7b83b-58fd-4351-a176-52bbd24b2b48",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "6bb69807-b697-4773-a62d-e74f27100673",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "0f48a4b3-b021-4ea4-b56e-7856676f8180",
      "MetaID": "8b5498fe-f799-4f32-81d8-91a93c143c35",
      "Name": "SH_BloominPartitionFunc",
      "Version": "5307f9fd-91ce-48d7-994f-570ddb1e92f7",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID8b5498fe_f799_4f32_81d8_91a93c143c35",
        "{",
        "    public class Class_SH_BloominPartition : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            BlossomStrength = 1,",
        "            WhiteOut = 2",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var BlossomStrength = inputs[(int)InputId.BlossomStrength].Eval(context).Value;",
        "            var WhiteOut = inputs[(int)InputId.WhiteOut].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"BlossomStrength\").AsScalar().Set(BlossomStrength);",
        "                    _effect.GetVariableByName(\"WhiteOut\").AsScalar().Set(WhiteOut);",
        "                //<<< _setup",
        "",
        "            var skstate = Framefield.Core.OperatorPartContext.SKServerState;",
        "                    _effect.GetVariableByName(\"iBPM\").AsScalar().Set((float)skstate.BPM);",
        "                    _effect.GetVariableByName(\"iProgram\").AsScalar().Set(skstate.ProgramIndex);",
        "                    _effect.GetVariableByName(\"iBeat\").AsScalar().Set((float)skstate.ProgramStreamBeat);",
        "",
        "                _effect.GetVariableByName(\"iTime\").AsScalar().Set(context.Time);",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0f48a4b3-b021-4ea4-b56e-7856676f8180",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6bb69807-b697-4773-a62d-e74f27100673"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "12b74c0a-ccd6-4fc3-974f-86073d55187f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0f48a4b3-b021-4ea4-b56e-7856676f8180"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6eed2736-9657-4b67-a717-70d49c2ee4aa",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0f48a4b3-b021-4ea4-b56e-7856676f8180"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9ba7b83b-58fd-4351-a176-52bbd24b2b48",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0f48a4b3-b021-4ea4-b56e-7856676f8180"
    }
  ]
}