{
  "Name": "ASCIIFilterRef",
  "_id": "cb95295a-3bd9-4320-af7a-b70be703601e",
  "Namespace": "user.tenfour",
  "Description": "Y=multi component",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "681c4b99-9f10-4308-8ab4-099d211c77f7",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "\r",
          "\r",
          "//>>> __defines\r",
          "#define DIMENSIONS 5\r",
          "#define VALUEELEMENTS 7\r",
          "#define PIXELFORMAT_FIVETILE\r",
          "#define COLORSPACE_LAB\r",
          "\r",
          "//<<< __defines\r",
          "\r",
          "\r",
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D Image;",
          "float Scale;",
          "float DitherAmount;",
          "float FiveTileSampleAmt;",
          "//<<< _parameters\r",
          "Texture2D RefImage;\r",
          "Texture2D FontImage;\r",
          "const float2 CharSize;\r",
          "const int PixelFormat;// 0 = square, 1=five tile\r",
          "const int ColorSpace;// 0=hsl, 1=jpeg, 2=lab, 3=nyuv\r",
          "const float ValuesPerTile;\r",
          "const float2 LuminanceTiles;\r",
          "const float ChromaElements;\r",
          "const float MapEntryCount;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float2 texCoord : TEXCOORD;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float2 texCoord: TEXCOORD0;\r",
          "};\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "#if !defined(DIMENSIONS)\r",
          "#define DIMENSIONS 20 // practical maximum. shouldn't ever happen though.\r",
          "#endif\r",
          "#if !defined(VALUEELEMENTS)\r",
          "#define VALUEELEMENTS 20\r",
          "#endif\r",
          "\r",
          "#define Epsilon (1e-10)\r",
          "\r",
          "// PIXELFORMAT_SQUARE\r",
          "// PIXELFORMAT_FIVETILE\r",
          "// PIXELFORMAT_UNKNOWN\r",
          "\r",
          "// COLORSPACE_HSL\r",
          "// COLORSPACE_JPEG\r",
          "// COLORSPACE_LAB\r",
          "// COLORSPACE_NYUV\r",
          "// COLORSPACE_UNKNOWN\r",
          "\r",
          "float GetBayerShift(uint2 cell)\r",
          "{\r",
          "    const int dim = 8;\r",
          "    const float kern[dim*dim] = {\r",
          "        0.       ,0.5      ,0.125    ,0.625    ,0.03125  ,0.53125  ,0.15625  ,0.65625 ,\r",
          "        0.75     ,0.25     ,0.875    ,0.375    ,0.78125  ,0.28125  ,0.90625  ,0.40625 ,\r",
          "        0.1875   ,0.6875   ,0.0625   ,0.5625   ,0.21875  ,0.71875  ,0.09375  ,0.59375 ,\r",
          "        0.9375   ,0.4375   ,0.8125   ,0.3125   ,0.96875  ,0.46875  ,0.84375  ,0.34375 ,\r",
          "        0.046875 ,0.546875 ,0.171875 ,0.671875 ,0.015625 ,0.515625 ,0.140625 ,0.640625,\r",
          "        0.796875 ,0.296875 ,0.921875 ,0.421875 ,0.765625 ,0.265625 ,0.890625 ,0.390625,\r",
          "        0.234375 ,0.734375 ,0.109375 ,0.609375 ,0.203125 ,0.703125 ,0.078125 ,0.578125,\r",
          "        0.984375 ,0.484375 ,0.859375 ,0.359375 ,0.953125 ,0.453125 ,0.828125 ,0.328125};\r",
          "    cell %= dim;\r",
          "    return kern[cell.x + cell.y * dim] - .5;// -.5 to .5\r",
          "}\r",
          "///////////////////////////////////////////////////////////////////////////\r",
          "// RGB -> HSL conversion\r",
          "\r",
          "float3 RGBtoHCV(in float3 RGB)\r",
          "{\r",
          "    // Based on work by Sam Hocevar and Emil Persson\r",
          "    float4 P = (RGB.g < RGB.b) ? float4(RGB.bg, -1.0, 2.0/3.0) : float4(RGB.gb, 0.0, -1.0/3.0);\r",
          "    float4 Q = (RGB.r < P.x) ? float4(P.xyw, RGB.r) : float4(RGB.r, P.yzx);\r",
          "    float C = Q.x - min(Q.w, Q.y);\r",
          "    float H = abs((Q.w - Q.y) / (6 * C + Epsilon) + Q.z);\r",
          "    return float3(H, C, Q.x);\r",
          "}\r",
          "float3 RGBtoHSL(in float3 RGB)\r",
          "{\r",
          "    float3 HCV = RGBtoHCV(RGB);\r",
          "    float L = HCV.z - HCV.y * 0.5;\r",
          "    float S = HCV.y / (1 - abs(L * 2 - 1) + Epsilon);\r",
          "    return float3(HCV.x, S, L);\r",
          "}\r",
          "\r",
          "float3 rgb2NormalizedHSL(float3 c) {\r",
          "    return RGBtoHSL(c).zxy; // expects luma to be 1st component\r",
          "}\r",
          "\r",
          "///////////////////////////////////////////////////////////////////////////\r",
          "// RGB -> JPEG conversion\r",
          "float3 rgb2JPEG(float3 c) {\r",
          "    float Y = (0.2989 * c.r + 0.5866 * c.g + 0.1145 * c.b);\r",
          "    float Cb = (-0.1687 * c.r - 0.3313 * c.g + 0.5000 * c.b);\r",
          "    float Cr = (0.5000 * c.r - 0.4184 * c.g - 0.0816 * c.b);\r",
          "    float3 ret;\r",
          "    ret.x = Y;\r",
          "    ret.y = Cb; // -.5, .5 center 0\r",
          "    if (ret.y < 0)\r",
          "        ret.y += 1;\r",
          "    ret.z = Cr; // -.5, .5 center 0\r",
          "    if (ret.z < 0)\r",
          "        ret.z += 1;\r",
          "    return ret;\r",
          "}\r",
          "\r",
          "\r",
          "///////////////////////////////////////////////////////////////////////////\r",
          "// RGB -> LAB conversion\r",
          "// https://github.com/sv3/gift/blob/master/RGB2Lab.glsl\r",
          "float3 RGB2Lab(float3 rgb){\r",
          "    float R = rgb.x;\r",
          "    float G = rgb.y;\r",
          "    float B = rgb.z;\r",
          "    // threshold\r",
          "    float T = 0.008856;\r",
          "\r",
          "    float X = R * 0.412453 + G * 0.357580 + B * 0.180423;\r",
          "    float Y = R * 0.212671 + G * 0.715160 + B * 0.072169;\r",
          "    float Z = R * 0.019334 + G * 0.119193 + B * 0.950227;\r",
          "\r",
          "    // Normalize for D65 white point\r",
          "    X = X / 0.950456;\r",
          "    Y = Y;\r",
          "    Z = Z / 1.088754;\r",
          "\r",
          "    bool XT, YT, ZT;\r",
          "    XT = false; YT=false; ZT=false;\r",
          "    if(X > T) XT = true;\r",
          "    if(Y > T) YT = true;\r",
          "    if(Z > T) ZT = true;\r",
          "\r",
          "    float Y3 = pow(abs(Y),1.0/3.0);\r",
          "    float fX, fY, fZ;\r",
          "    if(XT){ fX = pow(abs(X), 1.0/3.0);} else{ fX = 7.787 * X + 16.0/116.0; }\r",
          "    if(YT){ fY = Y3; } else{ fY = 7.787 * Y + 16.0/116.0 ; }\r",
          "    if(ZT){ fZ = pow(abs(Z),1.0/3.0); } else{ fZ = 7.787 * Z + 16.0/116.0; }\r",
          "\r",
          "    float L; if(YT){ L = (116.0 * Y3) - 16.0; }else { L = 903.3 * Y; }\r",
          "    float a = 500.0 * ( fX - fY );\r",
          "    float b = 200.0 * ( fY - fZ );\r",
          "\r",
          "    return float3(L,a,b);\r",
          "}\r",
          "\r",
          "float3 rgb2NormalizedLAB( float3 c ) {\r",
          "    float3 lab = RGB2Lab(c);\r",
          "    float3 ret;\r",
          "    ret.x = lab.x / 100.0;\r",
          "    ret.y = lab.y / 255.0;\r",
          "    ret.z = lab.z / 255.0;\r",
          "    if (ret.y < 0)\r",
          "        ret.y += 1;\r",
          "    if (ret.z < 0)\r",
          "        ret.z += 1;\r",
          "    return ret;\r",
          "}\r",
          "\r",
          "///////////////////////////////////////////////////////////////////////////\r",
          "// RGB -> NYUV conversion\r",
          "float3 rgbToNYUV(float3 c) {\r",
          "    float3 ret;\r",
          "    ret.x = (c.r + c.g + c.b) / 3;// 0-1\r",
          "    ret.y = (c.g - c.b) / 2;\r",
          "    if (ret.y < 0)\r",
          "        ret.y += 1;\r",
          "    ret.z = (c.r - c.b) / 2;\r",
          "    if (ret.z < 0)\r",
          "        ret.z += 1;\r",
          "    return ret;\r",
          "}\r",
          "\r",
          "\r",
          "///////////////////////////////////////////////////////////////////////////\r",
          "float GetLuma(float3 c){\r",
          "#if defined(COLORSPACE_NYUV)\r",
          "    return (c.r + c.g + c.b)/3.0;\r",
          "#endif\r",
          "    return 0.2989 * c.r + 0.5866 * c.g + 0.1145 * c.b;\r",
          "}\r",
          "\r",
          "float3 GetNativeColor(float3 inp) {\r",
          "#if defined(COLORSPACE_HSL)\r",
          "    return clamp(rgb2NormalizedHSL(inp),0,1);\r",
          "#elif defined(COLORSPACE_LAB)\r",
          "    return clamp(rgb2NormalizedLAB(inp),0,1);\r",
          "#elif defined(COLORSPACE_NYUV)\r",
          "    return clamp(rgbToNYUV(inp),0,1);\r",
          "#elif defined(COLORSPACE_JPEG)\r",
          "    return clamp(rgb2JPEG(inp),0,1);\r",
          "#endif\r",
          "    return inp;\r",
          "}\r",
          "\r",
          "\r",
          "///////////////////////////////////////////////////////////////////////////\r",
          "float4 PS_Square( float2 pos)\r",
          "{\r",
          "    // the upper-left pixel position of the character-sized cell.\r",
          "    // todo: set these as external params\r",
          "    float2 ScaledCharSize = CharSize * Scale;\r",
          "    float refW, refH;\r",
          "    RefImage.GetDimensions(refW, refH);\r",
          "    float fontImgW, fontImgH;\r",
          "    FontImage.GetDimensions(fontImgW, fontImgH);\r",
          "    uint fontCellsX = (uint)(fontImgW / CharSize.x);\r",
          "    float halfSegCenter = 0.25 / ValuesPerTile;\r",
          "    float lumaComponents = LuminanceTiles.x * LuminanceTiles.y;\r",
          "\r",
          "    uint2 srcCell = floor(pos / ScaledCharSize);\r",
          "    int2 srcCellOrigin = srcCell * ScaledCharSize;// pixel position of the cell upper left\r",
          "    int2 srcCellPos = pos - srcCellOrigin; // pixel position within this cell, 0-ScaledCharSize\r",
          "    float2 HalfTileSize = ScaledCharSize / 2.;\r",
          "    srcCellPos /= Scale;// now in coords that play well with the font texture\r",
          "    \r",
          "    float vals[VALUEELEMENTS];\r",
          "    float3 charRGB = float3(0,0,0);// accumulator\r",
          "    for (int ty = 0; ty < LuminanceTiles.y; ++ ty) {\r",
          "        for (int tx = 0; tx < LuminanceTiles.x; ++ tx) {\r",
          "            float2 tileIndex = float2(tx, ty);\r",
          "            float2 tilePos = (tileIndex / LuminanceTiles) * ScaledCharSize; // pixel position of the upper-left corner of this tile relative to the char cell\r",
          "            float3 srcColor = Image.Load(int3(srcCellOrigin + tilePos + HalfTileSize + .5, 0)).rgb; // sample the center-ish pix of this tile\r",
          "        \r",
          "            if (DitherAmount > 0.0) {\r",
          "                uint2 ditherCell = srcCell + tileIndex;\r",
          "                srcColor += GetBayerShift(ditherCell) / ValuesPerTile * DitherAmount;\r",
          "            }\r",
          "                \r",
          "            vals[tx + ty * LuminanceTiles.x] = clamp(GetLuma(srcColor), 0, 1);// verified with off-axis lines\r",
          "            charRGB += srcColor;\r",
          "        }\r",
          "    }\r",
          "    \r",
          "    if (ChromaElements >= 2.0) {\r",
          "        charRGB /= lumaComponents;\r",
          "        float3 charYUV = GetNativeColor(charRGB);\r",
          "        vals[lumaComponents] = charYUV.g;\r",
          "        vals[lumaComponents + 1] = charYUV.b;\r",
          "    }\r",
          "    \r",
          "    uint ID = 0;\r",
          "    for (int i = lumaComponents + ChromaElements - 1; i >= 0 ; -- i) {\r",
          "        float v = vals[i];\r",
          "        v -= halfSegCenter;\r",
          "        v = clamp(v, 0, 1);\r",
          "        v *= ValuesPerTile;\r",
          "        ID *= ValuesPerTile;\r",
          "        ID += (int)floor(v);\r",
          "    }\r",
          "    \r",
          "    int2 refCell = int2(ID % (uint)refW, ID / (uint)refW);\r",
          "    \r",
          "    float3 ref = RefImage.Load(int3(refCell, 0)).rgb * 255.0;\r",
          "    \r",
          "    // convert ref to linear index.\r",
          "    int fontID = ((int)ref.r) + ((int)ref.g * 256) + ((int)ref.b * 65536);\r",
          "    int2 fontCell = int2(fontID % fontCellsX, fontID / fontCellsX);\r",
          "\r",
          "    float3 fontColor = FontImage.Load(int3((fontCell * CharSize) + srcCellPos, 0)).rgb;\r",
          "    return float4(fontColor,1);\r",
          "}\r",
          "\r",
          "\r",
          "///////////////////////////////////////////////////////////////////////////\r",
          "// returns luma\r",
          "float FiveTileSample(float2 pt, inout float4 charRGB, float2 ScaledCharSize, float2 srcCellOrigin) {\r",
          "    uint2 px = srcCellOrigin + (ScaledCharSize * pt);\r",
          "    float3 srcColor = Image.Load(uint3(px, 0)).rgb;\r",
          "    \r",
          "    if (DitherAmount > 0.0) {\r",
          "        uint2 ditherCell = px / ScaledCharSize * 2;\r",
          "        srcColor += GetBayerShift(ditherCell) / ValuesPerTile * DitherAmount;\r",
          "    }\r",
          "    \r",
          "    charRGB.rgb += srcColor;\r",
          "    charRGB.w ++;\r",
          "    return clamp(GetLuma(srcColor), 0, 1);\r",
          "}\r",
          "\r",
          "float4 PS_FiveTile( float2 pos)\r",
          "{\r",
          "    float2 ScaledCharSize = CharSize * Scale;\r",
          "    float refW, refH;\r",
          "    RefImage.GetDimensions(refW, refH);\r",
          "    float fontImgW, fontImgH;\r",
          "    FontImage.GetDimensions(fontImgW, fontImgH);\r",
          "    uint fontCellsX = (uint)(fontImgW / CharSize.x);\r",
          "    float halfSegCenter = 0.25 / ValuesPerTile;\r",
          "    float lumaComponents = 5;\r",
          "\r",
          "    int2 srcCellOrigin = floor(pos / ScaledCharSize) * ScaledCharSize;// pixel position of the cell upper left\r",
          "    int2 srcCellPos = pos - srcCellOrigin; // pixel position within this cell, 0-ScaledCharSize\r",
          "    float2 HalfTileSize = ScaledCharSize / 2.;\r",
          "    srcCellPos /= Scale;// now in coords that play well with the font texture\r",
          "    \r",
          "    float vals[VALUEELEMENTS];\r",
          "    float4 charRGB = float4(0,0,0,0);// accumulator. w = count of accumulations\r",
          "    \r",
          "    if (FiveTileSampleAmt < 6.) {\r",
          "        // 5 samples. deviation from the C# code is that the Y is inverted. so bottom = top and vice versa.\r",
          "        // upper left\r",
          "        vals[2] = FiveTileSample(float2(.3, .9), charRGB, ScaledCharSize, srcCellOrigin);\r",
          "        // upper right\r",
          "        vals[3] = FiveTileSample(float2(.9, .7), charRGB, ScaledCharSize, srcCellOrigin);\r",
          "        // bottom left\r",
          "        vals[0] = FiveTileSample(float2(.1, .3), charRGB, ScaledCharSize, srcCellOrigin);\r",
          "        // bottom right\r",
          "        vals[1] = FiveTileSample(float2(.7, .1), charRGB, ScaledCharSize, srcCellOrigin);\r",
          "        // center\r",
          "        vals[4] = FiveTileSample(float2(.5, .5), charRGB, ScaledCharSize, srcCellOrigin);\r",
          "    } else {\r",
          "        // upper left\r",
          "        vals[2] = (FiveTileSample(float2(.1, .9), charRGB, ScaledCharSize, srcCellOrigin)\r",
          "            + FiveTileSample(float2(.5, .9), charRGB, ScaledCharSize, srcCellOrigin)) / 2.;\r",
          "        // upper right\r",
          "        vals[3] = (FiveTileSample(float2(.9, .9), charRGB, ScaledCharSize, srcCellOrigin)\r",
          "            + FiveTileSample(float2(.9, .5), charRGB, ScaledCharSize, srcCellOrigin)) / 2.;\r",
          "        // bottom left\r",
          "        vals[0] = (FiveTileSample(float2(.1, .5), charRGB, ScaledCharSize, srcCellOrigin)\r",
          "            + FiveTileSample(float2(.1, .1), charRGB, ScaledCharSize, srcCellOrigin)) / 2.;\r",
          "        // bottom right\r",
          "        vals[1] = (FiveTileSample(float2(.9, .1), charRGB, ScaledCharSize, srcCellOrigin)\r",
          "            + FiveTileSample(float2(.5, .1), charRGB, ScaledCharSize, srcCellOrigin)) / 2.;\r",
          "        // center\r",
          "        vals[4] = FiveTileSample(float2(.5, .5), charRGB, ScaledCharSize, srcCellOrigin);\r",
          "    }\r",
          "    \r",
          "    if (ChromaElements >= 2.0) {\r",
          "        charRGB.rgb /= charRGB.w;\r",
          "        float3 charYUV = GetNativeColor(charRGB.rgb);\r",
          "        vals[lumaComponents] = charYUV.g;\r",
          "        vals[lumaComponents + 1] = charYUV.b;\r",
          "    }\r",
          "    \r",
          "    uint ID = 0;\r",
          "    for (int i = lumaComponents + ChromaElements - 1; i >= 0 ; -- i) {\r",
          "        float v = vals[i];\r",
          "        v -= halfSegCenter;\r",
          "        v = clamp(v, 0, 1);\r",
          "        v *= ValuesPerTile;\r",
          "        ID *= ValuesPerTile;\r",
          "        ID += (int)floor(v);\r",
          "    }\r",
          "    \r",
          "    int2 refCell = int2(ID % (uint)refW, ID / (uint)refW);\r",
          "    \r",
          "    float3 ref = RefImage.Load(int3(refCell, 0)).rgb * 255.0;\r",
          "    \r",
          "    // convert ref to linear index.\r",
          "    int fontID = ((int)ref.r) + ((int)ref.g * 256) + ((int)ref.b * 65536);\r",
          "    int2 fontCell = int2(fontID % fontCellsX, fontID / fontCellsX);\r",
          "\r",
          "    float3 fontColor = FontImage.Load(int3((fontCell * CharSize) + srcCellPos, 0)).rgb;\r",
          "    return float4(fontColor,1);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "///////////////////////////////////////////////////////////////////////////\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "#if defined(PIXELFORMAT_SQUARE)\r",
          "        return PS_Square(input.pos.xy);\r",
          "#elif defined(PIXELFORMAT_FIVETILE)\r",
          "        return PS_FiveTile(input.pos.xy);\r",
          "#else\r",
          "        return float4(0, 0, 1, 1);\r",
          "#endif\r",
          "}\r\r\r\r",
          "//<<< PS\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "77bac9fe-1c11-4674-998d-78dbbece41ae",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Map",
      "MetaInstanceID": "997a2d9b-200a-434c-8ee5-768a2c110d9f",
      "DefaultValue": {
        "Type": "Dynamic",
        "Value": "Framefield.Core.Dynamic"
      },
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scale",
      "MetaInstanceID": "8866338e-1768-4a5a-8f59-3ada07223945",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "INTEGRAL.\r\n",
      "Min": "0.01",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DitherAmount",
      "MetaInstanceID": "e01bf723-4236-40c4-8e07-d9d05a906741",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "3",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FiveTileSampleAmt",
      "MetaInstanceID": "fd2051f4-8f76-42c3-b156-fc5c17687b38",
      "DefaultValue": {
        "Type": "Float",
        "Value": "5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "for the fivetile pixelformat, do we sample 5 pixels to map, or 9?\r\n",
      "Min": "5",
      "Max": "9",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Five",
          "Value": "5"
        },
        {
          "Name": "Nine",
          "Value": "9"
        }
      ]
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "2f876c33-86c0-4163-aac3-ecaa81e3b61e",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "40cdc4c9-2c1f-41e4-901e-e1494786f8bb",
      "MetaID": "3ba4f0c6-d58f-4b57-ad8f-fc8cb4a3c48f",
      "Name": "ASCIIFilterRefFunc",
      "Version": "721862f6-78d1-4dfa-a8f4-f63a0864f2a3",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        " ",
        "namespace Framefield.Core.ID3ba4f0c6_d58f_4b57_ad8f_fc8cb4a3c48f",
        "{",
        "    public class Class_ASCIIFilterRef : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Scale = 2,",
        "            Map = 3,",
        "            DitherAmount = 4,",
        "            FiveTileSampleAmt = 5",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override string GetCode(int idx) {",
        "            string code = base.GetCode(idx);",
        "            //return code;",
        "            if (string.IsNullOrEmpty(code)) {",
        "                Logger.Info(this,\"code empty\");",
        "                return code;",
        "            }",
        "            string openToken = \"//>>> __defines\";",
        "            string closeToken = \"//<<< __defines\";",
        "            var openSplit = code.Split(new string[] { openToken }, StringSplitOptions.None);",
        "            var closeSplit = code.Split(new string[] { closeToken }, StringSplitOptions.None);",
        "            if (openSplit.Length < 2) {",
        "                Logger.Info(this,\"code open defines not found.\");",
        "                return code;",
        "            }",
        "            if (closeSplit.Length < 2) {",
        "                Logger.Info(this,\"code close defines not found.\");",
        "                return code;",
        "            }",
        "            string beforeDefines = openSplit[0] + openToken + \"\\r\\n\";",
        "            string afterDefines = \"\\r\\n\" + closeToken + closeSplit[1];",
        "            ",
        "            string ret = beforeDefines + _defines + afterDefines;",
        "            Logger.Info(this,\"Returning modified code, with #defines: {0}\", _defines);",
        "            return ret;",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Image = inputs[(int)InputId.Image].Eval(context).Image; // Needs to be checked for null!",
        "            var Scale = inputs[(int)InputId.Scale].Eval(context).Value;",
        "            var Map = inputs[(int)InputId.Map].Eval(context).Dynamic;  // Needs to be checked for null!",
        "            var DitherAmount = inputs[(int)InputId.DitherAmount].Eval(context).Value;",
        "            var FiveTileSampleAmt = (int) inputs[(int)InputId.FiveTileSampleAmt].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            return PrepareAndEvalOnChange(context, () => {",
        "            ",
        "            ",
        "                int dimensions = (int)Map[\"ChromaElements\"] + ((int)Map[\"LuminanceTiles\"].X * (int)Map[\"LuminanceTiles\"].Y);",
        "                int valuesPerTile = (int)Map[\"ValuesPerTile\"];",
        "                int mapEntryCount = (int)Math.Round(Math.Pow(valuesPerTile, dimensions));",
        "",
        "",
        "                //Logger.Info(this,\"On change... hash code {0} vs. hash code {1}\", Map[\"HashCode\"], _lashHashCode);",
        "                //Logger.Info(this,\"CODE: {0}\", inputs[(int)InputId.Code].GetType());",
        "                var thisHashCode = Map[\"HashCode\"];",
        "                if (_lastHashCode != thisHashCode) {",
        "                    StringBuilder sb = new StringBuilder();",
        "                    sb.AppendLine(\"#define DIMENSIONS \" + dimensions.ToString());",
        "                    sb.AppendLine(\"#define VALUEELEMENTS \" + (dimensions + 2).ToString());",
        "                    int pixelFormat = Convert.ToInt32(Map[\"PixelFormat\"]);",
        "                    switch(pixelFormat) {",
        "                        case 0:",
        "                            sb.AppendLine(\"#define PIXELFORMAT_SQUARE\");",
        "                            break;",
        "                        case 1:",
        "                            sb.AppendLine(\"#define PIXELFORMAT_FIVETILE\");",
        "                            break;",
        "                        default:",
        "                            sb.AppendLine(\"#define PIXELFORMAT_UNKNOWN\");",
        "                            break;",
        "                    }",
        "                    int colorSpace = Convert.ToInt32(Map[\"ColorSpace\"]);",
        "                    switch(colorSpace) {",
        "                        case 0:",
        "                            sb.AppendLine(\"#define COLORSPACE_HSL\");",
        "                            break;",
        "                        case 1:",
        "                            sb.AppendLine(\"#define COLORSPACE_JPEG\");",
        "                            break;",
        "                        case 2:",
        "                            sb.AppendLine(\"#define COLORSPACE_LAB\");",
        "                            break;",
        "                        case 3:",
        "                            sb.AppendLine(\"#define COLORSPACE_NYUV\");",
        "                            break;",
        "                        default:",
        "                            sb.AppendLine(\"#define COLORSPACE_UNKNOWN\");",
        "                            break;",
        "                    }",
        "                    _defines = sb.ToString();",
        "                    Logger.Info(this, \"Setting defines to = {0}\", _defines);",
        "    ",
        "                    Compile(0);",
        "                    //return;",
        "                }",
        "                ",
        "                _lastHashCode = thisHashCode;",
        "                //_lastScale = Scale;",
        "            ",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "        ",
        "                //>>> _setup",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"Scale\").AsScalar().Set(Scale);",
        "                    _effect.GetVariableByName(\"DitherAmount\").AsScalar().Set(DitherAmount);",
        "                    _effect.GetVariableByName(\"FiveTileSampleAmt\").AsScalar().Set(FiveTileSampleAmt);",
        "                    //<<< _setup",
        "",
        "                    //Logger.Info(this, \"Hashcode = {0}\", Map[\"HashCode\"]);",
        "                    //Logger.Info(this, \"refimage w = {0}\", Map[\"FontImage\"].GetType());",
        "",
        "                    using (var RefImageView = new ShaderResourceView(context.D3DDevice, Map[\"RefImage\"]))",
        "                    using (var FontImageView = new ShaderResourceView(context.D3DDevice, Map[\"FontImage\"]))",
        "                    {",
        "                        //Logger.Debug(this,\"MapImageView is {0}\", MapImageView.GetType());",
        "                        _effect.GetVariableByName(\"RefImage\").AsShaderResource().SetResource(RefImageView);",
        "                        _effect.GetVariableByName(\"FontImage\").AsShaderResource().SetResource(FontImageView);",
        "                ",
        "                        _effect.GetVariableByName(\"CharSize\").AsVector().Set(Map[\"CharSize\"]);",
        "                        _effect.GetVariableByName(\"LuminanceTiles\").AsVector().Set(Map[\"LuminanceTiles\"]);",
        "                        _effect.GetVariableByName(\"ValuesPerTile\").AsScalar().Set(Map[\"ValuesPerTile\"]);",
        "                        _effect.GetVariableByName(\"ChromaElements\").AsScalar().Set(Map[\"ChromaElements\"]);",
        "                        _effect.GetVariableByName(\"PixelFormat\").AsScalar().Set(Map[\"PixelFormat\"]);",
        "                        _effect.GetVariableByName(\"ColorSpace\").AsScalar().Set(Map[\"ColorSpace\"]);",
        "                        ",
        "                        _effect.GetVariableByName(\"MapEntryCount\").AsScalar().Set(mapEntryCount);",
        "",
        "                        Render(context);",
        "                    }",
        "",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "        string _lastHashCode = \"\";",
        "        string _defines = \"\";",
        "        ",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "40cdc4c9-2c1f-41e4-901e-e1494786f8bb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2f876c33-86c0-4163-aac3-ecaa81e3b61e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "681c4b99-9f10-4308-8ab4-099d211c77f7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40cdc4c9-2c1f-41e4-901e-e1494786f8bb"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "77bac9fe-1c11-4674-998d-78dbbece41ae",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40cdc4c9-2c1f-41e4-901e-e1494786f8bb"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8866338e-1768-4a5a-8f59-3ada07223945",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40cdc4c9-2c1f-41e4-901e-e1494786f8bb"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "997a2d9b-200a-434c-8ee5-768a2c110d9f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40cdc4c9-2c1f-41e4-901e-e1494786f8bb"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e01bf723-4236-40c4-8e07-d9d05a906741",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40cdc4c9-2c1f-41e4-901e-e1494786f8bb"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "fd2051f4-8f76-42c3-b156-fc5c17687b38",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40cdc4c9-2c1f-41e4-901e-e1494786f8bb"
    }
  ]
}