{
  "Name": "SH_GradientNoise3D",
  "_id": "ad200a40-2e5c-4691-9e40-ea321752cc30",
  "Namespace": "user.tenfour.shaders",
  "Description": "https://www.shadertoy.com/view/Xsl3Dl\r\n\r\nanimated gradient noise.\r\ngood idea to set resolution before.\r\n",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "6cf13165-1d87-43d0-bc3d-28c0567c9ec4",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "float Scale;",
          "float2 Output;",
          "float3 Position;",
          "//<<< _parameters\r",
          "\r",
          "static const float PI = atan(1.)*4.;\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "\r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "SamplerState samLinearWrap\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_POINT;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "// https://www.shadertoy.com/view/Xsl3Dl\r",
          "\r",
          "#define vec3 float3\r",
          "#define fract frac\r",
          "#define mix lerp\r",
          "\r",
          "vec3 hash( vec3 p ) // replace this by something better\r",
          "{\r",
          "\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\r",
          "\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\r",
          "\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\r",
          "\r",
          "\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\r",
          "}\r",
          "\r",
          "float noise( in vec3 p )\r",
          "{\r",
          "    vec3 i = floor( p );\r",
          "    vec3 f = fract( p );\r",
          "\t\r",
          "\tvec3 u = f*f*(3.0-2.0*f);\r",
          "\r",
          "    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \r",
          "                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\r",
          "                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \r",
          "                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\r",
          "                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \r",
          "                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\r",
          "                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \r",
          "                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\r",
          "}\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float2 uv = input.texCoord;\r",
          "    float2 R = RenderTargetSize;\r",
          "    \r",
          "    uv *= Scale;\r",
          "    \r",
          "    float n = noise(float3(uv + Position.xy, Position.z));\r",
          "    n = lerp(Output.x, Output.y, n);\r",
          "    return float4(n,n,n,1);\r",
          "}\r",
          "\r",
          "//<<< PS\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scale",
      "MetaInstanceID": "e3ec67f4-fa67-4834-b7b0-912d923fee8d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Output.X",
      "MetaInstanceID": "b91e8561-9f40-4ae8-9ce3-fc364dae1643",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Output.Max",
      "MetaInstanceID": "6a58ebd2-c6fe-462b-814e-2a84c5ba4d62",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Position.X",
      "MetaInstanceID": "c50d4f19-1361-49ef-981b-cdeb5ec77026",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Position.Y",
      "MetaInstanceID": "896734de-cf74-4cf9-9a39-4fb7d09dec72",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Position.Z",
      "MetaInstanceID": "cfa7da01-4b5d-44fa-8911-2c3e2722a0e4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "8ac9e720-9ca1-44b0-94ec-9401b2f16eb0",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "841f688f-910e-4d6f-a5ec-b97b8cc86a16",
      "MetaID": "1b269cad-4a12-41e7-9b94-a78528b76573",
      "Name": "SH_GradientNoise3DFunc",
      "Version": "a8506d7d-4229-43b9-8974-1710fc8fbb32",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID1b269cad_4a12_41e7_9b94_a78528b76573",
        "{",
        "    public class Class_SH_GradientNoise3D : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scale = 1,",
        "            OutputX = 2,",
        "            OutputMax = 3,",
        "            PositionX = 4,",
        "            PositionY = 5,",
        "            PositionZ = 6",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Scale = inputs[(int)InputId.Scale].Eval(context).Value;",
        "            var OutputX = inputs[(int)InputId.OutputX].Eval(context).Value;",
        "            var OutputMax = inputs[(int)InputId.OutputMax].Eval(context).Value;",
        "            var Output = new Vector2(OutputX, OutputMax);",
        "            var PositionX = inputs[(int)InputId.PositionX].Eval(context).Value;",
        "            var PositionY = inputs[(int)InputId.PositionY].Eval(context).Value;",
        "            var PositionZ = inputs[(int)InputId.PositionZ].Eval(context).Value;",
        "            var Position = new Vector3(PositionX, PositionY, PositionZ);",
        "            //<<< _params",
        "            ",
        "            // no, this doesn't work. use SetResolution.",
        "           // if (ResolutionX > 0 && ResolutionY > 0) {",
        "           //     context.Viewport = new ViewportF( 0,0, ResolutionX, ResolutionY);",
        "           // }",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Scale\").AsScalar().Set(Scale);",
        "                    _effect.GetVariableByName(\"Output\").AsVector().Set(new Vector2(OutputX, OutputMax));",
        "                    _effect.GetVariableByName(\"Position\").AsVector().Set(new Vector3(PositionX, PositionY, PositionZ));",
        "                //<<< _setup",
        "",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "841f688f-910e-4d6f-a5ec-b97b8cc86a16",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8ac9e720-9ca1-44b0-94ec-9401b2f16eb0"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6cf13165-1d87-43d0-bc3d-28c0567c9ec4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "841f688f-910e-4d6f-a5ec-b97b8cc86a16"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e3ec67f4-fa67-4834-b7b0-912d923fee8d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "841f688f-910e-4d6f-a5ec-b97b8cc86a16"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b91e8561-9f40-4ae8-9ce3-fc364dae1643",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "841f688f-910e-4d6f-a5ec-b97b8cc86a16"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6a58ebd2-c6fe-462b-814e-2a84c5ba4d62",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "841f688f-910e-4d6f-a5ec-b97b8cc86a16"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c50d4f19-1361-49ef-981b-cdeb5ec77026",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "841f688f-910e-4d6f-a5ec-b97b8cc86a16"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "896734de-cf74-4cf9-9a39-4fb7d09dec72",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "841f688f-910e-4d6f-a5ec-b97b8cc86a16"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cfa7da01-4b5d-44fa-8911-2c3e2722a0e4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "841f688f-910e-4d6f-a5ec-b97b8cc86a16"
    }
  ]
}