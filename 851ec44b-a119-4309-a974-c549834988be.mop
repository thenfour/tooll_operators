{
  "Name": "SH_SyntheticWaves",
  "_id": "851ec44b-a119-4309-a974-c549834988be",
  "Namespace": "user.tenfour.shaders",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "2f24608c-f1d8-40ea-8160-a46021cab513",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "",
          "//<<< _parameters\r",
          "float iTime;\r",
          "static const float PI = atan(1.)*4.;\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "\r",
          "//----------------------------------------------------------------------------------------\r",
          "// 4 out, 2 in...\r",
          "float4 hash42(float2 p)\r",
          "{\r",
          "\tfloat4 p4 = frac(p.xyxy * float4(.1031, .1030, .0973, .1099));\r",
          "    p4 += dot(p4, p4.wzxy+33.33);\r",
          "    return frac((p4.xxyz+p4.yzzw)*p4.zywx);\r",
          "}\r",
          "\r",
          "\r",
          "// polynomial smooth min (k = 0.1);\r",
          "float smin( float a, float b, float k )\r",
          "{\r",
          "    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\r",
          "    return lerp( b, a, h ) - k*h*(1.0-h);\r",
          "}\r",
          "float smax(float a, float b, float k) {\r",
          "    return -smin(-a, -b, k);\r",
          "}\r",
          "\r",
          "float opSmoothSubtraction( float d1, float d2 ) { return smax(-d1,d2, .03); }\r",
          "\r",
          "\r",
          "float opUnion( float d1, float d2 ) { return min(d1,d2); }\r",
          "float opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\r",
          "float opIntersection( float d1, float d2 ) { return max(d1,d2); }\r",
          "float opXor(float lhs, float rhs) {\r",
          "    return opUnion(opIntersection(lhs, -(rhs)), opIntersection(rhs, -(lhs)));\r",
          "}\r",
          "\r",
          "// a + b*cos(cx+d)\r",
          "//\r",
          "// a = y offset\r",
          "// b = amplitude\r",
          "// c = period\r",
          "// d = phase\r",
          "float udCos(float2 uv, float a, float b, float c, float d) {\r",
          "    float y = a + b*cos((c*uv.x)+d);\r",
          "    return abs(uv.y - y);\r",
          "}\r",
          "float sdCos(float2 uv, float a, float b, float c, float d) {\r",
          "    float y = a + b*cos((c*uv.x)+d);\r",
          "    return (uv.y - y);\r",
          "}\r",
          "#define dtoa(d, amount) (1. / clamp((d)*(amount), 1., (amount)))\r",
          "\r",
          "\r",
          "float4 sdCircleThing(float2 _uv) {\r",
          "    float2 uvp = _uv;\r",
          "    uvp = frac(uvp);\r",
          "    uvp -= .5;\r",
          "    //uvp = sign(uvp) * pow(abs(uvp), 1.3);\r",
          "    float ret = length(uvp)-.5;\r",
          "    \r",
          "    float4 h = hash42(floor(_uv));\r",
          "    float t = iTime * h.w;\r",
          "    \r",
          "    float2 offset =  .1*float2(sin(t+_uv.x*4.88),cos(t+_uv.y*5));\r",
          "    ret = opSmoothSubtraction(length(uvp + offset)-.5, ret);\r",
          "    float m = .1;\r",
          "    ret += t * .5;\r",
          "    //ret = sin(ret*40)+.9;\r",
          "    return float4(h.rgb, ret);\r",
          "}\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o = float4(1,1,1,1);\r",
          "    float2 uv = input.texCoord.xy;\r",
          "    float2 R = RenderTargetSize.xy;\r",
          "    \r",
          "    float t = iTime * .2;\r",
          "    uv -= .5;\r",
          "    uv.x *= R.x / R.y;\r",
          "    uv *= 2;\r",
          "    \r",
          "    uv.x += t;\r",
          "    uv.y -= .5;\r",
          "    \r",
          "    uv.x += sin((uv.y+t)*4)*.04;\r",
          "    uv.x += sin((uv.y+t)*6.333)*.03;\r",
          "    \r",
          "    float4 sd = sdCircleThing(uv);\r",
          "    o.rgb *= dtoa(sd.w, float3(440,140,140));// * sd.rgb;\r",
          "    \r",
          "    return o;\r",
          "}\r",
          "\r",
          "",
          "//<<< PS\r",
          "\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "6d0ee527-5a12-4f83-a345-ee2f0f6a2ac0",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "116c953f-4123-4b2b-b2c0-e517fcf55f95",
      "MetaID": "7cc398bf-23e5-4392-a5b9-00869ae2632f",
      "Name": "SH_SyntheticWavesFunc",
      "Version": "ea87cd66-f39e-4fa7-ac47-f4042e014323",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID7cc398bf_23e5_4392_a5b9_00869ae2632f",
        "{",
        "    public class Class_SH_SyntheticWaves : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            //<<< _params",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                //<<< _setup",
        "",
        "                _effect.GetVariableByName(\"iTime\").AsScalar().Set(context.Time);",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "116c953f-4123-4b2b-b2c0-e517fcf55f95",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6d0ee527-5a12-4f83-a345-ee2f0f6a2ac0"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2f24608c-f1d8-40ea-8160-a46021cab513",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "116c953f-4123-4b2b-b2c0-e517fcf55f95"
    }
  ]
}