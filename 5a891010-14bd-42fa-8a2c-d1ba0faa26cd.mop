{
  "Name": "SelectFromImages",
  "_id": "5a891010-14bd-42fa-8a2c-d1ba0faa26cd",
  "Namespace": "lib.image.load",
  "Description": "Selects one of the incoming image. \r\nIf the selecting value is not a precise image, 2 nearest image are blended. Can be used for transition between images of a slide-show.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "961190f1-ca09-4453-b3e6-e445db751f81",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "Texture2D Image1;\r",
          "Texture2D Image2;\r",
          "float BlendValue;\r",
          " \r",
          "//>>> setup\r",
          "SamplerState samNearest\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Clamp;\r",
          "    AddressV = Clamp;\r",
          "};\r",
          "//<<< setup\r",
          "\r",
          "//>>> declarations\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float2 texCoord : TEXCOORD;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float2 texCoord: TEXCOORD0;\t    \r",
          "    float3 worldTViewPos: TEXCOORD1;\r",
          "    float3 worldTViewDir: TEXCOORD2;\r",
          "};\r",
          "//<<< declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 t0 = Image1.Sample(samNearest, input.texCoord); \r",
          "    float4 t1 = Image2.Sample(samNearest, input.texCoord);    \r",
          "    \r",
          "    //t1.a *= BlendValue;\r",
          "    t1.a *= BlendValue;\r",
          "\r",
          "    float a = t0.a + t1.a - t0.a*t1.a;\r",
          "    float3 rgb = (1.0 - t1.a)*t0.rgb + t1.a*t1.rgb;   \r",
          "    \r",
          "    return float4(rgb, a);\r",
          "\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Images",
      "MetaInstanceID": "f49cb70f-a8fa-4c99-9575-2849fa8df3cc",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "True",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Selector",
      "MetaInstanceID": "7a5c1484-a9f5-45b2-9f50-a9a8133e9274",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "df0a7369-bb96-47ca-93d9-23172452bf88",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "60d671ad-c629-4ece-a994-3648fd4e3d2c",
      "MetaID": "66b6628e-5d16-44f7-85c5-4ebbd3763b8a",
      "Name": "SelectFromImagesFunc",
      "Version": "f2d231ea-613b-485e-94a1-d51289d2aa6f",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID66b6628e_5d16_44f7_85c5_4ebbd3763b8a",
        "{",
        "    public class Class_SelectFromImages : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Images = 1,",
        "            Selector = 2",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            // params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Images = inputs[(int)InputId.Images];",
        "            var Selector = inputs[(int)InputId.Selector].Eval(context).Value;",
        "            // params",
        "",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "                ",
        "                if (Images.Connections.Count == 0)",
        "                    return;                                    ",
        "",
        "                int index1= (int)(Selector % Images.Connections.Count);",
        "                int index2= index1;",
        "                float blendValue = Selector % 1;",
        "                if( blendValue > 0) {",
        "                    index2 ++;",
        "                }           ",
        "                ",
        "                var image1Input = Images.Connections[index1 % Images.Connections.Count];",
        "                Texture2D image1 = image1Input.Eval(context).Image;",
        "                Texture2D image2;",
        "                ",
        "                if( blendValue == 0) {",
        "                    image2= image1;",
        "                }",
        "                else {",
        "                    var image2Input = Images.Connections[index2 % Images.Connections.Count];",
        "                    image2 = image2Input.Eval(context).Image;                                               ",
        "                }",
        "               // Logger.Info(this,\"{0}   {1}\", image1, image2);",
        "",
        "                // setup",
        "                using (var image1View = new ShaderResourceView(context.D3DDevice, image1))",
        "                using (var image2View = new ShaderResourceView(context.D3DDevice, image2))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image1\").AsShaderResource().SetResource(image1View);",
        "                    _effect.GetVariableByName(\"Image2\").AsShaderResource().SetResource(image2View);",
        "                    _effect.GetVariableByName(\"BlendValue\").AsScalar().Set(blendValue);",
        "                // setup",
        "",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "60d671ad-c629-4ece-a994-3648fd4e3d2c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "df0a7369-bb96-47ca-93d9-23172452bf88"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "961190f1-ca09-4453-b3e6-e445db751f81",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "60d671ad-c629-4ece-a994-3648fd4e3d2c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f49cb70f-a8fa-4c99-9575-2849fa8df3cc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "60d671ad-c629-4ece-a994-3648fd4e3d2c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7a5c1484-a9f5-45b2-9f50-a9a8133e9274",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "60d671ad-c629-4ece-a994-3648fd4e3d2c"
    }
  ]
}