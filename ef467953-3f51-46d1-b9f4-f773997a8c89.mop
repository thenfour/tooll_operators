{
  "Name": "SH_CyberPartitions",
  "_id": "ef467953-3f51-46d1-b9f4-f773997a8c89",
  "Namespace": "user.tenfour.shaders",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "bb82b241-d68d-4417-a911-b3d799ba5ff4",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "",
          "//<<< _parameters\r",
          "\r",
          "const float iBPM;\r",
          "const float iProgram;\r",
          "const float iTime;\r",
          "const float iBeat;\r",
          "static const float PI = atan(1.)*4.;\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "#define iResolution RenderTargetSize\r",
          "#define vec2 float2\r",
          "#define vec3 float3\r",
          "#define vec4 float4\r",
          "#define mat2 float2x2\r",
          "#define fract frac\r",
          "#define mod fmod\r",
          "#define mix lerp\r",
          "#define vec20 (float2(0,0))\r",
          "#define vec30 (float3(0,0,0))\r",
          "#define vec40 (float4(0,0,0,0))\r",
          "#define vec21 (float2(1,1))\r",
          "#define vec31 (float3(1,1,1))\r",
          "#define vec41 (float4(1,1,1,1))\r",
          "#define vec2x(x) (float2((x),(x)))\r",
          "#define vec3x(x) (float3((x),(x),(x)))\r",
          "#define vec4x(x) (float4((x),(x),(x),(x)))\r",
          "\r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "static const float PARTITIONS = 13.;\r",
          "static const float SHADETHRESH = .98;\r",
          "\r",
          "vec3 dtoa(float d, vec3 amount){\r",
          "    return vec3(1. / clamp(d*amount, vec3x(1), amount));\r",
          "}\r",
          "\r",
          "vec4 hash42(vec2 p)\r",
          "{\r",
          "\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\r",
          "    p4 += dot(p4, p4.wzxy+33.33);\r",
          "    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\r",
          "\r",
          "}\r",
          "\r",
          "#define q(x,p) (floor((x)/(p))*(p))\r",
          "\r",
          "void mainImage( out vec4 o, in vec2 fragCoord )\r",
          "{\r",
          "    vec2 uv = fragCoord/iResolution.xy-.5;\r",
          "    vec2 R = iResolution.xy;\r",
          "    uv.x *= R.x / R.y;\r",
          "    uv *= 2.;\r",
          "\r",
          "    vec2 cellUL = vec2x(-.5);\r",
          "    vec2 cellBR = vec2x(.5);\r",
          "    float seed = 1e3;\r",
          "    o = vec4x(0);\r",
          "    \r",
          "    float t = iTime + pow(1.-iBeat,.5)*.5;\r",
          "    \r",
          "    for(float i = 0.; i < PARTITIONS; ++ i) {\r",
          "        vec4 h = hash42(1e3*cellUL+seed); // xy = pos to divide BETWEEN cellUL / cellBR.\r",
          "        vec4 h2 = hash42(1e2*cellUL+seed);\r",
          "        h.xy = mix(cellUL, cellBR, h.xy);\r",
          "        seed = h2.z+i;\r",
          "        //vec2 uv2 = uv + q(sin(iTime*(h.z-.5)+(h.w*6.28))*.5, .09);\r",
          "        vec2 uv2 = uv + sin(t*(h.z-.5)+(h.w*6.28))*.5;\r",
          "        uv2.x += uv2.y * (h2.x-.5);\r",
          "        uv2.y += uv2.x * (h2.y-.5);\r",
          "        float dl = min(length(uv2.x - h.x), length(uv2.y - h.y));\r",
          "        o.rgb = max(o.rgb, hash42(h2.xz*1e3).rgb * (dtoa(dl, vec3(700,500,30))));\r",
          "        if (h2.x > SHADETHRESH) {\r",
          "            o.rgb = hash42(h2.yw*1e4).rgb;// *(dl+.4);\r",
          "        }\r",
          "        \r",
          "        // descend into one of the quads. gotta be a more sensible way to do that.\r",
          "        if (uv2.x < h.x) {\r",
          "            if (uv2.y < h.y) {\r",
          "                cellBR = h.xy;\r",
          "            } else {\r",
          "              \tcellUL.y = h.y;\r",
          "              \tcellBR.x = h.x;\r",
          "            }\r",
          "        } else {\r",
          "            if (uv2.y > h.y) {\r",
          "                cellUL = h.xy;\r",
          "            } else {\r",
          "                cellUL.x = h.x;\r",
          "                cellBR.y = h.y;\r",
          "            }\r",
          "\t    }\r",
          "    }\r",
          "    \r",
          "    //vec2 N = fragCoord / iResolution.xy-.5;\r",
          "    //o = clamp(o,0.,1.);\r",
          "    //o.a = 1.;\r",
          "}\r",
          "\r",
          "",
          "//<<< PS\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o;\r",
          "    mainImage(o, input.pos.xy);\r",
          "    o.a = 1.0;\r",
          "    return o;\r",
          "}\r",
          "\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "4f9fff77-e8fc-4d0e-be1c-d3a9a1cd59af",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "2b849278-df47-406d-b47c-eb27ae53c1ea",
      "MetaID": "3c2d518a-7dcc-4c20-ab40-e9aa68169892",
      "Name": "SH_CyberPartitionsFunc",
      "Version": "a988a270-b7ff-40ed-8f30-3b7e626056dc",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID3c2d518a_7dcc_4c20_ab40_e9aa68169892",
        "{",
        "    public class Class_SH_CyberPartitions : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            //<<< _params",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                //<<< _setup",
        "",
        "                if (context.Objects.ContainsKey(\"SKPlayerState\")) {",
        "                  var skstate = (SlashKickPerformer.SKPlayerState)context.Objects[\"SKPlayerState\"];",
        "                    _effect.GetVariableByName(\"iBPM\").AsScalar().Set((float)skstate.BPM);",
        "                    _effect.GetVariableByName(\"iProgram\").AsScalar().Set(skstate.ProgramIndex);",
        "                    _effect.GetVariableByName(\"iBeat\").AsScalar().Set((float)skstate.Beatfrac);",
        "                }",
        "",
        "                _effect.GetVariableByName(\"iTime\").AsScalar().Set(context.Time);",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2b849278-df47-406d-b47c-eb27ae53c1ea",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4f9fff77-e8fc-4d0e-be1c-d3a9a1cd59af"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bb82b241-d68d-4417-a911-b3d799ba5ff4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2b849278-df47-406d-b47c-eb27ae53c1ea"
    }
  ]
}