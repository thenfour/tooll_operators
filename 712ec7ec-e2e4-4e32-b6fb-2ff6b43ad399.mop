{
  "Name": "SH_BackyardStars",
  "_id": "712ec7ec-e2e4-4e32-b6fb-2ff6b43ad399",
  "Namespace": "user.tenfour.shaders",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "5186aeb1-aa9b-424c-b949-ee175f45f034",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "",
          "//<<< _parameters\r",
          "\r",
          "const float iBPM;\r",
          "const float iProgram;\r",
          "const float iTime;\r",
          "const float iBeat;\r",
          "static const float PI = atan(1.)*4.;\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "#define iResolution RenderTargetSize\r",
          "#define vec2 float2\r",
          "#define vec3 float3\r",
          "#define vec4 float4\r",
          "#define mat2 float2x2\r",
          "#define fract frac\r",
          "#define mod fmod\r",
          "#define mix lerp\r",
          "#define vec20 (float2(0,0))\r",
          "#define vec30 (float3(0,0,0))\r",
          "#define vec40 (float4(0,0,0,0))\r",
          "#define vec21 (float2(1,1))\r",
          "#define vec31 (float3(1,1,1))\r",
          "#define vec41 (float4(1,1,1,1))\r",
          "#define vec2x(x) (float2((x),(x)))\r",
          "#define vec3x(x) (float3((x),(x),(x)))\r",
          "#define vec4x(x) (float4((x),(x),(x),(x)))\r",
          "\r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "static const float maxIter = 40.;\r",
          "static const float fallSpeed = .7;\r",
          "static const float fallDuration = 3.;\r",
          "static const float spinSpeed = 2.;\r",
          "static const float stickiness = 0.9;// pushes exp curve back\r",
          "static const float maxRepDist = 1.;\r",
          "static const float minRepDist = .6;\r",
          "static const float sharpness = 800.;\r",
          "\r",
          "float rand(vec2 co)\r",
          "{\r",
          "    float a = 12.9898;\r",
          "    float b = 78.233;\r",
          "    float c = 43758.5453;\r",
          "    float dt= dot(co.xy ,vec2(a,b));\r",
          "    float sn= mod(dt,3.14);\r",
          "    return fract(sin(sn) * c);\r",
          "}\r",
          "float nsin(float t) {return sin(t)*.5+.5; }\r",
          "\r",
          "vec2 hash2( vec2 p )\r",
          "{\r",
          "    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\r",
          "}\r",
          "float triWave(float x) {\r",
          "    float ret = mod(x, PI2)/PI-1.;// -1 to 1\r",
          "    ret = abs(ret);// 0-1\r",
          "    ret -= .5;\r",
          "    ret *= 2.;    \r",
          "    return ret;\r",
          "}\r",
          "\r",
          "float dstar(vec2 uv, float p, float ir, float or, float phase, vec2 id) {\r",
          "    float a = frac(atan2(uv.x,uv.y)/PI2)+phase;\r",
          "    float r = triWave(a*p*PI2)*.5+.5;// 0-1\r",
          "    //r = pow(r, nsin(iTime)*4.+.5);\r",
          "    r = pow(r, rand(id)*4.+.5);\r",
          "    r *= or-ir;\r",
          "    r += ir;\r",
          "    return length(uv)-r;\r",
          "}\r",
          "\r",
          "float dtoa(float d, float amount){\r",
          "    return 1. / clamp(d*amount, 1., amount);\r",
          "}\r",
          "\r",
          "\r",
          "void mainImage(out vec4 o, vec2 O)\r",
          "{\r",
          "    //O.y = 1.-O.y;\r",
          "    float t = iTime+1e3;\r",
          "    vec2 R = iResolution.xy,\r",
          "        V=(O-.5*R)/R.y\r",
          "        ,N=O/R-.5// normalized coords (0-1)\r",
          "        ,P=O-R*.5// screen space coords, centered\r",
          "        ;\r",
          "    V.y = -V.y;\r",
          "    V *= .7;\r",
          "    \r",
          "    \r",
          "    t *= .1;\r",
          "    //V += iMouse.xy/iResolution.xy;\r",
          "    float sgn = 1.;\r",
          "    \r",
          "    o = vec40;\r",
          "    vec2 moon = vec2(0,.3);\r",
          "    float ma = dtoa(length(V-moon)-.1, 100.);\r",
          "    float ma2 = dtoa(length(V-moon)-.1, 20.);\r",
          "    for (float i = 0.; i <maxIter; ++ i) {\r",
          "    \tV.x += sgn * t;\r",
          "       \tsgn = -sgn;\r",
          "        vec2 cent = vec2(-.5+rand(vec2(i, i+1.)), -.5+rand(vec2(i+2., i+3.)));// find a center; \r",
          "        vec2 off = cent;\r",
          "        off *= 2.;// spread\r",
          "        \r",
          "        off.y -= exp(mod(t*fallSpeed + i*fallDuration/maxIter, fallDuration)-stickiness)-1.;// make them fall. -2 to hover longer near 0.\r",
          "\r",
          "        float phase = rand(cent)-.5;\r",
          "        phase *= spinSpeed;\r",
          "\r",
          "        vec2 rep = hash2(cent)*(maxRepDist-minRepDist)+minRepDist;// ID\r",
          "        vec2 repUV = mod(V-off, rep)-rep*.5;\r",
          "        float d = dstar(repUV, 5., rep.x*.04, 0.008, t*phase*5., rep);\r",
          "        vec4 thisColor;\r",
          "        thisColor.rg = vec2x(dtoa(d, sharpness*(i/maxIter))*(i/maxIter));// darken layers\r",
          "        thisColor.b = d*.4;\r",
          "        thisColor.rg *= rep*rep*rep*rep;\r",
          "        \r",
          "        thisColor *= (ma2*2.)+.2;\r",
          "        o = max(o, thisColor);// mix\r",
          "    }\r",
          "    o += ma;\r",
          "    \r",
          "    // post\r",
          "    o *= .8;\r",
          "    o = clamp(o,0.,1.);\r",
          "    o = pow(o,vec4x(.5));\r",
          "    o += (fract(sin(dot(R+t,N))*1e5)-.5)*.01;\r",
          "    o *=1.4-dot(N,N);\r",
          "    o *= 1.-step(.42,abs(N.y));\r",
          "    o = clamp(o,0.,1.);\r",
          "    o.a = 1.;\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "",
          "//<<< PS\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o;\r",
          "    mainImage(o, input.pos.xy);\r",
          "    o.a = 1.0;\r",
          "    return o;\r",
          "}\r",
          "\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "cb2ebd79-23fb-45ca-b9a0-502d9f1b077c",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "e993f025-d742-4e56-8283-712db651c418",
      "MetaID": "17447f54-a734-4264-a03d-fd2447d89063",
      "Name": "SH_BackyardStarsFunc",
      "Version": "98444536-5fbf-4044-9b6f-768dc4df8b3c",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID17447f54_a734_4264_a03d_fd2447d89063",
        "{",
        "    public class Class_SH_BackyardStars : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            //<<< _params",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                //<<< _setup",
        "",
        "                if (context.Objects.ContainsKey(\"SKPlayerState\")) {",
        "                  var skstate = (SlashKickPerformer.SKPlayerState)context.Objects[\"SKPlayerState\"];",
        "                    _effect.GetVariableByName(\"iBPM\").AsScalar().Set((float)skstate.BPM);",
        "                    _effect.GetVariableByName(\"iProgram\").AsScalar().Set(skstate.ProgramIndex);",
        "                    _effect.GetVariableByName(\"iBeat\").AsScalar().Set((float)skstate.Beatfrac);",
        "                }",
        "",
        "                _effect.GetVariableByName(\"iTime\").AsScalar().Set(context.Time);",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e993f025-d742-4e56-8283-712db651c418",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "cb2ebd79-23fb-45ca-b9a0-502d9f1b077c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5186aeb1-aa9b-424c-b949-ee175f45f034",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e993f025-d742-4e56-8283-712db651c418"
    }
  ]
}