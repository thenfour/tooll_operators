{
  "Name": "TransitionCurve",
  "_id": "e29f442c-bac6-46b1-a7d2-3af025f68185",
  "Namespace": "user.tenfour",
  "Description": "Maps values transitioning around the transition point to 0-1 with a curve.\r\nThe idea is to shape a transition over time, where 0 is the transition point.\r\n\r\nfor MODE=Transition, negative values become 0 and positive become 1.\r\nOnly one shape is used for the curve.\r\n\r\nfor MODE=Pulse, both shapes are used. at x=0, output is 1. otherwise we stay around 0.\r\n\r\n",
  "Inputs": [
    {
      "Name": "Input",
      "MetaInstanceID": "036e61f6-4017-42f8-92ab-8f54b86faa03",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TransitionPoint",
      "MetaInstanceID": "7d7c3290-3096-4bdc-ad39-f3b159c7dbca",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "OutputRange.Min",
      "MetaInstanceID": "caedc549-8977-4b45-ae0d-5e7572bf7e8a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "OutputRange.Max",
      "MetaInstanceID": "ea204bcd-36ae-48e7-8296-093cc72bca73",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Shape.In",
      "MetaInstanceID": "d71872c3-33fd-4344-8a2d-c4990e5ac8a9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-0.95",
      "Max": "0.95",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Shape.Out",
      "MetaInstanceID": "1af0879e-840a-4129-baf9-2d128305083f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-0.95",
      "Max": "0.95",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Anticipation.Range",
      "MetaInstanceID": "bdc30c30-6bf8-4482-9338-241d5dce85d7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.3"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Release.Range",
      "MetaInstanceID": "94d0b85b-bd74-4a49-ab36-c0c36270d7c3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "0-1 area where release is applied\r\n",
      "Min": "0",
      "Max": "100",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Mode",
      "MetaInstanceID": "8e9e3dcb-05c6-48b0-be15-87396cf9078c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Pulse",
          "Value": "0"
        },
        {
          "Name": "Transition",
          "Value": "1"
        }
      ]
    }
  ],
  "Outputs": [
    {
      "Name": "Output",
      "MetaInstanceID": "9aef8e9d-f1bc-4508-88a6-98b28cb1c622",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "52b4b7e1-f329-40aa-96b7-bd99035b9aab",
      "MetaID": "300fa28d-839c-42e6-8a74-3037c0fe3125",
      "Name": "TransitionCurveFunc",
      "Version": "c6aa5cf6-d225-471a-ac1b-0cd2616b18dd",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "",
        "namespace Framefield.Core.ID300fa28d_839c_42e6_8a74_3037c0fe3125",
        "{",
        "    public class Class_TransitionCurve : OperatorPart.Function, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            ShapeIn = 0,",
        "            AnticipationRange = 1,",
        "            ReleaseRange = 2,",
        "            Input = 3,",
        "            OutputRangeMin = 4,",
        "            OutputRangeMax = 5,",
        "            Mode = 6,",
        "            ShapeOut = 7,",
        "            TransitionPoint = 8",
        "        }",
        "        //<<< _inputids",
        "        ",
        "        ",
        "        // https://www.desmos.com/calculator/yosrvxwfz1",
        "        // r == 0 : effectively horizontal line",
        "        // r == 1 : linear",
        "        // r == inf : instant transition",
        "        public static double SmoothStepVariable(double x, double r)",
        "        {",
        "            //double y = r * (x-.5) + .5;",
        "            double gx = Math.Pow(2 * (.5 - Math.Abs(x - .5)), r) / 2.0;",
        "            double hx = Math.Floor(x + .5);",
        "            double y = (1.0 - hx) * gx + hx * (1.0 - gx);",
        "            return y;",
        "        }",
        "        ",
        "        // here's an actual 2-stage variable smoothstep that seems to serve us better.",
        "        // https://www.desmos.com/calculator/3zhzwbfrxd",
        "        // most of the time we would want s {0,1}. s can also be {-1,0} but it's not a useful shape i think.",
        "        // s is slope.",
        "        public static double SmoothStepVariable(double _x, double _p, double _s)",
        "        {",
        "            double c = (2 / (1.0 - _s)) - 1;",
        "            if (_x <= _p) {",
        "                return f(c, _x, _p);",
        "            }",
        "            return 1.0 - f(c, 1.0 - _x, 1.0 - _p);",
        "        }",
        "        static Func<double, double, double, double> f = (c, x, n) => Math.Pow(x, c) / Math.Pow(n, c - 1);",
        "        static Func<double, double, double, double> g = (c, x, n) => c * Math.Pow(x, c - 1);",
        "        public static double SmoothStepVariablePulse(double _x, double _p, double _s1, double _s2)",
        "        {",
        "            double c;",
        "            if (_x <= _p) {",
        "                c = (2 / (1.0 - _s1)) - 1;",
        "                return f(c, _x, _p) / _p;",
        "            }",
        "            // for release.",
        "            c = (2 / (1.0 - _s2)) - 1;",
        "            return f(c, 1.0 - _x, 1.0 - _p) / (1.0 - _p);",
        "        }",
        "",
        "        public static double Lerp(double a, double b, double t)",
        "        {",
        "            return a*(1.0 - t) + b*t;",
        "        }",
        "        ",
        "        //public static double SmoothStepVariable(double x, double q) {",
        "        //    return Math.Pow(x, q);",
        "        //}",
        "        ",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) ",
        "        {",
        "            //>>> _params",
        "            var ShapeIn = inputs[(int)InputId.ShapeIn].Eval(context).Value;",
        "            var ShapeOut = inputs[(int)InputId.ShapeOut].Eval(context).Value;",
        "            var Shape = new Vector2(ShapeIn, ShapeOut);",
        "            var AnticipationRange = inputs[(int)InputId.AnticipationRange].Eval(context).Value;",
        "            var ReleaseRange = inputs[(int)InputId.ReleaseRange].Eval(context).Value;",
        "            var Input = inputs[(int)InputId.Input].Eval(context).Value;",
        "            var OutputRangeMin = inputs[(int)InputId.OutputRangeMin].Eval(context).Value;",
        "            var OutputRangeMax = inputs[(int)InputId.OutputRangeMax].Eval(context).Value;",
        "            var OutputRange = new Vector2(OutputRangeMin, OutputRangeMax);",
        "            var Mode = (int) inputs[(int)InputId.Mode].Eval(context).Value;",
        "            var TransitionPoint = inputs[(int)InputId.TransitionPoint].Eval(context).Value;",
        "            //<<< _params",
        "            // mode == 0 // pulse",
        "            // mode == 1 // transition",
        "            ",
        "            // using the 2-stage smoothstepvariable",
        "            // map Input from [-AnticipationRange,ReleaseRange] => [0,1] linear",
        "            Input -= TransitionPoint;",
        "            double x = Input;",
        "            double y = 0;",
        "            if ((AnticipationRange + ReleaseRange) == 0) {",
        "                // avoid div0; deal with instant transitions.",
        "                x = Math.Sign(x);",
        "            } else {",
        "                x = Input + AnticipationRange;",
        "                x /= AnticipationRange + ReleaseRange;",
        "            }",
        "            ",
        "            if (x <= 0) y = 0;",
        "            else if (x >= 1) y = (Mode == 0) ? 0 : 1;",
        "            else {",
        "                // within curve range",
        "                double p = AnticipationRange / (AnticipationRange + ReleaseRange);",
        "                //double s = Lerp(AnticipationShape, ReleaseShape, x);",
        "                if (Mode == 0)",
        "                    y = SmoothStepVariablePulse(x, p, ShapeIn, ShapeOut);",
        "                else",
        "                    y = SmoothStepVariable(x, p, ShapeIn);",
        "            }",
        "            context.Value =(float)Lerp(OutputRangeMin, OutputRangeMax, y);",
        "",
        "            // this method splits into separate attack & release stages. not good really because of so much ",
        "            /*double y;",
        "            if (Input < 0) {",
        "                if (AnticipationRange > 0) {",
        "                    y = Input + AnticipationRange;// now between 0 and anticipationRange",
        "                    y /= AnticipationRange;// now between 0 and 1",
        "                    y = Utilities.Clamp(y, 0, 1);",
        "                    y = SmoothStepVariable(y, AnticipationShape);//",
        "                    if (Mode == 1)// transition",
        "                        y *= 0.5;",
        "                } else {",
        "                    y = 0;",
        "                }",
        "            } else {",
        "                if (ReleaseRange > 0) {",
        "                    y = Input;",
        "                    y /= ReleaseRange;",
        "                    y = Utilities.Clamp(y, 0, 1);",
        "                    y = SmoothStepVariable(1.0 - y, ReleaseShape);",
        "                    if (Mode == 1)// transition",
        "                        y = (1.0-y) * .5 + .5;",
        "                }",
        "                else {",
        "                    y = 1;",
        "                }",
        "            }",
        "            context.Value =(float)Lerp(OutputRangeMin, OutputRangeMax, y);",
        "*/",
        "",
        "/*",
        "    // a single-stage that i don't like because it doesn't handle massive differences between attack & release well.",
        "    // i think though it actually illustrates why these differences are stupid and i should be using a single shape.",
        "            double x;",
        "",
        "            // map Input from [-AnticipationRange,ReleaseRange] => [0,1] linear",
        "            if ((AnticipationRange + ReleaseRange) == 0) {",
        "                // avoid div0; deal with instant transitions.",
        "                x = (Input < ReleaseRange) ? 0 : 1;",
        "            } else {",
        "                x = Input + AnticipationRange;",
        "                x /= AnticipationRange + ReleaseRange;",
        "                x = Utilities.Clamp(x, 0, 1);",
        "            }",
        "            ",
        "            // shape the curve",
        "            double shape = x < .5 ? AnticipationShape : ReleaseShape;",
        "            if (Mode == 0)// pulse",
        "            {",
        "                if (x > .5) {",
        "                    x = 1.0 - x;",
        "                } else {",
        "                    x *= 2;",
        "                }",
        "            }",
        "            double y = SmoothStepVariable(x, shape);",
        "            //double rel = 1.0 - SmoothStepVariable(1.0-x, ReleaseShape); ",
        "            //double y = Lerp(ant, rel, x);",
        "            ",
        "            context.Value =(float)Lerp(OutputRangeMin, OutputRangeMax, y);",
        "            */",
        "            return context;",
        "            ",
        "        }",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "52b4b7e1-f329-40aa-96b7-bd99035b9aab",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9aef8e9d-f1bc-4508-88a6-98b28cb1c622"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d71872c3-33fd-4344-8a2d-c4990e5ac8a9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "52b4b7e1-f329-40aa-96b7-bd99035b9aab"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bdc30c30-6bf8-4482-9338-241d5dce85d7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "52b4b7e1-f329-40aa-96b7-bd99035b9aab"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "94d0b85b-bd74-4a49-ab36-c0c36270d7c3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "52b4b7e1-f329-40aa-96b7-bd99035b9aab"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "036e61f6-4017-42f8-92ab-8f54b86faa03",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "52b4b7e1-f329-40aa-96b7-bd99035b9aab"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "caedc549-8977-4b45-ae0d-5e7572bf7e8a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "52b4b7e1-f329-40aa-96b7-bd99035b9aab"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ea204bcd-36ae-48e7-8296-093cc72bca73",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "52b4b7e1-f329-40aa-96b7-bd99035b9aab"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8e9e3dcb-05c6-48b0-be15-87396cf9078c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "52b4b7e1-f329-40aa-96b7-bd99035b9aab"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1af0879e-840a-4129-baf9-2d128305083f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "52b4b7e1-f329-40aa-96b7-bd99035b9aab"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7d7c3290-3096-4bdc-ad39-f3b159c7dbca",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "52b4b7e1-f329-40aa-96b7-bd99035b9aab"
    }
  ]
}