{
  "Name": "ASCIIFilterRef4",
  "_id": "67cc0100-22e4-4c35-8271-56943a75c4eb",
  "Namespace": "user.tenfour",
  "Description": "19 Dec 2019",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "d0ffc38a-41df-4d20-a202-b25a00df9998",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "\r",
          "\r",
          "//>>> __defines\r",
          "#define DIMENSIONS 5\r",
          "#define VALUEELEMENTS 7\r",
          "#define PIXELFORMAT_FIVETILE\r",
          "#define COLORSPACE_LAB\r",
          "\r",
          "//<<< __defines\r",
          "\r",
          "\r",
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D Image;",
          "float Scale;",
          "float FiveTileSampleAmt;",
          "float2 CellOffset;",
          "float OutputSaturation;",
          "float4 ColorKey;",
          "float ColorKeyTolerance;",
          "float OutputMul;",
          "//<<< _parameters\r",
          "Texture2D RefImage;\r",
          "Texture2D FontImage;\r",
          "const float2 CharSize;\r",
          "const int PixelFormat;// 0 = square, 1=five tile\r",
          "const int ColorSpace;// 0=hsl, 1=jpeg, 2=lab, 3=nyuv\r",
          "const float ValuesPerTile;\r",
          "const float2 LuminanceTiles;\r",
          "const float ChromaElements;\r",
          "const float MapEntryCount;\r",
          "\r",
          "const float2 ScaledCharSizePx;// = CharSize * Scale; // size in pixels of the resulting char cell (8 * 2 = 16)\r",
          "const float2 RefImageSizePx;\r",
          "const float2 FontImageSizePx;\r",
          "const uint FontWidthInChars;\r",
          "const float2 SrcImageSizePx;\r",
          "    \r",
          "\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float2 texCoord : TEXCOORD;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float2 texCoord: TEXCOORD0;\r",
          "};\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "\r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "\r",
          "\r",
          "#if !defined(DIMENSIONS)\r",
          "#define DIMENSIONS 20 // practical maximum. shouldn't ever happen though.\r",
          "#endif\r",
          "#if !defined(VALUEELEMENTS)\r",
          "#define VALUEELEMENTS 20\r",
          "#endif\r",
          "\r",
          "#define Epsilon (1e-10)\r",
          "\r",
          "// PIXELFORMAT_SQUARE\r",
          "// PIXELFORMAT_FIVETILE\r",
          "// PIXELFORMAT_UNKNOWN\r",
          "\r",
          "// COLORSPACE_HSL\r",
          "// COLORSPACE_JPEG\r",
          "// COLORSPACE_LAB\r",
          "// COLORSPACE_NYUV\r",
          "// COLORSPACE_UNKNOWN\r",
          "\r",
          "///////////////////////////////////////////////////////////////////////////\r",
          "// RGB -> HSL conversion\r",
          "\r",
          "float3 RGBtoHCV(in float3 RGB)\r",
          "{\r",
          "    // Based on work by Sam Hocevar and Emil Persson\r",
          "    float4 P = (RGB.g < RGB.b) ? float4(RGB.bg, -1.0, 2.0/3.0) : float4(RGB.gb, 0.0, -1.0/3.0);\r",
          "    float4 Q = (RGB.r < P.x) ? float4(P.xyw, RGB.r) : float4(RGB.r, P.yzx);\r",
          "    float C = Q.x - min(Q.w, Q.y);\r",
          "    float H = abs((Q.w - Q.y) / (6 * C + Epsilon) + Q.z);\r",
          "    return float3(H, C, Q.x);\r",
          "}\r",
          "float3 RGBtoHSL(in float3 RGB)\r",
          "{\r",
          "    float3 HCV = RGBtoHCV(RGB);\r",
          "    float L = HCV.z - HCV.y * 0.5;\r",
          "    float S = HCV.y / (1 - abs(L * 2 - 1) + Epsilon);\r",
          "    return float3(HCV.x, S, L);\r",
          "}\r",
          "\r",
          "float3 rgb2NormalizedHSL(float3 c) {\r",
          "    return RGBtoHSL(c).zxy; // expects luma to be 1st component\r",
          "}\r",
          "\r",
          "///////////////////////////////////////////////////////////////////////////\r",
          "// RGB -> JPEG conversion\r",
          "float3 rgb2JPEG(float3 c) {\r",
          "    float Y = (0.2989 * c.r + 0.5866 * c.g + 0.1145 * c.b);\r",
          "    float Cb = (-0.1687 * c.r - 0.3313 * c.g + 0.5000 * c.b);\r",
          "    float Cr = (0.5000 * c.r - 0.4184 * c.g - 0.0816 * c.b);\r",
          "    float3 ret;\r",
          "    ret.x = Y;\r",
          "    ret.y = Cb; // -.5, .5 center 0\r",
          "    if (ret.y < 0)\r",
          "        ret.y += 1;\r",
          "    ret.z = Cr; // -.5, .5 center 0\r",
          "    if (ret.z < 0)\r",
          "        ret.z += 1;\r",
          "    return ret;\r",
          "}\r",
          "\r",
          "\r",
          "///////////////////////////////////////////////////////////////////////////\r",
          "// RGB -> LAB conversion\r",
          "// https://github.com/sv3/gift/blob/master/RGB2Lab.glsl\r",
          "float3 RGB2Lab(float3 rgb){\r",
          "    float R = rgb.x;\r",
          "    float G = rgb.y;\r",
          "    float B = rgb.z;\r",
          "    // threshold\r",
          "    float T = 0.008856;\r",
          "\r",
          "    float X = R * 0.412453 + G * 0.357580 + B * 0.180423;\r",
          "    float Y = R * 0.212671 + G * 0.715160 + B * 0.072169;\r",
          "    float Z = R * 0.019334 + G * 0.119193 + B * 0.950227;\r",
          "\r",
          "    // Normalize for D65 white point\r",
          "    X = X / 0.950456;\r",
          "    Y = Y;\r",
          "    Z = Z / 1.088754;\r",
          "\r",
          "    bool XT, YT, ZT;\r",
          "    XT = false; YT=false; ZT=false;\r",
          "    if(X > T) XT = true;\r",
          "    if(Y > T) YT = true;\r",
          "    if(Z > T) ZT = true;\r",
          "\r",
          "    float Y3 = pow(abs(Y),1.0/3.0);\r",
          "    float fX, fY, fZ;\r",
          "    if(XT){ fX = pow(abs(X), 1.0/3.0);} else{ fX = 7.787 * X + 16.0/116.0; }\r",
          "    if(YT){ fY = Y3; } else{ fY = 7.787 * Y + 16.0/116.0 ; }\r",
          "    if(ZT){ fZ = pow(abs(Z),1.0/3.0); } else{ fZ = 7.787 * Z + 16.0/116.0; }\r",
          "\r",
          "    float L; if(YT){ L = (116.0 * Y3) - 16.0; }else { L = 903.3 * Y; }\r",
          "    float a = 500.0 * ( fX - fY );\r",
          "    float b = 200.0 * ( fY - fZ );\r",
          "\r",
          "    return float3(L,a,b);\r",
          "}\r",
          "\r",
          "float3 rgb2NormalizedLAB( float3 c ) {\r",
          "    float3 lab = RGB2Lab(c);\r",
          "    float3 ret;\r",
          "    ret.x = lab.x / 100.0;\r",
          "    ret.y = lab.y / 255.0;\r",
          "    ret.z = lab.z / 255.0;\r",
          "    if (ret.y < 0)\r",
          "        ret.y += 1;\r",
          "    if (ret.z < 0)\r",
          "        ret.z += 1;\r",
          "    return ret;\r",
          "}\r",
          "\r",
          "///////////////////////////////////////////////////////////////////////////\r",
          "// RGB -> NYUV conversion\r",
          "float3 rgbToNYUV(float3 c) {\r",
          "    float3 ret;\r",
          "    ret.x = (c.r + c.g + c.b) / 3;// 0-1\r",
          "    ret.y = (c.g - c.b) / 2;\r",
          "    if (ret.y < 0)\r",
          "        ret.y += 1;\r",
          "    ret.z = (c.r - c.b) / 2;\r",
          "    if (ret.z < 0)\r",
          "        ret.z += 1;\r",
          "    return ret;\r",
          "}\r",
          "\r",
          "\r",
          "///////////////////////////////////////////////////////////////////////////\r",
          "float GetLuma(float3 c){\r",
          "#if defined(COLORSPACE_NYUV)\r",
          "    return (c.r + c.g + c.b)/3.0;\r",
          "#endif\r",
          "    return 0.2989 * c.r + 0.5866 * c.g + 0.1145 * c.b;\r",
          "}\r",
          "\r",
          "float3 GetNativeColor(float3 inp) {\r",
          "#if defined(COLORSPACE_HSL)\r",
          "    return clamp(rgb2NormalizedHSL(inp),0,1);\r",
          "#elif defined(COLORSPACE_LAB)\r",
          "    return clamp(rgb2NormalizedLAB(inp),0,1);\r",
          "#elif defined(COLORSPACE_NYUV)\r",
          "    return clamp(rgbToNYUV(inp),0,1);\r",
          "#elif defined(COLORSPACE_JPEG)\r",
          "    return clamp(rgb2JPEG(inp),0,1);\r",
          "#endif\r",
          "    return inp;\r",
          "}\r",
          "\r",
          "\r",
          "///////////////////////////////////////////////////////////////////////////\r",
          "float4 PS_Square( float2 pos)\r",
          "{\r",
          "    // the upper-left pixel position of the character-sized cell.\r",
          "    float halfSegCenter = 0.25 / ValuesPerTile;\r",
          "    float lumaComponents = LuminanceTiles.x * LuminanceTiles.y;\r",
          "\r",
          "    uint2 srcCell = floor(pos / ScaledCharSizePx);\r",
          "    int2 srcCellOrigin = srcCell * ScaledCharSizePx;// pixel position of the cell upper left\r",
          "    int2 srcCellPos = pos - srcCellOrigin; // pixel position within this cell, 0-ScaledCharSize\r",
          "    float2 HalfTileSize = ScaledCharSizePx / 2.;\r",
          "    srcCellPos /= Scale;// now in coords that play well with the font texture\r",
          "    \r",
          "    float vals[VALUEELEMENTS];\r",
          "    float3 charRGB = float3(0,0,0);// accumulator\r",
          "    for (int ty = 0; ty < LuminanceTiles.y; ++ ty) {\r",
          "        for (int tx = 0; tx < LuminanceTiles.x; ++ tx) {\r",
          "            float2 tileIndex = float2(tx, ty);\r",
          "            float2 tilePos = (tileIndex / LuminanceTiles) * ScaledCharSizePx; // pixel position of the upper-left corner of this tile relative to the char cell\r",
          "            float3 srcColor = Image.Load(int3(srcCellOrigin + tilePos + HalfTileSize + .5, 0)).rgb; // sample the center-ish pix of this tile\r",
          "        \r",
          "            vals[tx + ty * LuminanceTiles.x] = clamp(GetLuma(srcColor), 0, 1);// verified with off-axis lines\r",
          "            charRGB += srcColor;\r",
          "        }\r",
          "    }\r",
          "    \r",
          "    if (ChromaElements >= 2.0) {\r",
          "        charRGB /= lumaComponents;\r",
          "        float3 charYUV = GetNativeColor(charRGB);\r",
          "        vals[lumaComponents] = charYUV.g;\r",
          "        vals[lumaComponents + 1] = charYUV.b;\r",
          "    }\r",
          "    \r",
          "    uint ID = 0;\r",
          "    for (int i = lumaComponents + ChromaElements - 1; i >= 0 ; -- i) {\r",
          "        float v = vals[i];\r",
          "        v -= halfSegCenter;\r",
          "        v = clamp(v, 0, 1);\r",
          "        v *= ValuesPerTile;\r",
          "        ID *= ValuesPerTile;\r",
          "        ID += (int)floor(v);\r",
          "    }\r",
          "    \r",
          "    int2 refCell = int2(ID % (uint)RefImageSizePx.x, ID / (uint)RefImageSizePx.x);\r",
          "    \r",
          "    float3 ref = RefImage.Load(int3(refCell, 0)).rgb * 255.0;\r",
          "    \r",
          "    // convert ref to linear index.\r",
          "    int fontID = ((int)ref.r) + ((int)ref.g * 256) + ((int)ref.b * 65536);\r",
          "    int2 fontCell = int2(fontID % FontWidthInChars, fontID / FontWidthInChars);\r",
          "\r",
          "    float3 fontColor = FontImage.Load(int3((fontCell * CharSize) + srcCellPos, 0)).rgb;\r",
          "    return float4(fontColor,1);\r",
          "}\r",
          "\r",
          "\r",
          "float3 ImageSample(float2 texCoord/*, float2 pixelOffset*/)\r",
          "{\r",
          "    //float w, h;\r",
          "    //Image.GetDimensions(w, h);\r",
          "    //pixelOffset /= float2(w, h);\r",
          "    //return Image.Sample(samLinear, texCoord + pixelOffset).rgb;\r",
          "    return Image.Sample(samLinear, texCoord).rgb;\r",
          "}\r",
          "\r",
          "///////////////////////////////////////////////////////////////////////////\r",
          "// returns luma\r",
          "\r",
          "// pt = 0-1 point within the char tile to sample.\r",
          "// \r",
          "float FiveTileSample(float2 pt, inout float4 charRGB, float2 ScaledCharSize, float2 texCoordCellOrigin) {\r",
          "    //uint2 px = srcCellOrigin + (ScaledCharSize * pt);\r",
          "    //float2 px = ;\r",
          "    //float3 srcColor = Image.Load(uint3(px, 0)).rgb;\r",
          "    //float3 srcColor = ImageSample(texCoordCellOrigin, (ScaledCharSize * pt));\r",
          "    float3 srcColor = ImageSample(texCoordCellOrigin + ScaledCharSize * pt);//, (ScaledCharSize * pt));\r",
          "    \r",
          "    charRGB.rgb += srcColor;\r",
          "    charRGB.w ++;\r",
          "    return clamp(GetLuma(srcColor), 0, 1);\r",
          "}\r",
          "\r",
          "float4 PS_FiveTile( float2 pos, float2 texCoord)\r",
          "{\r",
          "    const float lumaComponents = 5;\r",
          "    float imgW, imgH;\r",
          "    Image.GetDimensions(imgW, imgH);\r",
          "    float2 imageSize = float2(imgW, imgH);\r",
          "    float halfSegCenter = 0.25 / ValuesPerTile;\r",
          "    float2 _cellOffset = frac(CellOffset);\r",
          "    float2 cellOffsetPx = (_cellOffset * ScaledCharSizePx) % ScaledCharSizePx;\r",
          "    float2 cellOffsetImgTexCoords = cellOffsetPx / SrcImageSizePx;\r",
          "    float2 CharSizeImgTexCoords = ScaledCharSizePx / SrcImageSizePx;// size in source image texcoords of a char cell\r",
          "    \r",
          "    //texCoord += cellOffsetImgTexCoords;\r",
          "    //pos -= cellOffsetPx;\r",
          "    \r",
          "    //pos += cellOffsetPx;\r",
          "    //cellOffsetPx *= 0;\r",
          "    //cellOffsetImgTexCoords *= 0;\r",
          "\r",
          "    // used for sampling the src image\r",
          "    float2 texCoordCellOrigin1 = floor((pos) / ScaledCharSizePx) * CharSizeImgTexCoords;\r",
          "    //texCoordCellOrigin1 += cellOffsetImgTexCoords;\r",
          "    \r",
          "    // used for applying font\r",
          "    //pos -= cellOffsetPx;\r",
          "    int2 srcCellOriginPx = floor((pos) / ScaledCharSizePx);// pixel position of the cell's upper left\r",
          "    //srcCellOriginPx += cellOffsetPx;\r",
          "    srcCellOriginPx *= ScaledCharSizePx;\r",
          "    int2 srcCellPosPx = (pos - srcCellOriginPx); // pixel position within this cell, 0-ScaledCharSize\r",
          "    srcCellPosPx /= Scale;// now in coords that play well with the font texture (un-scale the font)\r",
          "    //srcCellPosPx = (srcCellPosPx % CharSize);\r",
          "\r",
          "    \r",
          "    float vals[VALUEELEMENTS];\r",
          "    float4 charRGB = float4(0,0,0,0);// accumulator. w = count of accumulations\r",
          "    \r",
          "    if (FiveTileSampleAmt < 6.) {\r",
          "        // 5 samples. deviation from the C# code is that the Y is inverted. so bottom = top and vice versa.\r",
          "        // upper left\r",
          "        vals[2] = FiveTileSample(float2(.3, .9), charRGB, CharSizeImgTexCoords, texCoordCellOrigin1);\r",
          "        // upper right\r",
          "        vals[3] = FiveTileSample(float2(.9, .7), charRGB, CharSizeImgTexCoords, texCoordCellOrigin1);\r",
          "        // bottom left\r",
          "        vals[0] = FiveTileSample(float2(.1, .3), charRGB, CharSizeImgTexCoords, texCoordCellOrigin1);\r",
          "        // bottom right\r",
          "        vals[1] = FiveTileSample(float2(.7, .1), charRGB, CharSizeImgTexCoords, texCoordCellOrigin1);\r",
          "        // center\r",
          "        vals[4] = FiveTileSample(float2(.5, .5), charRGB, CharSizeImgTexCoords, texCoordCellOrigin1);\r",
          "    } else {\r",
          "        // upper left\r",
          "        vals[2] = (FiveTileSample(float2(.1, .9), charRGB, CharSizeImgTexCoords, texCoordCellOrigin1)\r",
          "            + FiveTileSample(float2(.5, .9), charRGB, CharSizeImgTexCoords, texCoordCellOrigin1)) / 2.;\r",
          "        // upper right\r",
          "        vals[3] = (FiveTileSample(float2(.9, .9), charRGB, CharSizeImgTexCoords, texCoordCellOrigin1)\r",
          "            + FiveTileSample(float2(.9, .5), charRGB, CharSizeImgTexCoords, texCoordCellOrigin1)) / 2.;\r",
          "        // bottom left\r",
          "        vals[0] = (FiveTileSample(float2(.1, .5), charRGB, CharSizeImgTexCoords, texCoordCellOrigin1)\r",
          "            + FiveTileSample(float2(.1, .1), charRGB, CharSizeImgTexCoords, texCoordCellOrigin1)) / 2.;\r",
          "        // bottom right\r",
          "        vals[1] = (FiveTileSample(float2(.9, .1), charRGB, CharSizeImgTexCoords, texCoordCellOrigin1)\r",
          "            + FiveTileSample(float2(.5, .1), charRGB, CharSizeImgTexCoords, texCoordCellOrigin1)) / 2.;\r",
          "        // center\r",
          "        vals[4] = FiveTileSample(float2(.5, .5), charRGB, CharSizeImgTexCoords, texCoordCellOrigin1);\r",
          "    }\r",
          "    \r",
          "    if (ChromaElements >= 2.0) {\r",
          "        charRGB.rgb /= charRGB.w;\r",
          "        float3 charYUV = GetNativeColor(charRGB.rgb);\r",
          "        vals[lumaComponents] = charYUV.g;\r",
          "        vals[lumaComponents + 1] = charYUV.b;\r",
          "    }\r",
          "    \r",
          "    uint ID = 0;\r",
          "    for (int i = lumaComponents + ChromaElements - 1; i >= 0 ; -- i) {\r",
          "        float v = vals[i];\r",
          "        v -= halfSegCenter;\r",
          "        v = clamp(v, 0, 1);\r",
          "        v *= ValuesPerTile;\r",
          "        ID *= ValuesPerTile;\r",
          "        ID += (int)floor(v);\r",
          "    }\r",
          "    //ID = 190;\r",
          "\r",
          "    int2 refCell = int2(ID % (uint)RefImageSizePx.x, ID / (uint)RefImageSizePx.x);\r",
          "    //refCell = int2(10,14);\r",
          "    \r",
          "    float3 ref = RefImage.Load(int3(refCell, 0)).rgb * 255.0;\r",
          "    \r",
          "    // convert ref to linear index.\r",
          "    int fontID = ((int)ref.r) + ((int)ref.g * 256) + ((int)ref.b * 65536);\r",
          "\r",
          "    int2 fontCell = int2(fontID % FontWidthInChars, fontID / FontWidthInChars);\r",
          "    //fontCell = int2(3,8);\r",
          "\r",
          "    float4 fontColor = FontImage.Load(int3((fontCell * CharSize) + srcCellPosPx, 0));\r",
          "    //float4 d = float4(srcCellPosPx / CharSize,0,1);\r",
          "    //fontColor = lerp(fontColor, d, .4);\r",
          "    //float4 fontColor = FontImage.Sample(samPoint, ((fontCell * CharSize) + srcCellPosPx) / fontImgSize );\r",
          "    \r",
          "    if (length(fontColor.rgb - ColorKey.rgb) < ColorKeyTolerance)\r",
          "        fontColor.a = 0;\r",
          "        \r",
          "    fontColor.rgb = lerp((fontColor.r + fontColor.g + fontColor.b) / 3, fontColor.rgb, OutputSaturation);\r",
          "    \r",
          "    return fontColor * OutputMul;\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "///////////////////////////////////////////////////////////////////////////\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "#if defined(PIXELFORMAT_SQUARE)\r",
          "        return PS_Square(input.pos.xy);\r",
          "#elif defined(PIXELFORMAT_FIVETILE)\r",
          "        return PS_FiveTile(input.pos.xy, input.texCoord.xy);\r",
          "#else\r",
          "        return float4(0, 0, 1, 1);\r",
          "#endif\r",
          "}\r\r\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "20213074-4047-4ae4-af88-3287989ec9e7",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scale",
      "MetaInstanceID": "1f6c6b2f-18e3-4f65-8bb7-b5afe96d7c93",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FiveTileSampleAmt",
      "MetaInstanceID": "e8d77477-9b90-4208-96db-f90b7a0a7f4b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "for the fivetile pixelformat, do we sample 5 pixels to map, or 9?\r\n",
      "Min": "5",
      "Max": "9",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Five",
          "Value": "5"
        },
        {
          "Name": "Nine",
          "Value": "9"
        }
      ]
    },
    {
      "Name": "MapArgsFilePath",
      "MetaInstanceID": "12304fc6-02c1-4d36-b08a-2e5d2852cf96",
      "DefaultValue": {
        "Type": "Text",
        "Value": ""
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "path to args.txt describing the ref map and font.\r\n",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "CellOffset.X",
      "MetaInstanceID": "de8aea91-9c9e-4c1a-ad1a-5a0ea22e2717",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "CellOffset.Y",
      "MetaInstanceID": "ffdbfa5f-fbd0-443d-bf89-dbd6efad218a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "OutputSaturation",
      "MetaInstanceID": "40e01bbe-fac3-40ea-8b22-35abdbf3fdca",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.005",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorKey.R",
      "MetaInstanceID": "50e2a1ae-4d38-43f3-aed8-282f41c934c2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorKey.G",
      "MetaInstanceID": "733a1bdd-037f-49ae-9844-d34726f52473",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorKey.B",
      "MetaInstanceID": "75009414-cd71-4904-b328-48d49ad64e3a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorKey.A",
      "MetaInstanceID": "858a7710-c1fc-45b8-97d4-5e0be5768347",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorKeyTolerance",
      "MetaInstanceID": "77b04be2-6dd4-439a-9911-028339327515",
      "DefaultValue": {
        "Type": "Float",
        "Value": "-1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "OutputMul",
      "MetaInstanceID": "af03fa44-390a-4338-87ef-02cad78f87b6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "543f96aa-31d3-4b74-91d2-299cd157536d",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "a3fef8f7-9932-46e9-89a5-48eb456f162b",
      "MetaID": "2cd667a5-afa0-4821-bb93-30b7ea93ca80",
      "Name": "ASCIIFilterRef4Func",
      "Version": "e03813ea-f04b-483f-99a3-421c92d1e8be",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        " ",
        "namespace Framefield.Core.ID2cd667a5_afa0_4821_bb93_30b7ea93ca80",
        "{",
        "    public class RefMapAndFontLoader : IDisposable",
        "    {",
        "        public void Dispose() {",
        "            FakeDispose();",
        "        }",
        "        ",
        "        public void FakeDispose() {",
        "            Utilities.DisposeObj(ref _refImageResource);",
        "            Utilities.DisposeObj(ref _fontImageResource);",
        "        }",
        "",
        "        public void Eval(string ArgsFilePath)",
        "        {",
        "            bool Changed = true;",
        "            DateTime? writeTime = null;",
        "            if (ArgsFilePath == _lastArgsPath) {",
        "                writeTime = System.IO.File.GetLastWriteTime(ArgsFilePath);",
        "                //Logger.Info(this,\"writeTime '{0}'\", writeTime);",
        "                if (writeTime.Value == _lastArgsWriteTime)",
        "                {",
        "                    Changed = false;",
        "                }",
        "            }",
        "",
        "            _lastArgsPath = ArgsFilePath;",
        "            ",
        "            if (!writeTime.HasValue) {",
        "                // shouldn't really be called except some debugging cases.",
        "                writeTime = System.IO.File.GetLastWriteTime(ArgsFilePath);",
        "            }",
        "            ",
        "            _lastArgsWriteTime = writeTime.Value;",
        "",
        "            if (Changed)",
        "            {",
        "                FakeDispose();",
        "                ",
        "                var lines = System.IO.File.ReadAllLines(ArgsFilePath);",
        "                for (int i = 0; i < lines.Length - 1; ++ i) {",
        "                    if (lines[i].Equals(\"-pf\", StringComparison.InvariantCultureIgnoreCase)) {",
        "                        string s = lines[i + 1].ToLowerInvariant();",
        "                        if (s == \"square\") {",
        "                            pixelFormat = 0;",
        "                            Logger.Info(\"Pixel format: square\");",
        "                        }",
        "                        if (s == \"fivetile\") {",
        "                            pixelFormat = 1;",
        "                            Logger.Info(\"Pixel format: five tile\");",
        "                        }",
        "                    }",
        "                    if (lines[i].Equals(\"-cs\", StringComparison.InvariantCultureIgnoreCase)) {",
        "                        string s = lines[i + 1].ToLowerInvariant();",
        "                        switch(s) {",
        "                            case \"hsl\":// 0=hsl, 1=jpeg, 2=lab, 3=nyuv",
        "                                colorSpace = 0;",
        "                                Logger.Info(\"Colorspace: HSL\");",
        "                                break;",
        "                            case \"jpeg\":// 0=hsl, 1=jpeg, 2=lab, 3=nyuv",
        "                                colorSpace = 1;",
        "                                Logger.Info(\"Colorspace: JPEG\");",
        "                                break;",
        "                            case \"lab\":// 0=hsl, 1=jpeg, 2=lab, 3=nyuv",
        "                                colorSpace = 2;",
        "                                Logger.Info(\"Colorspace: LAB\");",
        "                                break;",
        "                            case \"nyuv\":// 0=hsl, 1=jpeg, 2=lab, 3=nyuv",
        "                                colorSpace = 3;",
        "                                Logger.Info(\"Colorspace: NYUV\");",
        "                                break;",
        "                        }",
        "                    }",
        "                    else if (lines[i].Equals(\"-charsize\", StringComparison.InvariantCultureIgnoreCase)) {",
        "                        string s = lines[i + 1];",
        "                        charSizeX = Convert.ToInt32(s.Split('x')[0]);",
        "                        charSizeY = Convert.ToInt32(s.Split('x')[1]);",
        "                        Logger.Info(\"Char size: {0} x {1}\", charSizeX, charSizeY);",
        "                    }",
        "                }",
        "                for (int i = 0; i < lines.Length - 1; ++ i) {",
        "                    if (lines[i].Equals(\"-pfargs\", StringComparison.InvariantCultureIgnoreCase)) {",
        "                        if (pixelFormat == 0) {",
        "                            // 8v3x3+0",
        "                            string s = lines[i + 1];",
        "                            valuesPerComponent = Convert.ToInt32(s.Split('v')[0]);",
        "                            s = s.Split('v')[1];",
        "                            chromaElements = Convert.ToInt32(s.Split('+')[1]);",
        "                            s = s.Split('+')[0];",
        "                            lumaTilesX = Convert.ToInt32(s.Split('x')[0]);",
        "                            lumaTilesY = Convert.ToInt32(s.Split('x')[1]);",
        "                            Logger.Info(\"Pixel format args: {0}v{1}x{2}+{3}\", valuesPerComponent, lumaTilesX, lumaTilesY, chromaElements);",
        "                        } else {",
        "                            // 8v5+0",
        "                            string s = lines[i + 1];",
        "                            valuesPerComponent = Convert.ToInt32(s.Split('v')[0]);",
        "                            s = s.Split('v')[1];",
        "                            chromaElements = Convert.ToInt32(s.Split('+')[1]);",
        "                            lumaTilesX = 5;",
        "                            lumaTilesY = 1;",
        "                            s = s.Split('+')[0];",
        "                            Logger.Info(\"Pixel format args: {0}v5+{1}\", valuesPerComponent, chromaElements);",
        "                        }",
        "                    }",
        "                }",
        "                ",
        "                string dir = System.IO.Path.GetDirectoryName(ArgsFilePath);",
        "",
        "                string refMapPath = System.IO.Directory.EnumerateFiles(dir, \"mapref_*\", System.IO.SearchOption.TopDirectoryOnly).First();",
        "                Logger.Info(\"Ref map image loaded from '{0}'\", refMapPath);",
        "                string fontPath = System.IO.Directory.EnumerateFiles(dir, \"mapfont_*\", System.IO.SearchOption.TopDirectoryOnly).First();",
        "                Logger.Info(\"Font image loaded from '{0}'\", fontPath);",
        "                ",
        "                _refImageResource = ResourceManager.ReadImage(refMapPath);",
        "                //Logger.Error(this,\"RefImagefile not found '{0}'\", RefImagePath);",
        "                _fontImageResource = ResourceManager.ReadImage(fontPath);  ",
        "",
        "                hashCode = string.Format(\"{0}|{1}\", ArgsFilePath, _lastArgsWriteTime.ToBinary().ToString(\"x\"));",
        "",
        "                Changed = false;",
        "            }",
        "",
        "        }",
        "",
        "        public ImageResource _refImageResource;",
        "        public ImageResource _fontImageResource;",
        "        public int charSizeX = 8;",
        "        public int charSizeY = 8;",
        "        public int valuesPerComponent = 8;",
        "        public int lumaTilesX = 2;",
        "        public int lumaTilesY = 2;",
        "        public int chromaElements = 2;",
        "        public int pixelFormat = 0;// 0=square, 1=fivetile",
        "        public int colorSpace = 0;// 0=hsl, 1=jpeg, 2=lab, 3=nyuv",
        "",
        "        public string hashCode;",
        "        public DateTime _lastArgsWriteTime = DateTime.MaxValue;//_lastArgsPath = String.Empty; // prevent loading",
        "        public string _lastArgsPath = \"\";",
        "    }",
        "",
        "",
        "    public class Class_ASCIIFilterRef4 : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Scale = 2,",
        "            FiveTileSampleAmt = 3,",
        "            MapArgsFilePath = 4,",
        "            CellOffsetX = 5,",
        "            CellOffsetY = 6,",
        "            OutputSaturation = 7,",
        "            ColorKeyR = 8,",
        "            ColorKeyG = 9,",
        "            ColorKeyB = 10,",
        "            ColorKeyA = 11,",
        "            ColorKeyTolerance = 12,",
        "            OutputMul = 13",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override void Dispose() {",
        "            Utilities.DisposeObj(ref _map);",
        "        }",
        "",
        "",
        "        public override string GetCode(int idx) {",
        "            string code = base.GetCode(idx);",
        "            //return code;",
        "            if (string.IsNullOrEmpty(code)) {",
        "                Logger.Info(this,\"code empty\");",
        "                return code;",
        "            }",
        "            string openToken = \"//>>> __defines\";",
        "            string closeToken = \"//<<< __defines\";",
        "            var openSplit = code.Split(new string[] { openToken }, StringSplitOptions.None);",
        "            var closeSplit = code.Split(new string[] { closeToken }, StringSplitOptions.None);",
        "            if (openSplit.Length < 2) {",
        "                Logger.Info(this,\"code open defines not found.\");",
        "                return code;",
        "            }",
        "            if (closeSplit.Length < 2) {",
        "                Logger.Info(this,\"code close defines not found.\");",
        "                return code;",
        "            }",
        "            string beforeDefines = openSplit[0] + openToken + \"\\r\\n\";",
        "            string afterDefines = \"\\r\\n\" + closeToken + closeSplit[1];",
        "            ",
        "            string ret = beforeDefines + _defines + afterDefines;",
        "            //Logger.Info(this,\"Returning modified code, with #defines: {0}\", _defines);",
        "            return ret;",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Image = inputs[(int)InputId.Image].Eval(context).Image; // Needs to be checked for null!",
        "            var Scale = inputs[(int)InputId.Scale].Eval(context).Value;",
        "            var FiveTileSampleAmt = (int) inputs[(int)InputId.FiveTileSampleAmt].Eval(context).Value;",
        "            var MapArgsFilePath = inputs[(int)InputId.MapArgsFilePath].Eval(context).Text;",
        "            var CellOffsetX = inputs[(int)InputId.CellOffsetX].Eval(context).Value;",
        "            var CellOffsetY = inputs[(int)InputId.CellOffsetY].Eval(context).Value;",
        "            var CellOffset = new Vector2(CellOffsetX, CellOffsetY);",
        "            var OutputSaturation = inputs[(int)InputId.OutputSaturation].Eval(context).Value;",
        "            var ColorKeyR = inputs[(int)InputId.ColorKeyR].Eval(context).Value;",
        "            var ColorKeyG = inputs[(int)InputId.ColorKeyG].Eval(context).Value;",
        "            var ColorKeyB = inputs[(int)InputId.ColorKeyB].Eval(context).Value;",
        "            var ColorKeyA = inputs[(int)InputId.ColorKeyA].Eval(context).Value;",
        "            var ColorKey = new Color4(ColorKeyR, ColorKeyG, ColorKeyB, ColorKeyA);",
        "            var ColorKeyTolerance = inputs[(int)InputId.ColorKeyTolerance].Eval(context).Value;",
        "            var OutputMul = inputs[(int)InputId.OutputMul].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            return PrepareAndEvalOnChange(context, () => {",
        "            ",
        "                if (_map == null)",
        "                    _map = new RefMapAndFontLoader();",
        "                    ",
        "                _map.Eval(MapArgsFilePath);",
        "            ",
        "                int dimensions = _map.chromaElements + _map.lumaTilesX * _map.lumaTilesY;",
        "                int valuesPerTile = _map.valuesPerComponent;//(int)Map[\"ValuesPerTile\"];",
        "                int mapEntryCount = (int)Math.Round(Math.Pow(valuesPerTile, dimensions));",
        "",
        "                //Logger.Info(this,\"On change... hash code {0} vs. hash code {1}\", Map[\"HashCode\"], _lashHashCode);",
        "                //Logger.Info(this,\"CODE: {0}\", inputs[(int)InputId.Code].GetType());",
        "                //var thisHashCode = Map[\"HashCode\"];",
        "                if (_lastHashCode != _map.hashCode) {",
        "                    StringBuilder sb = new StringBuilder();",
        "                    sb.AppendLine(\"#define DIMENSIONS \" + dimensions.ToString());",
        "                    sb.AppendLine(\"#define VALUEELEMENTS \" + (dimensions + 2).ToString());",
        "                    int pixelFormat = _map.pixelFormat;// Convert.ToInt32(Map[\"PixelFormat\"]);",
        "                    switch(pixelFormat) {",
        "                        case 0:",
        "                            sb.AppendLine(\"#define PIXELFORMAT_SQUARE\");",
        "                            break;",
        "                        case 1:",
        "                            sb.AppendLine(\"#define PIXELFORMAT_FIVETILE\");",
        "                            break;",
        "                        default:",
        "                            sb.AppendLine(\"#define PIXELFORMAT_UNKNOWN\");",
        "                            break;",
        "                    }",
        "                    int colorSpace = _map.colorSpace;// Convert.ToInt32(Map[\"ColorSpace\"]);",
        "                    switch(colorSpace) {",
        "                        case 0:",
        "                            sb.AppendLine(\"#define COLORSPACE_HSL\");",
        "                            break;",
        "                        case 1:",
        "                            sb.AppendLine(\"#define COLORSPACE_JPEG\");",
        "                            break;",
        "                        case 2:",
        "                            sb.AppendLine(\"#define COLORSPACE_LAB\");",
        "                            break;",
        "                        case 3:",
        "                            sb.AppendLine(\"#define COLORSPACE_NYUV\");",
        "                            break;",
        "                        default:",
        "                            sb.AppendLine(\"#define COLORSPACE_UNKNOWN\");",
        "                            break;",
        "                    }",
        "                    _defines = sb.ToString();",
        "                    //Logger.Info(this, \"Setting defines to = {0}\", _defines);",
        "    ",
        "                    Compile(0);",
        "                    //return;",
        "                }",
        "                ",
        "                _lastHashCode = _map.hashCode;//thisHashCode;",
        "                //_lastScale = Scale;",
        "            ",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "                ",
        "                if ( _map._refImageResource == null) {",
        "                    return;",
        "                }",
        "                if ( _map._fontImageResource == null) {",
        "                    return;",
        "                }",
        "",
        "                //>>> _setup",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"Scale\").AsScalar().Set(Scale);",
        "                    _effect.GetVariableByName(\"FiveTileSampleAmt\").AsScalar().Set(FiveTileSampleAmt);",
        "                    _effect.GetVariableByName(\"CellOffset\").AsVector().Set(new Vector2(CellOffsetX, CellOffsetY));",
        "                    _effect.GetVariableByName(\"OutputSaturation\").AsScalar().Set(OutputSaturation);",
        "                    _effect.GetVariableByName(\"ColorKey\").AsVector().Set(new Vector4(ColorKeyR, ColorKeyG, ColorKeyB, ColorKeyA));",
        "                    _effect.GetVariableByName(\"ColorKeyTolerance\").AsScalar().Set(ColorKeyTolerance);",
        "                    _effect.GetVariableByName(\"OutputMul\").AsScalar().Set(OutputMul);",
        "                    //<<< _setup",
        "                    ",
        "                    //Logger.Info(this, \"Hashcode = {0}\", Map[\"HashCode\"]);",
        "                    //Logger.Info(this, \"refimage w = {0}\", Map[\"FontImage\"].GetType());",
        "",
        "                    using (var RefImageView = new ShaderResourceView(context.D3DDevice, _map._refImageResource.Image))// Map[\"RefImage\"]))",
        "                    using (var FontImageView = new ShaderResourceView(context.D3DDevice, _map._fontImageResource.Image))//Map[\"FontImage\"]))",
        "                    {",
        "                        //Logger.Debug(this,\"MapImageView is {0}\", MapImageView.GetType());",
        "                        _effect.GetVariableByName(\"RefImage\").AsShaderResource().SetResource(RefImageView);",
        "                        _effect.GetVariableByName(\"FontImage\").AsShaderResource().SetResource(FontImageView);",
        "                ",
        "                        _effect.GetVariableByName(\"CharSize\").AsVector().Set(new Vector2(_map.charSizeX, _map.charSizeY));// Map[\"CharSize\"]);",
        "                        _effect.GetVariableByName(\"LuminanceTiles\").AsVector().Set(new Vector2(_map.lumaTilesX, _map.lumaTilesY));//Map[\"LuminanceTiles\"]);",
        "                        _effect.GetVariableByName(\"ValuesPerTile\").AsScalar().Set(_map.valuesPerComponent);//Map[\"ValuesPerTile\"]);",
        "                        _effect.GetVariableByName(\"ChromaElements\").AsScalar().Set(_map.chromaElements);//Map[\"ChromaElements\"]);",
        "                        _effect.GetVariableByName(\"PixelFormat\").AsScalar().Set(_map.pixelFormat);//Map[\"PixelFormat\"]);",
        "                        _effect.GetVariableByName(\"ColorSpace\").AsScalar().Set(_map.colorSpace);//Map[\"ColorSpace\"]);",
        "                        ",
        "                        _effect.GetVariableByName(\"CharSize\").AsVector().Set(new Vector2(_map.charSizeX, _map.charSizeY));",
        "                        _effect.GetVariableByName(\"ScaledCharSizePx\").AsVector().Set(new Vector2(_map.charSizeX * Scale, _map.charSizeY * Scale));",
        "                        _effect.GetVariableByName(\"RefImageSizePx\").AsVector().Set(new Vector2(_map._refImageResource.Image.Description.Width, _map._refImageResource.Image.Description.Height));",
        "                        _effect.GetVariableByName(\"FontImageSizePx\").AsVector().Set(new Vector2(_map._fontImageResource.Image.Description.Width, _map._fontImageResource.Image.Description.Height));",
        "                        _effect.GetVariableByName(\"FontWidthInChars\").AsScalar().Set(_map._fontImageResource.Image.Description.Width / _map.charSizeX);",
        "                        _effect.GetVariableByName(\"SrcImageSizePx\").AsVector().Set(new Vector2(Image.Description.Width, Image.Description.Height));",
        "                        ",
        "                        _effect.GetVariableByName(\"MapEntryCount\").AsScalar().Set(mapEntryCount);",
        "",
        "                        Render(context);",
        "                    }",
        "",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "        RefMapAndFontLoader _map = null;",
        "        string _lastHashCode = \"\";",
        "        string _defines = \"\";",
        "        ",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a3fef8f7-9932-46e9-89a5-48eb456f162b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "543f96aa-31d3-4b74-91d2-299cd157536d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d0ffc38a-41df-4d20-a202-b25a00df9998",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a3fef8f7-9932-46e9-89a5-48eb456f162b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "20213074-4047-4ae4-af88-3287989ec9e7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a3fef8f7-9932-46e9-89a5-48eb456f162b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1f6c6b2f-18e3-4f65-8bb7-b5afe96d7c93",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a3fef8f7-9932-46e9-89a5-48eb456f162b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e8d77477-9b90-4208-96db-f90b7a0a7f4b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a3fef8f7-9932-46e9-89a5-48eb456f162b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "12304fc6-02c1-4d36-b08a-2e5d2852cf96",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a3fef8f7-9932-46e9-89a5-48eb456f162b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "de8aea91-9c9e-4c1a-ad1a-5a0ea22e2717",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a3fef8f7-9932-46e9-89a5-48eb456f162b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ffdbfa5f-fbd0-443d-bf89-dbd6efad218a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a3fef8f7-9932-46e9-89a5-48eb456f162b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "40e01bbe-fac3-40ea-8b22-35abdbf3fdca",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a3fef8f7-9932-46e9-89a5-48eb456f162b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "50e2a1ae-4d38-43f3-aed8-282f41c934c2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a3fef8f7-9932-46e9-89a5-48eb456f162b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "733a1bdd-037f-49ae-9844-d34726f52473",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a3fef8f7-9932-46e9-89a5-48eb456f162b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "75009414-cd71-4904-b328-48d49ad64e3a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a3fef8f7-9932-46e9-89a5-48eb456f162b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "858a7710-c1fc-45b8-97d4-5e0be5768347",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a3fef8f7-9932-46e9-89a5-48eb456f162b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "77b04be2-6dd4-439a-9911-028339327515",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a3fef8f7-9932-46e9-89a5-48eb456f162b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "af03fa44-390a-4338-87ef-02cad78f87b6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a3fef8f7-9932-46e9-89a5-48eb456f162b"
    }
  ]
}