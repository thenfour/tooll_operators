{
  "Name": "SegmentedSkewUV",
  "_id": "a155a71a-6be0-4374-8a89-47b482c54a39",
  "Namespace": "user.tenfour",
  "Description": "GPU deformer which rotates a mesh along axes.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "24d5df53-adca-4810-9d38-f3b6136ca766",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _parameters\r",
          "float3 Boundary;",
          "float3 Angle1;",
          "float3 Angle2;",
          "float3 SmoothDist;",
          "//<<< _parameters\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "float _noiseTime=0;\r",
          "float _frequency=0;\r",
          "\r",
          "float4x4 RotationMatrix(float3 axis, float angle)\r",
          "{\r",
          "    axis = normalize(axis);\r",
          "    float s = sin(angle);\r",
          "    float c = cos(angle);\r",
          "    float oc = 1.0 - c;\r",
          "    \r",
          "    return float4x4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\r",
          "                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\r",
          "                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\r",
          "                0.0,                                0.0,                                0.0,                                1.0);\r",
          "}\r",
          "\r",
          "float getAngle(float x, float a1, float a2, float boundary, float smoothDist) {\r",
          "    float m = smoothstep(boundary - smoothDist, boundary + smoothDist, x);\r",
          "    m = lerp(a1, a2, m);\r",
          "    return m;\r",
          "}\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{\r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "        Vertex v = input[i];\r",
          "        v.texCoord += v.pos.x;\r",
          "        outputStream.Append(v);\r",
          "    }\r",
          "\r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scene",
      "MetaInstanceID": "f64a97a1-e032-4236-8cdf-f16b90d82821",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Boundary.X",
      "MetaInstanceID": "3f1c43c1-8f79-4f03-a29c-11ef8f139fc3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Boundary.Y",
      "MetaInstanceID": "8ccab831-32fe-40da-8109-6c6a27136616",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Boundary.Z",
      "MetaInstanceID": "6d4e2e26-a015-4d26-9a81-2efded450f06",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Angle1.X",
      "MetaInstanceID": "343a5ab8-7cf0-434f-bbfc-2cc7c92a272c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Angle1.Y",
      "MetaInstanceID": "56a1f1ae-c5ff-4d9b-a8db-2f7cf3e5f1d4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Angle1.Z",
      "MetaInstanceID": "41698d9c-3298-4e12-87eb-7106cddfc107",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Angle2.X",
      "MetaInstanceID": "41a73acf-3a4c-41fc-9b6e-019fa87c0b2c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Angle2.Y",
      "MetaInstanceID": "aa65e165-3aae-44e4-9d3d-3d5b7901ef01",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Angle2.Z",
      "MetaInstanceID": "b1246577-753b-4212-b1d0-29446843a2de",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SmoothDist.X",
      "MetaInstanceID": "07b4eb6b-1f01-403e-9863-f6b9041c1f03",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SmoothDist.Y",
      "MetaInstanceID": "53041aa8-4e38-4abe-a694-43abef91e1ad",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SmoothDist.Z",
      "MetaInstanceID": "df446a8b-52e3-47aa-b38d-bdb6da4ff87c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DisplacementImage",
      "MetaInstanceID": "c9c0a118-8bd1-4748-aab8-f57786a8cf59",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "444f8c35-5da9-4c02-ab4e-7423223476cf",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "691bca70-f12f-471c-a6c4-b55d3a9c5df8",
      "MetaID": "52063547-313a-4d95-bfb7-41cca64fdd00",
      "Name": "SegmentedSkewUVFunc",
      "Version": "95d62460-2205-407c-90bc-e7a2beff5fcc",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using SharpDX.Direct3D;",
        "",
        "namespace Framefield.Core.ID52063547_313a_4d95_bfb7_41cca64fdd00",
        "{",
        "    public class Class_SegmentedSkewUV : FXSourceCodeFunction, IFXSceneSourceCode, IMeshSupplier",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scene = 1,",
        "            BoundaryX = 2,",
        "            BoundaryY = 3,",
        "            BoundaryZ = 4,",
        "            Angle1X = 5,",
        "            Angle1Y = 6,",
        "            Angle1Z = 7,",
        "            Angle2X = 8,",
        "            Angle2Y = 9,",
        "            Angle2Z = 10,",
        "            SmoothDistX = 11,",
        "            SmoothDistY = 12,",
        "            SmoothDistZ = 13,",
        "            DisplacementImage = 14",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class_SegmentedSkewUV()",
        "        {",
        "            _meshCollector = new MeshCollector(this);",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public void AddMeshesTo(ICollection<Mesh> meshes)",
        "        {",
        "            UpdateMesh(new OperatorPartContext(), OperatorPart.Connections);",
        "            if (_mesh != null)",
        "                meshes.Add(_mesh);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "",
        "                if (_mesh.Vertices != null)",
        "                {",
        "                    // render stream output to screen or whatever target is set",
        "                    context.Renderer.SetupEffect(context);",
        "                    context.Renderer.Render(_mesh, context);",
        "                }",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            if (!Changed && _mesh.Vertices != null)",
        "                return;",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Scene = inputs[(int)InputId.Scene];",
        "            var BoundaryX = inputs[(int)InputId.BoundaryX].Eval(context).Value;",
        "            var BoundaryY = inputs[(int)InputId.BoundaryY].Eval(context).Value;",
        "            var BoundaryZ = inputs[(int)InputId.BoundaryZ].Eval(context).Value;",
        "            var Boundary = new Vector3(BoundaryX, BoundaryY, BoundaryZ);",
        "            var Angle1X = inputs[(int)InputId.Angle1X].Eval(context).Value;",
        "            var Angle1Y = inputs[(int)InputId.Angle1Y].Eval(context).Value;",
        "            var Angle1Z = inputs[(int)InputId.Angle1Z].Eval(context).Value;",
        "            var Angle1 = new Vector3(Angle1X, Angle1Y, Angle1Z);",
        "            var Angle2X = inputs[(int)InputId.Angle2X].Eval(context).Value;",
        "            var Angle2Y = inputs[(int)InputId.Angle2Y].Eval(context).Value;",
        "            var Angle2Z = inputs[(int)InputId.Angle2Z].Eval(context).Value;",
        "            var Angle2 = new Vector3(Angle2X, Angle2Y, Angle2Z);",
        "            var SmoothDistX = inputs[(int)InputId.SmoothDistX].Eval(context).Value;",
        "            var SmoothDistY = inputs[(int)InputId.SmoothDistY].Eval(context).Value;",
        "            var SmoothDistZ = inputs[(int)InputId.SmoothDistZ].Eval(context).Value;",
        "            var SmoothDist = new Vector3(SmoothDistX, SmoothDistY, SmoothDistZ);",
        "            var DisplacementImage = inputs[(int)InputId.DisplacementImage].Eval(context).Image; // Needs to be checked for null!",
        "            //<<< _params",
        "",
        "            if (Scene.Func.Changed || _mesh.Vertices == null)",
        "            {",
        "                //Logger.Info(this, \"collect meshes\");",
        "                _meshCollector.Collect(Scene);",
        "                Scene.Func.Changed = false;",
        "            }",
        "",
        "            var inputMesh = _meshCollector.FirstMeshOrDefault;",
        "            if (inputMesh == null)",
        "                return;",
        "",
        "            _mesh.AttributesSize = inputMesh.AttributesSize;",
        "            _mesh.NumTriangles = inputMesh.NumTriangles;",
        "            _mesh.InputElements = inputMesh.InputElements;",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != inputMesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                if (_mesh.Vertices != null)",
        "                    _mesh.Vertices.Dispose();",
        "",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                    {",
        "                                                                        BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                        CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                        OptionFlags = ResourceOptionFlags.None,",
        "                                                                        SizeInBytes = _mesh.NumTriangles*inputMesh.AttributesSize*3,",
        "                                                                        Usage = ResourceUsage.Default",
        "                                                                    });",
        "            }",
        "",
        "            _effect.GetVariableByName(\"Boundary\").AsVector().Set(Boundary);",
        "            _effect.GetVariableByName(\"Angle1\").AsVector().Set(Angle1);",
        "            _effect.GetVariableByName(\"Angle2\").AsVector().Set(Angle2);",
        "            _effect.GetVariableByName(\"SmoothDist\").AsVector().Set(SmoothDist);",
        "            ",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, 0) });",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(inputMesh.Vertices, inputMesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw(_mesh.NumTriangles*3, 0);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "        private MeshCollector _meshCollector;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "691bca70-f12f-471c-a6c4-b55d3a9c5df8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "444f8c35-5da9-4c02-ab4e-7423223476cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "24d5df53-adca-4810-9d38-f3b6136ca766",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "691bca70-f12f-471c-a6c4-b55d3a9c5df8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f64a97a1-e032-4236-8cdf-f16b90d82821",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "691bca70-f12f-471c-a6c4-b55d3a9c5df8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3f1c43c1-8f79-4f03-a29c-11ef8f139fc3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "691bca70-f12f-471c-a6c4-b55d3a9c5df8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8ccab831-32fe-40da-8109-6c6a27136616",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "691bca70-f12f-471c-a6c4-b55d3a9c5df8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6d4e2e26-a015-4d26-9a81-2efded450f06",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "691bca70-f12f-471c-a6c4-b55d3a9c5df8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "343a5ab8-7cf0-434f-bbfc-2cc7c92a272c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "691bca70-f12f-471c-a6c4-b55d3a9c5df8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "56a1f1ae-c5ff-4d9b-a8db-2f7cf3e5f1d4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "691bca70-f12f-471c-a6c4-b55d3a9c5df8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "41698d9c-3298-4e12-87eb-7106cddfc107",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "691bca70-f12f-471c-a6c4-b55d3a9c5df8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "41a73acf-3a4c-41fc-9b6e-019fa87c0b2c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "691bca70-f12f-471c-a6c4-b55d3a9c5df8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "aa65e165-3aae-44e4-9d3d-3d5b7901ef01",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "691bca70-f12f-471c-a6c4-b55d3a9c5df8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b1246577-753b-4212-b1d0-29446843a2de",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "691bca70-f12f-471c-a6c4-b55d3a9c5df8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "07b4eb6b-1f01-403e-9863-f6b9041c1f03",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "691bca70-f12f-471c-a6c4-b55d3a9c5df8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "53041aa8-4e38-4abe-a694-43abef91e1ad",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "691bca70-f12f-471c-a6c4-b55d3a9c5df8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "df446a8b-52e3-47aa-b38d-bdb6da4ff87c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "691bca70-f12f-471c-a6c4-b55d3a9c5df8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c9c0a118-8bd1-4748-aab8-f57786a8cf59",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "691bca70-f12f-471c-a6c4-b55d3a9c5df8"
    }
  ]
}