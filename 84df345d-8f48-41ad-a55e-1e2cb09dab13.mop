{
  "Name": "ASCIIFilterYUV",
  "_id": "84df345d-8f48-41ad-a55e-1e2cb09dab13",
  "Namespace": "user.tenfour",
  "Description": "uses a YUV-only font map instead of sub-character font.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "b8f2266e-f9a8-49e0-996f-def074ac2f9c",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D Image;",
          "float Scale;",
          "//<<< _parameters\r",
          "Texture2D MapImage;\r",
          "float2 CharSize;\r",
          "float ValuesPerTile;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float2 texCoord : TEXCOORD;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float2 texCoord: TEXCOORD0;\r",
          "};\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "#define Round(c) (floor((c)+.5)\r",
          "\r",
          "\r",
          "float3 RGBtoYCbCr(float3 rgb)\r",
          "{\r",
          "    return float3(\r",
          "        (0.2989 * rgb.r + 0.5866 * rgb.g + 0.1145 * rgb.b),\r",
          "        (-0.1687 * rgb.r - 0.3313 * rgb.g + 0.5000 * rgb.b) + .5,\r",
          "        (0.5000 * rgb.r - 0.4184 * rgb.g - 0.0816 * rgb.b) + .5\r",
          "    );\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    // the upper-left pixel position of the character-sized cell.\r",
          "    float2 ScaledCharSize = CharSize * Scale;\r",
          "    int2 srcCellOrigin = floor(input.pos.xy / ScaledCharSize) * ScaledCharSize;// pixel position of the cell upper left\r",
          "    int2 srcCellPos = input.pos.xy - srcCellOrigin; // pixel position within this cell, 0-ScaledCharSize\r",
          "    float2 HalfTileSize = ScaledCharSize / 2.;\r",
          "    srcCellPos /= Scale;// now in coords that play well with the font texture\r",
          "    \r",
          "    float mapW, mapH;\r",
          "    MapImage.GetDimensions(mapW, mapH);\r",
          "    float2 MapCellCount = float2(mapW, mapH) / CharSize;\r",
          "    \r",
          "    //float3 cellSrcColor = float3(0,0,0);\r",
          "\r",
          "    // sample in the cell to determine the \"key\" \"ID\".\r",
          "    //float2 tileIndex = float2(tx,ty);\r",
          "    //float2 tilePos = (tileIndex / TilesPerChar) * ScaledCharSize; // pixel position of the upper-left corner of this tile relative to the char cell\r",
          "    float3 srcColor = Image.Load(int3(srcCellOrigin + HalfTileSize + .5, 0)).rgb; // sample the center-ish pix of this tile\r",
          "    float3 yuv = RGBtoYCbCr(srcColor);\r",
          "\r",
          "    // figure out which \"ID\" this value corresponds to. so we need to transform grayscale val\r",
          "    // to integer 0-ValuesPerTile.\r",
          "    // (val - segCenter) would give us the boundary. for example between 0-1 with 2 segments, the center vals are .25 and .75.\r",
          "    // subtract the center and you get .0 and .5 where you could multiply by segCount and get the proper seg of 0,1.\r",
          "    // however let's not subtract the center, but rather segCenter*.5. Then after integer floor rounding, it will be the correct\r",
          "    // value regardless of scale or any rounding issues.\r",
          "    float halfSegCenter = 0.25 / ValuesPerTile;\r",
          "    \r",
          "    yuv -= halfSegCenter;\r",
          "    yuv = clamp(yuv, 0, 1);\r",
          "    yuv *= ValuesPerTile;\r",
          "    yuv = floor(yuv);\r",
          "    \r",
          "    int ID = yuv.z;\r",
          "    ID *= ValuesPerTile;\r",
          "    ID += yuv.y;\r",
          "    ID *= ValuesPerTile;\r",
          "    ID += yuv.x;\r",
          "    \r",
          "/*    val -= halfSegCenter;\r",
          "    val = clamp(val,0,1);\r",
          "    val *= ValuesPerTile;\r",
          "    ID *= ValuesPerTile;\r",
          "    ID += floor(val);// thisTileID;\r",
          "*/\r",
          "    // clamp ID for sanity.\r",
          "    int maxID = MapCellCount.x * MapCellCount.y;\r",
          "    ID = clamp(ID, 0, maxID - 1);\r",
          "\r",
          "    // ID is now calculated.\r",
          "    int2 mapCell = int2(0, ID / MapCellCount.x);\r",
          "    mapCell.x = ID - (mapCell.y * MapCellCount.x);\r",
          "\r",
          "    float3 fontColor = MapImage.Load(int3(mapCell * CharSize + srcCellPos, 0)).rgb;\r",
          "\r",
          "    return float4(fontColor,1);\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "f72840a8-9d9b-4d49-ae06-a9f581a7402c",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Map",
      "MetaInstanceID": "dacedc30-8b90-4a68-be29-6daf0a17fb4a",
      "DefaultValue": {
        "Type": "Dynamic",
        "Value": "Framefield.Core.Dynamic"
      },
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scale",
      "MetaInstanceID": "e21ed7ac-a3f3-4651-bcfa-e79f3e149adb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "2"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "INTEGRAL.\r\n",
      "Min": "0.01",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "faaad7ac-7d19-4e1f-846d-6f6f0385c426",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "0c325c9b-5b4f-4b31-a895-4a15fe1473d9",
      "MetaID": "f0a3bebb-b1d7-4764-883e-8fcd5dd6b154",
      "Name": "ASCIIFilterYUVFunc",
      "Version": "1fa43411-620d-4415-9356-c7095fd450ff",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.IDf0a3bebb_b1d7_4764_883e_8fcd5dd6b154",
        "{",
        "    public class Class_ASCIIFilterYUV : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Scale = 2,",
        "            Map = 3",
        "        }",
        "        //<<< _inputids",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Image = inputs[(int)InputId.Image].Eval(context).Image; // Needs to be checked for null!",
        "            var Scale = inputs[(int)InputId.Scale].Eval(context).Value;",
        "            var Map = inputs[(int)InputId.Map].Eval(context).Dynamic;  // Needs to be checked for null!",
        "            //<<< _params",
        "",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"Scale\").AsScalar().Set(Scale);",
        "                //<<< _setup",
        "",
        "                    using (var MapImageView = new ShaderResourceView(context.D3DDevice, Map[\"Image\"]))",
        "                    {",
        "                        //Logger.Debug(this,\"MapImageView is {0}\", MapImageView.GetType());",
        "                        _effect.GetVariableByName(\"MapImage\").AsShaderResource().SetResource(MapImageView);",
        "                ",
        "                        _effect.GetVariableByName(\"CharSize\").AsVector().Set(Map[\"CharSize\"]);",
        "                        //_effect.GetVariableByName(\"TilesPerChar\").AsVector().Set(Map[\"TilesPerChar\"]);",
        "                        _effect.GetVariableByName(\"ValuesPerTile\").AsScalar().Set(Map[\"ValuesPerTile\"]);",
        "                        //_effect.GetVariableByName(\"MapCellCount\").AsVector().Set(Map[\"MapCellCount\"]);",
        "",
        "                        Render(context);",
        "                    }",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0c325c9b-5b4f-4b31-a895-4a15fe1473d9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "faaad7ac-7d19-4e1f-846d-6f6f0385c426"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b8f2266e-f9a8-49e0-996f-def074ac2f9c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0c325c9b-5b4f-4b31-a895-4a15fe1473d9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f72840a8-9d9b-4d49-ae06-a9f581a7402c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0c325c9b-5b4f-4b31-a895-4a15fe1473d9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e21ed7ac-a3f3-4651-bcfa-e79f3e149adb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0c325c9b-5b4f-4b31-a895-4a15fe1473d9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "dacedc30-8b90-4a68-be29-6daf0a17fb4a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0c325c9b-5b4f-4b31-a895-4a15fe1473d9"
    }
  ]
}