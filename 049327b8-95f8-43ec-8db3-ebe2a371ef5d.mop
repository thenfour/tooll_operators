{
  "Name": "GaussBlurEx",
  "_id": "049327b8-95f8-43ec-8db3-ebe2a371ef5d",
  "Namespace": "user.tenfour",
  "Description": "extra control",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "8e84008c-738d-4633-9163-a1401fe63e97",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D Image;",
          "float Glow;",
          "float Size;",
          "float NumberOfSamples;",
          "float2 Threshold;",
          "float4 BlurColor;",
          "float DryBlendMode;",
          "float3 BeforeClamp;",
          "//<<< _parameters\r",
          "float widthToHeight;\r",
          "float2 direction;\r",
          "\r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "static const int NUMWT = 10;\r",
          "static const float Gauss[NUMWT] = { 0.93, 0.86, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1 };\r",
          "\r",
          "float4 ApplyThresh(float4 inp)\r",
          "{\r",
          "    // calculate threshold edges.\r",
          "    //float2 th = float2(min(Threshold.x, Threshold.y), max(Threshold.x, Threshold.y));\r",
          "    //th.x\r",
          "    float leftEdge = clamp(Threshold.x - Threshold.y, 0, 1);//x = center, y = range\r",
          "    float rightEdge = clamp(Threshold.x + Threshold.y, 0, 1);\r",
          "    \r",
          "    /*if (rightEdge- leftEdge< 0.0001) {\r",
          "        return step(inp, leftEdge);\r",
          "    }*/\r",
          "    inp -= leftEdge;\r",
          "    inp /= rightEdge - leftEdge;\r",
          "    inp = clamp(inp, 0, 1);\r",
          "    return inp;\r",
          "}\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float2 dir = direction;\r",
          "    dir *= 0.01*Size/NumberOfSamples;\r",
          "    dir.y *= widthToHeight;\r",
          "\r",
          "    float2 pos = dir;\r",
          "    float4 orig = txDiffuse.Sample(samLinear, input.texCoord);\r",
          "    float4 c = orig;\r",
          "    float totalWeight = 1;\r",
          "    for (int i = 0; i < NumberOfSamples; ++i)\r",
          "    {\r",
          "        float index = (float)i*(NUMWT - 1)/NumberOfSamples;\r",
          "        float weight = lerp(Gauss[(int)index], Gauss[(int)index + 1], frac(index));\r",
          "        c += txDiffuse.Sample(samLinear, input.texCoord + pos)*weight;\r",
          "        c += txDiffuse.Sample(samLinear, input.texCoord - pos)*weight;\r",
          "        pos += dir;\r",
          "        totalWeight += 2*weight;\r",
          "    }\r",
          "\r",
          "    //c.rgb = float3(Offset, Offset, Offset) + c.rgb/totalWeight*Glow;\r",
          "    //c.a = 1.0;\r",
          "    c = /*Offset +*/ c/totalWeight*Glow;\r",
          "    c = clamp(c, 0,1);\r",
          "    c = ApplyThresh(c);\r",
          "    \r",
          "    // color blur\r",
          "    c *= BlurColor;\r",
          "    \r",
          "    // blend in dry image\r",
          "    switch((int)DryBlendMode) {\r",
          "        case 0:// add'n'clamp\r",
          "            break;\r",
          "        case 1:// add'n'clamp\r",
          "            c += orig;\r",
          "            c.rgb += BeforeClamp.x;\r",
          "            c.rgb *= BeforeClamp.y;\r",
          "            c.rgb = pow(max(0, c.rgb), BeforeClamp.z);\r",
          "            c = clamp(c, 0, 1);\r",
          "            break;\r",
          "        case 2:// underlay\r",
          "            c = lerp(c, orig, orig.a);\r",
          "            break;\r",
          "    }\r",
          "    \r",
          "    return c;\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "d374d0d1-6ee3-40cf-9bc4-e3e80f3c29d1",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Glow",
      "MetaInstanceID": "78390b92-9fa6-4023-be64-3f1c86853edb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10",
      "Max": "10",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size",
      "MetaInstanceID": "97bbf050-ef75-487e-84f8-c214c953c1c8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Number Of Samples",
      "MetaInstanceID": "adc7ed59-9fb4-4030-aef5-273b37472b30",
      "DefaultValue": {
        "Type": "Float",
        "Value": "9"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Threshold.Center",
      "MetaInstanceID": "3cf1518f-1878-462c-9bc6-fff76ab96265",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Threshold.Range",
      "MetaInstanceID": "b3f1f853-c182-4a37-ad35-a17987e8ad7b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0.001",
      "Max": "1",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DryBlendMode",
      "MetaInstanceID": "08bffee6-6a99-449a-9a10-ae10917a9146",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "No",
          "Value": "0"
        },
        {
          "Name": "AddNClamp",
          "Value": "1"
        },
        {
          "Name": "FillAlphaLikeDropshadow",
          "Value": "2"
        }
      ]
    },
    {
      "Name": "BlurColor.R",
      "MetaInstanceID": "7116cdb1-85dc-4f19-826f-46e27ed26e1a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BlurColor.G",
      "MetaInstanceID": "deb9ae66-7991-482f-b19f-cbad161596d8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BlurColor.B",
      "MetaInstanceID": "6e8990d6-ab86-4395-9ae6-9369376f485d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BlurColor.A",
      "MetaInstanceID": "991fd4c4-605e-4f7d-8a47-892fc43b500d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BeforeClamp.X",
      "MetaInstanceID": "e942d4ba-aea7-4fbb-93c5-e55aec2b97d4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BeforeClamp.Mul",
      "MetaInstanceID": "20b82502-3590-41b5-b137-473c2d90ff43",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BeforeClamp.Pow",
      "MetaInstanceID": "0a24ff47-b5ff-466c-82d9-957c595f6314",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "90fd79e0-baf0-4c26-bd26-aa8d58c4bd75",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "1fb84b16-89f4-488a-b2d1-4b7a3961410b",
      "MetaID": "25a6b226-4fbb-4fa8-a5f8-cc862744b61f",
      "Name": "GaussBlurExFunc",
      "Version": "7efc5af1-9099-4e3c-bc44-ec15edd9d7af",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using SharpDX.DXGI;",
        "",
        "namespace Framefield.Core.ID25a6b226_4fbb_4fa8_a5f8_cc862744b61f",
        "{",
        "    public class Class_GaussBlurEx : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Glow = 2,",
        "            Size = 3,",
        "            NumberOfSamples = 4,",
        "            ThresholdCenter = 5,",
        "            ThresholdRange = 6,",
        "            BlurColorR = 7,",
        "            BlurColorG = 8,",
        "            BlurColorB = 9,",
        "            BlurColorA = 10,",
        "            DryBlendMode = 11,",
        "            BeforeClampX = 12,",
        "            BeforeClampMul = 13,",
        "            BeforeClampPow = 14",
        "        }",
        "        //<<< _inputids",
        "",
        "        protected override bool NeedsDepth { get { return false; } }",
        "",
        "        protected override bool BuildRenderTarget(SharpDX.DXGI.Format imageBufferFormat)",
        "        {",
        "            var pass1ResourceChanged = ResourceManager.ValidateRenderTargetResource(ref _pass1RenderTargetResource, OperatorPart, D3DDevice.Device,",
        "                                                                                    (int)_usedViewport.Width, (int)_usedViewport.Height);",
        "            if (pass1ResourceChanged)",
        "            {",
        "                Utilities.DisposeObj(ref _pass1RenderTargetView);",
        "                _pass1RenderTargetView = new RenderTargetView(D3DDevice.Device, _pass1RenderTargetResource.Texture);",
        "            }",
        "",
        "            return base.BuildRenderTarget(imageBufferFormat) || pass1ResourceChanged;",
        "        }",
        "",
        "        public override void Dispose()",
        "        {",
        "            ResourceManager.Dispose(_pass1RenderTargetResource);",
        "            Utilities.DisposeObj(ref _pass1RenderTargetView);",
        "            base.Dispose();",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            return PrepareAndEvalOnChange(context, () =>",
        "            {",
        "                //>>> _params",
        "                var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "                var Image = inputs[(int)InputId.Image].Eval(context).Image; // Needs to be checked for null!",
        "                var Glow = inputs[(int)InputId.Glow].Eval(context).Value;",
        "                var Size = inputs[(int)InputId.Size].Eval(context).Value;",
        "                var NumberOfSamples = inputs[(int)InputId.NumberOfSamples].Eval(context).Value;",
        "                var ThresholdCenter = inputs[(int)InputId.ThresholdCenter].Eval(context).Value;",
        "                var ThresholdRange = inputs[(int)InputId.ThresholdRange].Eval(context).Value;",
        "                var Threshold = new Vector2(ThresholdCenter, ThresholdRange);",
        "                var BlurColorR = inputs[(int)InputId.BlurColorR].Eval(context).Value;",
        "                var BlurColorG = inputs[(int)InputId.BlurColorG].Eval(context).Value;",
        "                var BlurColorB = inputs[(int)InputId.BlurColorB].Eval(context).Value;",
        "                var BlurColorA = inputs[(int)InputId.BlurColorA].Eval(context).Value;",
        "                var BlurColor = new Color4(BlurColorR, BlurColorG, BlurColorB, BlurColorA);",
        "                var DryBlendMode = (int) inputs[(int)InputId.DryBlendMode].Eval(context).Value;",
        "                var BeforeClampX = inputs[(int)InputId.BeforeClampX].Eval(context).Value;",
        "                var BeforeClampMul = inputs[(int)InputId.BeforeClampMul].Eval(context).Value;",
        "                var BeforeClampPow = inputs[(int)InputId.BeforeClampPow].Eval(context).Value;",
        "                var BeforeClamp = new Vector3(BeforeClampX, BeforeClampMul, BeforeClampPow);",
        "                //<<< _params",
        "",
        "                //>>> _setup",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"Glow\").AsScalar().Set(Glow);",
        "                    _effect.GetVariableByName(\"Size\").AsScalar().Set(Size);",
        "                    _effect.GetVariableByName(\"NumberOfSamples\").AsScalar().Set(NumberOfSamples);",
        "                    _effect.GetVariableByName(\"Threshold\").AsVector().Set(new Vector2(ThresholdCenter, ThresholdRange));",
        "                    _effect.GetVariableByName(\"BlurColor\").AsVector().Set(new Vector4(BlurColorR, BlurColorG, BlurColorB, BlurColorA));",
        "                    _effect.GetVariableByName(\"DryBlendMode\").AsScalar().Set(DryBlendMode);",
        "                    _effect.GetVariableByName(\"BeforeClamp\").AsVector().Set(new Vector3(BeforeClampX, BeforeClampMul, BeforeClampPow));",
        "                //<<< _setup",
        "    ",
        "                    var D3DDevice = context.D3DDevice;",
        "                    var cameraProjection = Matrix.OrthoLH(1, 1, -100, 100);",
        "                    var worldToCamera = Matrix.LookAtLH(new Vector3(0, 0, -5), new Vector3(0, 0, 0), new Vector3(0, 1, 0));",
        "    ",
        "                    _effect.GetVariableByName(\"widthToHeight\").AsScalar().Set((float)_usedViewport.Width/_usedViewport.Height);",
        "                    //_effect.GetVariableByName(\"Size\").AsScalar().Set(Size);",
        "                    //_effect.GetVariableByName(\"Glow\").AsScalar().Set(Glow);",
        "                    //_effect.GetVariableByName(\"Offset\").AsScalar().Set(Offset);",
        "                    //_effect.GetVariableByName(\"NumberOfSamples\").AsScalar().Set(NumberOfSamples);",
        "    ",
        "                    //pass 1 (horizontal)",
        "                    D3DDevice.ImmediateContext.ClearRenderTargetView(_pass1RenderTargetView, new SharpDX.Color4(0, 0, 0, 1));",
        "    ",
        "                    var pass1SubContext = new OperatorPartContext(context);",
        "                    pass1SubContext.DepthStencilView = null;",
        "                    pass1SubContext.RenderTargetView = _pass1RenderTargetView;",
        "                    pass1SubContext.Effect = _effect;",
        "                    pass1SubContext.Renderer = _renderer;",
        "                    pass1SubContext.BlendState = OperatorPartContext.DefaultRenderer.DisabledBlendState;",
        "                    pass1SubContext.InputLayout = context.Renderer.ScreenQuadInputLayout;",
        "                    pass1SubContext.CameraProjection = cameraProjection;",
        "                    pass1SubContext.WorldToCamera = worldToCamera;",
        "                    pass1SubContext.ObjectTWorld = Matrix.Identity;",
        "                    using (var textureView = new ShaderResourceView(D3DDevice, Image))",
        "                    {",
        "                        pass1SubContext.Texture0 = textureView;",
        "                        pass1SubContext.Renderer.SetupEffect(pass1SubContext);",
        "    ",
        "                        _effect.GetVariableByName(\"direction\").AsVector().Set(new Vector2(1, 0));",
        "    ",
        "                        pass1SubContext.Renderer.Render(pass1SubContext.Renderer._screenQuadMesh, pass1SubContext);",
        "                    }",
        "    ",
        "                    //pass 2 (vertical)",
        "                    D3DDevice.ImmediateContext.ClearRenderTargetView(_renderTargetView, new SharpDX.Color4(0, 0, 0, 1));",
        "    ",
        "                    var pass2SubContext = new OperatorPartContext(context);",
        "                    pass2SubContext.DepthStencilView = null;",
        "                    pass2SubContext.RenderTargetView = _renderTargetView;",
        "                    pass2SubContext.Effect = _effect;",
        "                    pass2SubContext.Renderer = _renderer;",
        "                    pass2SubContext.BlendState = OperatorPartContext.DefaultRenderer.DisabledBlendState;",
        "                    pass2SubContext.InputLayout = context.Renderer.ScreenQuadInputLayout;",
        "                    pass2SubContext.CameraProjection = cameraProjection;",
        "                    pass2SubContext.WorldToCamera = worldToCamera;",
        "                    pass2SubContext.ObjectTWorld = Matrix.Identity;",
        "                    using (var textureView = new ShaderResourceView(D3DDevice, _pass1RenderTargetResource.Texture))",
        "                    {",
        "                        pass2SubContext.Texture0 = textureView;",
        "                        pass2SubContext.Renderer.SetupEffect(pass2SubContext);",
        "    ",
        "                        _effect.GetVariableByName(\"direction\").AsVector().Set(new Vector2(0, 1));",
        "    ",
        "                        pass2SubContext.Renderer.Render(pass2SubContext.Renderer._screenQuadMesh, pass2SubContext);",
        "                    }",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "        Resource _pass1RenderTargetResource = null;",
        "        RenderTargetView _pass1RenderTargetView = null;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1fb84b16-89f4-488a-b2d1-4b7a3961410b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "90fd79e0-baf0-4c26-bd26-aa8d58c4bd75"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8e84008c-738d-4633-9163-a1401fe63e97",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1fb84b16-89f4-488a-b2d1-4b7a3961410b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d374d0d1-6ee3-40cf-9bc4-e3e80f3c29d1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1fb84b16-89f4-488a-b2d1-4b7a3961410b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "78390b92-9fa6-4023-be64-3f1c86853edb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1fb84b16-89f4-488a-b2d1-4b7a3961410b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "97bbf050-ef75-487e-84f8-c214c953c1c8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1fb84b16-89f4-488a-b2d1-4b7a3961410b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "adc7ed59-9fb4-4030-aef5-273b37472b30",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1fb84b16-89f4-488a-b2d1-4b7a3961410b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3cf1518f-1878-462c-9bc6-fff76ab96265",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1fb84b16-89f4-488a-b2d1-4b7a3961410b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b3f1f853-c182-4a37-ad35-a17987e8ad7b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1fb84b16-89f4-488a-b2d1-4b7a3961410b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7116cdb1-85dc-4f19-826f-46e27ed26e1a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1fb84b16-89f4-488a-b2d1-4b7a3961410b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "deb9ae66-7991-482f-b19f-cbad161596d8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1fb84b16-89f4-488a-b2d1-4b7a3961410b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6e8990d6-ab86-4395-9ae6-9369376f485d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1fb84b16-89f4-488a-b2d1-4b7a3961410b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "991fd4c4-605e-4f7d-8a47-892fc43b500d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1fb84b16-89f4-488a-b2d1-4b7a3961410b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "08bffee6-6a99-449a-9a10-ae10917a9146",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1fb84b16-89f4-488a-b2d1-4b7a3961410b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e942d4ba-aea7-4fbb-93c5-e55aec2b97d4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1fb84b16-89f4-488a-b2d1-4b7a3961410b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "20b82502-3590-41b5-b137-473c2d90ff43",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1fb84b16-89f4-488a-b2d1-4b7a3961410b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0a24ff47-b5ff-466c-82d9-957c595f6314",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1fb84b16-89f4-488a-b2d1-4b7a3961410b"
    }
  ]
}