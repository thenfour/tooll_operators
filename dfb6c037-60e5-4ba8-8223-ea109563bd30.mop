{
  "Name": "GroundPlaneXXX",
  "_id": "dfb6c037-60e5-4ba8-8223-ea109563bd30",
  "Namespace": "user.tenfour.shaders",
  "Description": "ray tracing this kind of thing is just stupid. use simple geometry and transform UV\r\n",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "8b8997ae-64ad-4b08-8068-f42718ffbafa",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "float2 Radius;",
          "float3 CamPos;",
          "float Iterations;",
          "float TriDepth;",
          "float2 Thickness;",
          "float Rotate;",
          "//<<< _parameters\r",
          "\r",
          "const float iTime;\r",
          "static const float PI = atan(1.)*4.;\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "#define iResolution RenderTargetSize\r",
          "#define vec2 float2\r",
          "#define vec3 float3\r",
          "#define vec4 float4\r",
          "#define mat2 float2x2\r",
          "#define fract frac\r",
          "#define mod fmod\r",
          "#define mix lerp\r",
          "#define vec20 (float2(0,0))\r",
          "#define vec30 (float3(0,0,0))\r",
          "#define vec40 (float4(0,0,0,0))\r",
          "#define vec21 (float2(1,1))\r",
          "#define vec31 (float3(1,1,1))\r",
          "#define vec41 (float4(1,1,1,1))\r",
          "#define vec2x(x) (float2((x),(x)))\r",
          "#define vec3x(x) (float3((x),(x),(x)))\r",
          "#define vec4x(x) (float4((x),(x),(x),(x)))\r",
          "\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;//ANISOTROPIC;",
          "    AddressU = Wrap;",
          "    AddressV = Wrap;",
          "};",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>_>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<_<< _VS\r",
          "\r",
          "//>>> PS\r",
          "// The MIT License\r",
          "// Copyright Â© 2017 Inigo Quilez\r",
          "// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r",
          "\r",
          "\r",
          "// Similar to https://www.shadertoy.com/view/XlXBWs, but with a triangular filter kernel,\r",
          "// which produces less flickering animations that a box filter. Luckily, it's still easily\r",
          "// integrable analytically! Full description in this article:\r",
          "//\r",
          "// http://iquilezles.org/www/articles/checkerfiltering/checkerfiltering.htm\r",
          "//\r",
          "// Inspired by http://http.developer.nvidia.com/GPUGems/gpugems_ch25.html and improved\r",
          "\r",
          "  \r",
          "// checker, 2D, box filter: https://www.shadertoy.com/view/XlcSz2\r",
          "// checker, 3D, box filter: https://www.shadertoy.com/view/XlXBWs\r",
          "// checker, 3D, tri filter: https://www.shadertoy.com/view/llffWs\r",
          "// grid,    2D, box filter: https://www.shadertoy.com/view/XtBfzz\r",
          "// xor,     2D, box filter: https://www.shadertoy.com/view/tdBXRW\r",
          "\r",
          "// --- analytically box-filtered checkerboard ---\r",
          "\r",
          "float checkersTextureGradBox( in vec2 p, in vec2 ddx, in vec2 ddy )\r",
          "{\r",
          "    // filter kernel\r",
          "    vec2 w = max(abs(ddx), abs(ddy)) + 0.01;  \r",
          "    // analytical integral (box filter)\r",
          "    vec2 i = 2.0*(abs(fract((p-0.5*w)/2.0)-0.5)-abs(fract((p+0.5*w)/2.0)-0.5))/w;\r",
          "    // xor pattern\r",
          "    return 0.5 - 0.5*i.x*i.y;                  \r",
          "}\r",
          "\r",
          "// --- unfiltered checkerboard ---\r",
          "/*\r",
          "float checkersTexture( in vec2 p )\r",
          "{\r",
          "    vec2 q = floor(p);\r",
          "    return mod( q.x+q.y, 2.0 );            // xor pattern\r",
          "}\r",
          "*/\r",
          "\r",
          "//===============================================================================================\r",
          "//===============================================================================================\r",
          "// sphere implementation\r",
          "//===============================================================================================\r",
          "//===============================================================================================\r",
          "/*\r",
          "float softShadowSphere( in vec3 ro, in vec3 rd, in vec4 sph )\r",
          "{\r",
          "    vec3 oc = sph.xyz - ro;\r",
          "    float b = dot( oc, rd );\r",
          "\t\r",
          "    float res = 1.0;\r",
          "    if( b>0.0 )\r",
          "    {\r",
          "        float h = dot(oc,oc) - b*b - sph.w*sph.w;\r",
          "        res = smoothstep( 0.0, 1.0, 2.0*h/b );\r",
          "    }\r",
          "    return res;\r",
          "}\r",
          "\r",
          "float occSphere( in vec4 sph, in vec3 pos, in vec3 nor )\r",
          "{\r",
          "    vec3 di = sph.xyz - pos;\r",
          "    float l = length(di);\r",
          "    return 1.0 - dot(nor,di/l)*sph.w*sph.w/(l*l); \r",
          "}\r",
          "\r",
          "float iSphere( in vec3 ro, in vec3 rd, in vec4 sph )\r",
          "{\r",
          "    float t = -1.0;\r",
          "\tvec3  ce = ro - sph.xyz;\r",
          "\tfloat b = dot( rd, ce );\r",
          "\tfloat c = dot( ce, ce ) - sph.w*sph.w;\r",
          "\tfloat h = b*b - c;\r",
          "\tif( h>0.0 )\r",
          "\t{\r",
          "\t\tt = -b - sqrt(h);\r",
          "\t}\r",
          "\t\r",
          "\treturn t;\r",
          "}*/\r",
          "\r",
          "//===============================================================================================\r",
          "//===============================================================================================\r",
          "// scene\r",
          "//===============================================================================================\r",
          "//===============================================================================================\r",
          "\r",
          "\r",
          "// spheres\r",
          "static const vec4 sc0 = vec4(  3.0, 0.5, 0.0, 0.5 );\r",
          "static const vec4 sc1 = vec4( -4.0, 2.0,-5.0, 2.0 );\r",
          "static const vec4 sc2 = vec4( -4.0, 2.0, 5.0, 2.0 );\r",
          "static const vec4 sc3 = vec4(-30.0, 8.0, 0.0, 8.0 );\r",
          "\r",
          "float intersect( vec3 ro, vec3 rd, out vec3 pos, out vec3 nor, out float occ, out int matid )\r",
          "{\r",
          "    // raytrace\r",
          "\tfloat tmin = 10000.0;\r",
          "\tnor = vec3x(0.0);\r",
          "\tocc = 1.0;\r",
          "\tpos = vec3x(0.0);\r",
          "    matid = -1;\r",
          "\t\r",
          "\t// raytrace-plane\r",
          "\tfloat h = (0.01-ro.y)/rd.y;\r",
          "\tif( h>0.0 ) \r",
          "\t{ \r",
          "\t\ttmin = h; \r",
          "\t\tnor = vec3(0.0,1.0,0.0); \r",
          "\t\tpos = ro + h*rd;\r",
          "\t\tmatid = 0;\r",
          "\t\t/*occ = occSphere( sc0, pos, nor ) * \r",
          "\t\t\t  occSphere( sc1, pos, nor ) *\r",
          "\t\t\t  occSphere( sc2, pos, nor ) *\r",
          "\t\t\t  occSphere( sc3, pos, nor );*/\r",
          "\t}\r",
          "\r",
          "\r",
          "\t// raytrace-sphere\r",
          "\t/*h = iSphere( ro, rd, sc0 );\r",
          "\tif( h>0.0 && h<tmin ) \r",
          "\t{ \r",
          "\t\ttmin = h; \r",
          "        pos = ro + h*rd;\r",
          "\t\tnor = normalize(pos-sc0.xyz); \r",
          "\t\tmatid = 1;\r",
          "\t\tocc = 0.5 + 0.5*nor.y;\r",
          "\t}\r",
          "\r",
          "\th = iSphere( ro, rd, sc1 );\r",
          "\tif( h>0.0 && h<tmin ) \r",
          "\t{ \r",
          "\t\ttmin = h; \r",
          "        pos = ro + tmin*rd;\r",
          "\t\tnor = normalize(pos-sc1.xyz); \r",
          "\t\tmatid = 2;\r",
          "\t\tocc = 0.5 + 0.5*nor.y;\r",
          "\t}\r",
          "\r",
          "\th = iSphere( ro, rd, sc2 );\r",
          "\tif( h>0.0 && h<tmin ) \r",
          "\t{ \r",
          "\t\ttmin = h; \r",
          "        pos = ro + tmin*rd;\r",
          "\t\tnor = normalize(pos-sc2.xyz); \r",
          "\t\tmatid = 3;\r",
          "\t\tocc = 0.5 + 0.5*nor.y;\r",
          "\t}\r",
          "\r",
          "\th = iSphere( ro, rd, sc3 );\r",
          "\tif( h>0.0 && h<tmin ) \r",
          "\t{ \r",
          "\t\ttmin = h; \r",
          "        pos = ro + tmin*rd;\r",
          "\t\tnor = normalize(pos-sc3.xyz); \r",
          "\t\tmatid = 4;\r",
          "\t\tocc = 0.5 + 0.5*nor.y;\r",
          "\t}\r",
          "*/\r",
          "\treturn tmin;\t\r",
          "}\r",
          "\r",
          "float atanx(float x, float y) {\r",
          "    return atan2(x, y);\r",
          "}\r",
          "\r",
          "\r",
          "vec2 texCoords( in vec3 pos, int mid )\r",
          "{\r",
          "    vec2 matuv;\r",
          "    \r",
          "    if( mid==0 )\r",
          "    {\r",
          "        matuv = pos.xz;\r",
          "    }\r",
          "    else if( mid==1 )\r",
          "    {\r",
          "        vec3 q = normalize( pos - sc0.xyz );\r",
          "        matuv = vec2( atanx(q.x,q.z), acos(q.y ) )*sc0.w;\r",
          "    }\r",
          "    else if( mid==2 )\r",
          "    {\r",
          "        vec3 q = normalize( pos - sc1.xyz );\r",
          "        matuv = vec2( atanx(q.x,q.z), acos(q.y ) )*sc1.w;\r",
          "    }\r",
          "    else if( mid==3 )\r",
          "    {\r",
          "        vec3 q = normalize( pos - sc2.xyz );\r",
          "        matuv = vec2( atanx(q.x,q.z), acos(q.y ) )*sc2.w;\r",
          "    }\r",
          "    else if( mid==4 )\r",
          "    {\r",
          "        vec3 q = normalize( pos - sc3.xyz );\r",
          "        matuv = vec2( atanx(q.x,q.z), acos(q.y ) )*sc3.w;\r",
          "    }\r",
          "\r",
          "\treturn 12.0*matuv;\r",
          "}\r",
          "\r",
          "\r",
          "void calcCamera( out vec3 ro, out vec3 ta )\r",
          "{\r",
          "\tfloat an = 0.1*sin(0.1*iTime);\r",
          "\tro = vec3( 5.0*cos(an), 0.5, 5.0*sin(an) );\r",
          "    ta = vec3( 0.0, 1.0, 0.0 );\r",
          "}\r",
          "/*\r",
          "vec3 doLighting( in vec3 pos, in vec3 nor, in float occ, in vec3 rd )\r",
          "{\r",
          "    float sh = min( min( min( softShadowSphere( pos, vec3x(0.57703), sc0 ),\r",
          "\t\t\t\t              softShadowSphere( pos, vec3x(0.57703), sc1 )),\r",
          "\t\t\t\t              softShadowSphere( pos, vec3x(0.57703), sc2 )),\r",
          "                              softShadowSphere( pos, vec3x(0.57703), sc3 ));\r",
          "\tfloat dif = clamp(dot(nor,vec3x(0.57703)),0.0,1.0);\r",
          "\tfloat bac = clamp(0.5+0.5*dot(nor,vec3(-0.707,0.0,-0.707)),0.0,1.0);\r",
          "    vec3 lin  = dif*vec3(1.50,1.40,1.30)*sh;\r",
          "\t     lin += occ*vec3(0.15,0.20,0.30);\r",
          "\t     lin += bac*vec3(0.10,0.10,0.10)*(0.2+0.8*occ);\r",
          "\r",
          "    return lin;\r",
          "}*/\r",
          "//===============================================================================================\r",
          "//===============================================================================================\r",
          "// render\r",
          "//===============================================================================================\r",
          "//===============================================================================================\r",
          "\r",
          "void calcRayForPixel( in vec2 pix, out vec3 resRo, out vec3 resRd )\r",
          "{\r",
          "\tvec2 p = (-iResolution.xy + 2.0*pix) / iResolution.y;\r",
          "\t\r",
          "     // camera movement\t\r",
          "\tvec3 ro, ta;\r",
          "\tcalcCamera( ro, ta );\r",
          "    // camera matrix\r",
          "    vec3 ww = normalize( ta - ro );\r",
          "    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\r",
          "    vec3 vv = normalize( cross(uu,ww));\r",
          "\t// create view ray\r",
          "\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\r",
          "\t\r",
          "\tresRo = ro;\r",
          "\tresRd = rd;\r",
          "}\r",
          "\r",
          "\r",
          "void mainImage( out vec4 fragColor, in vec2 fragCoord )\r",
          "{\r",
          "\tvec2 p = (-iResolution.xy + 2.0*fragCoord) / iResolution.y;\r",
          "\t\r",
          "\tvec3 ro, rd, ddx_ro, ddx_rd, ddy_ro, ddy_rd;\r",
          "\tcalcRayForPixel( fragCoord + vec2(0.0,0.0), ro, rd );\r",
          "\tcalcRayForPixel( fragCoord + vec2(1.0,0.0), ddx_ro, ddx_rd );\r",
          "\tcalcRayForPixel( fragCoord + vec2(0.0,1.0), ddy_ro, ddy_rd );\r",
          "\t\t\r",
          "    // trace\r",
          "\tvec3 pos, nor;\r",
          "\tfloat occ;\r",
          "    int mid;\r",
          "    float t = intersect( ro, rd, pos, nor, occ, mid );\r",
          "\r",
          "\tvec3 col = vec3x(0.9);\r",
          "\tif( mid!=-1 )\r",
          "\t{\r",
          "\t\r",
          "\t\t// -----------------------------------------------------------------------\r",
          "        // Because we are in the GPU, we do have access to differentials directly\r",
          "        // This wouldn't be the case in a regular raytrace.\r",
          "\t\t// It wouldn't work as well in shaders doing interleaved calculations in\r",
          "\t\t// pixels (such as some of the 3D/stereo shaders here in Shadertoy)\r",
          "\t\t// -----------------------------------------------------------------------\r",
          "\t\tvec2 uv = texCoords( pos, mid );\r",
          "\r",
          "\t\t// calc texture sampling footprint\t\t\r",
          "\t\tvec2 ddx_uv = ddx( uv ); \r",
          "        vec2 ddy_uv = ddy( uv\r",
          "        ); \r",
          "\r",
          "        \r",
          "\t\t// shading\t\t\r",
          "\t\tvec3 mate = vec3x(0.0);\r",
          "\r",
          "        //if( p.x<0.0 ) mate = vec3x(1.0)*checkersTexture( uv );\r",
          "        //else          \r",
          "        mate = vec3x(1.0)*checkersTextureGradBox( uv, ddx_uv, ddy_uv );\r",
          "            \r",
          "        // lighting\t\r",
          "\t\t//vec3 lin = doLighting( pos, nor, occ, rd );\r",
          "\r",
          "        // combine lighting with material\t\t\r",
          "\t\tcol = mate;// * lin;\r",
          "\t\t\r",
          "        // fog\t\t\r",
          "        col = mix( col, vec3x(0.9), 1.0-exp( -0.00001*t*t ) );\r",
          "\t}\r",
          "\t\r",
          "    // gamma correction\t\r",
          "\t//col = pow( col, vec3x(0.4545) );\r",
          "\r",
          "\t//col *= smoothstep( 1.0, 2.0, abs(p.x)/(2.0/iResolution.y) );\r",
          "\t\r",
          "\tfragColor = vec4( col, 1.0 );\r",
          "}\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o;\r",
          "    //input.pos.y = .5-input.pos.y;\r",
          "    mainImage(o, input.pos.xy);\r",
          "    o = clamp(o,0.,1.);\r",
          "    return o;\r",
          "}\r",
          "",
          "//<<< PS\r",
          "\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "CamPos.X",
      "MetaInstanceID": "508f1ee8-7178-4c09-904c-3084e00167c6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "CamPos.Y",
      "MetaInstanceID": "95193048-8c57-447c-8085-71a123790cd7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "CamPos.Z",
      "MetaInstanceID": "a7336d0a-2159-41fa-8abe-858bbdb4e140",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Iterations",
      "MetaInstanceID": "dd1dcc3a-a235-47ce-9c1b-ddf4827203e1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "60"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TriDepth",
      "MetaInstanceID": "9eab96fc-73fa-4880-90ae-5af7d3558ba1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.15"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "0.5",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Radius.Min",
      "MetaInstanceID": "1b7e6816-ef48-413b-881c-c5b932bc77af",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Radius.Max",
      "MetaInstanceID": "dc711317-51ed-49c9-8ead-d4cb82df6fdc",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Thickness.Min",
      "MetaInstanceID": "31b4ee97-f65d-4c62-9e47-15f0bb48e90b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Thickness.Max",
      "MetaInstanceID": "902c7374-7dab-4b0f-9d4a-a8508701b3df",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate",
      "MetaInstanceID": "bd3d3de7-0754-4360-8dc2-8407faeeb560",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "7352cb1e-902c-4003-9a9f-03928438c1ed",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "6707a09e-9dba-40df-b063-919788b0e8b9",
      "MetaID": "c559180b-0af7-4c48-b14c-cb17d89e3309",
      "Name": "GroundPlaneXXXFunc",
      "Version": "fe687bba-acb0-46ca-adfe-9a2252d8701c",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.IDc559180b_0af7_4c48_b14c_cb17d89e3309",
        "{",
        "    public class Class_GroundPlane : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            RadiusMin = 1,",
        "            RadiusMax = 2,",
        "            CamPosX = 3,",
        "            CamPosY = 4,",
        "            CamPosZ = 5,",
        "            Iterations = 6,",
        "            TriDepth = 7,",
        "            ThicknessMin = 8,",
        "            ThicknessMax = 9,",
        "            Rotate = 10",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var RadiusMin = inputs[(int)InputId.RadiusMin].Eval(context).Value;",
        "            var RadiusMax = inputs[(int)InputId.RadiusMax].Eval(context).Value;",
        "            var Radius = new Vector2(RadiusMin, RadiusMax);",
        "            var CamPosX = inputs[(int)InputId.CamPosX].Eval(context).Value;",
        "            var CamPosY = inputs[(int)InputId.CamPosY].Eval(context).Value;",
        "            var CamPosZ = inputs[(int)InputId.CamPosZ].Eval(context).Value;",
        "            var CamPos = new Vector3(CamPosX, CamPosY, CamPosZ);",
        "            var Iterations = inputs[(int)InputId.Iterations].Eval(context).Value;",
        "            var TriDepth = inputs[(int)InputId.TriDepth].Eval(context).Value;",
        "            var ThicknessMin = inputs[(int)InputId.ThicknessMin].Eval(context).Value;",
        "            var ThicknessMax = inputs[(int)InputId.ThicknessMax].Eval(context).Value;",
        "            var Thickness = new Vector2(ThicknessMin, ThicknessMax);",
        "            var Rotate = inputs[(int)InputId.Rotate].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Radius\").AsVector().Set(new Vector2(RadiusMin, RadiusMax));",
        "                    _effect.GetVariableByName(\"CamPos\").AsVector().Set(new Vector3(CamPosX, CamPosY, CamPosZ));",
        "                    _effect.GetVariableByName(\"Iterations\").AsScalar().Set(Iterations);",
        "                    _effect.GetVariableByName(\"TriDepth\").AsScalar().Set(TriDepth);",
        "                    _effect.GetVariableByName(\"Thickness\").AsVector().Set(new Vector2(ThicknessMin, ThicknessMax));",
        "                    _effect.GetVariableByName(\"Rotate\").AsScalar().Set(Rotate);",
        "                //<<< _setup",
        "",
        "                _effect.GetVariableByName(\"iTime\").AsScalar().Set(context.Time);",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6707a09e-9dba-40df-b063-919788b0e8b9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7352cb1e-902c-4003-9a9f-03928438c1ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8b8997ae-64ad-4b08-8068-f42718ffbafa",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6707a09e-9dba-40df-b063-919788b0e8b9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1b7e6816-ef48-413b-881c-c5b932bc77af",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6707a09e-9dba-40df-b063-919788b0e8b9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "dc711317-51ed-49c9-8ead-d4cb82df6fdc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6707a09e-9dba-40df-b063-919788b0e8b9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "508f1ee8-7178-4c09-904c-3084e00167c6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6707a09e-9dba-40df-b063-919788b0e8b9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "95193048-8c57-447c-8085-71a123790cd7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6707a09e-9dba-40df-b063-919788b0e8b9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a7336d0a-2159-41fa-8abe-858bbdb4e140",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6707a09e-9dba-40df-b063-919788b0e8b9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "dd1dcc3a-a235-47ce-9c1b-ddf4827203e1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6707a09e-9dba-40df-b063-919788b0e8b9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9eab96fc-73fa-4880-90ae-5af7d3558ba1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6707a09e-9dba-40df-b063-919788b0e8b9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "31b4ee97-f65d-4c62-9e47-15f0bb48e90b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6707a09e-9dba-40df-b063-919788b0e8b9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "902c7374-7dab-4b0f-9d4a-a8508701b3df",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6707a09e-9dba-40df-b063-919788b0e8b9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bd3d3de7-0754-4360-8dc2-8407faeeb560",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6707a09e-9dba-40df-b063-919788b0e8b9"
    }
  ]
}