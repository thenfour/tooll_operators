{
  "Name": "ASCIIFilterDitherAndLUT2",
  "_id": "f64d5254-7267-4a7e-94f7-a7c5f4179a28",
  "Namespace": "user.tenfour",
  "Description": "uses custom map, generated by external tool, and uses it to acheive the traditional ASCII filter. actually it w orks best with PETSCII",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "6e6b2f1a-f09c-4760-8ed2-caedcd020147",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D Image;",
          "float Scale;",
          "float Shade;",
          "Texture2D DitherPattern;",
          "Texture2D LUT;",
          "float DitherStrength01;",
          "float LUTValues;",
          "float ShadeLift;",
          "float ShadeGamma;",
          "//<<< _parameters\r",
          "Texture2D MapImage;\r",
          "float2 CharSize;\r",
          "float2 TilesPerChar;\r",
          "float ValuesPerTile;\r",
          "float2 MapCellCount;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float2 texCoord : TEXCOORD;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float2 texCoord: TEXCOORD0;\r",
          "};\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "#define Round(c) (floor((c)+.5)\r",
          "\r",
          "float Grayscale(float3 c) {\r",
          "    return ((0.3 * c.r) + (0.59 * c.g) + (0.11 * c.b));\r",
          "}\r",
          "\r",
          "\r",
          "// 3D LUT texture format:\r",
          "// R = X coord within swatch\r",
          "// G = Y coord (neg)\r",
          "// B = X coord swatches\r",
          "float3 applyColorLUT(Texture2D lut, float3 color) {\r",
          "    float lutWidth, lutRes;\r",
          "    lut.GetDimensions(lutWidth, lutRes);\r",
          "    float2 lutSize = float2(lutWidth, lutRes);\r",
          "  float lutB = floor(color.b * lutRes);// blue swatch index\r",
          "  lutB = clamp(lutB, 0., lutRes - 1.);// clamp to array bounds\r",
          "  lutB = lutB / lutRes; // floor'd X position of blue swatch\r",
          "  float lutR = color.r / lutRes;// position within R swatch\r",
          "  float swatchMaxWidth = 1. / (lutRes + 1.);// a 1.0 value would bleed into the next swatch. clamping utilizes the full mapping range but prevents the overflow.\r",
          "  lutR = clamp(lutR, 0., swatchMaxWidth);\r",
          "  return lut.Load(int3(lutSize * float2(lutR + lutB, 1.-color.g), 0)).rgb;\r",
          "}\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    // the upper-left pixel position of the character-sized cell.\r",
          "    //float inputWidth, inputHeight;\r",
          "    //Image.GetDimensions(inputWidth, inputHeight);\r",
          "    //int2 srcCellOrigin = floor(input.texCoord.xy * float2(inputWidth, inputHeight) / CharSize) * CharSize;\r",
          "    float2 ScaledCharSize = CharSize * Scale;\r",
          "    int2 srcCellOrigin = floor(input.pos.xy / ScaledCharSize) * ScaledCharSize;// pixel position of the cell upper left\r",
          "    int2 srcCellPos = input.pos.xy - srcCellOrigin; // pixel position within this cell, 0-ScaledCharSize\r",
          "    float2 HalfTileSize = ScaledCharSize / TilesPerChar / 2.;\r",
          "    srcCellPos /= Scale;// now in coords that play well with the font texture\r",
          "    \r",
          "    float3 cellSrcColor = float3(0,0,0);\r",
          "\r",
          "    float ditherWidth, ditherHeight;\r",
          "    DitherPattern.GetDimensions(ditherWidth, ditherHeight);\r",
          "    \r",
          "    // sample in the cell to determine the \"key\" \"ID\".\r",
          "    int ID = 0; // 1D ID\r",
          "    for (int ty = TilesPerChar.y - 1; ty >= 0; --ty)\r",
          "    {\r",
          "        for (int tx = TilesPerChar.x - 1; tx >= 0; --tx)\r",
          "        {\r",
          "            float2 tileIndex = float2(tx,ty);\r",
          "            float2 tilePos = (tileIndex / TilesPerChar) * ScaledCharSize; // pixel position of the upper-left corner of this tile relative to the char cell\r",
          "            float3 srcColor = Image.Load(int3(srcCellOrigin + tilePos + HalfTileSize + .5, 0)).rgb; // sample the center-ish pix of this tile\r",
          "            \r",
          "            if (tx == 0 && ty == 0) {\r",
          "                cellSrcColor = srcColor;\r",
          "            }\r",
          "            \r",
          "            float val = Grayscale(srcColor);\r",
          "            \r",
          "            // dither this value at the tile level\r",
          "            float2 absoluteTileIndex = (srcCellOrigin / TilesPerChar) + tileIndex;\r",
          "            uint2 ditherPos = floor(absoluteTileIndex);\r",
          "            float dith = DitherPattern.Load(uint3(ditherPos % uint2(ditherWidth, ditherHeight), 0)).r;\r",
          "            dith -= .5;\r",
          "            float strength = DitherStrength01 * (1./LUTValues);\r",
          "            dith *= strength;\r",
          "            \r",
          "            val += dith;\r",
          "        \r",
          "            // figure out which \"ID\" this value corresponds to. so we need to transform grayscale val\r",
          "            // to integer 0-ValuesPerTile.\r",
          "            // (val - segCenter) would give us the boundary. for example between 0-1 with 2 segments, the center vals are .25 and .75.\r",
          "            // subtract the center and you get .0 and .5 where you could multiply by segCount and get the proper seg of 0,1.\r",
          "            // however let's not subtract the center, but rather segCenter*.5. Then after integer floor rounding, it will be the correct\r",
          "            // value regardless of scale or any rounding issues.\r",
          "            float halfSegCenter = 0.25 / ValuesPerTile;\r",
          "            val -= halfSegCenter;\r",
          "            val = clamp(val,0,1);\r",
          "            val *= ValuesPerTile;\r",
          "            ID *= ValuesPerTile;\r",
          "            ID += floor(val);// thisTileID;\r",
          "        }\r",
          "    }\r",
          "    \r",
          "    // clamp ID for sanity.\r",
          "    int maxID = MapCellCount.x * MapCellCount.y;\r",
          "    ID = clamp(ID, 0, maxID - 1);\r",
          "\r",
          "    // ID is now calculated.\r",
          "    int2 mapCell = int2(0, ID / MapCellCount.x);\r",
          "    mapCell.x = ID - (mapCell.y * MapCellCount.x);\r",
          "\r",
          "    float3 fontColor = MapImage.Load(int3(mapCell * CharSize + srcCellPos, 0)).rgb;\r",
          "    \r",
          "    if (Shade > .5) {\r",
          "        //cellSrcColor = step(.6,cellSrcColor) * .5 + .5;\r",
          "        //fontColor *= cellSrcColor;\r",
          "        float3 shade = applyColorLUT(LUT, cellSrcColor);\r",
          "        shade = lerp(ShadeLift,1,shade);\r",
          "        shade = pow(clamp(shade,0,1), 1./ShadeGamma);\r",
          "        fontColor *= shade;\r",
          "    }\r",
          "    return float4(fontColor,1);\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "0a7d52a2-1123-411d-bfb1-63a911d00f1f",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Map",
      "MetaInstanceID": "c42b3ffa-83da-4fd3-b584-0d2d1e49340d",
      "DefaultValue": {
        "Type": "Dynamic",
        "Value": "Framefield.Core.Dynamic"
      },
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DitherPattern",
      "MetaInstanceID": "85518a39-2072-4a55-abb6-bd6d201934b6",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "LUT",
      "MetaInstanceID": "7d4a62e1-7b88-4713-9006-0a6fd84a411f",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scale",
      "MetaInstanceID": "fe1dffac-36d9-4aca-a7ac-723bd3e949ee",
      "DefaultValue": {
        "Type": "Float",
        "Value": "2"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "INTEGRAL.\r\n",
      "Min": "0.01",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Shade",
      "MetaInstanceID": "85b70fd9-9c64-4a9b-92f9-2d7b09e7e8a1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "No",
          "Value": "0"
        },
        {
          "Name": "Yes",
          "Value": "1"
        }
      ]
    },
    {
      "Name": "DitherStrength01",
      "MetaInstanceID": "185c583a-7fdc-4412-8997-09e3a2af7986",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.33"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "LUTValues",
      "MetaInstanceID": "3eddd1df-5cd7-44a3-aec7-2b0f44c5d2a2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "16"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "used for dithering to apply strength\r\n",
      "Min": "1",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ShadeLift",
      "MetaInstanceID": "9d8faa7d-6ba8-40c9-a463-4b6ce2c27833",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "Lifts the shade value to let the ASCII character show even for very dark colors.",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ShadeGamma",
      "MetaInstanceID": "200ea82e-8856-4579-902e-3bcbe0648749",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1.21"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "d2f986b1-4a9d-47ec-8c95-6221c5b23fef",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "77f91079-46dc-475d-b7da-828361c6b4f5",
      "MetaID": "9f70299c-75a9-43ca-b24f-1e34475f0bc6",
      "Name": "ASCIIFilterDitherAndLUT2Func",
      "Version": "9c2fb944-66e6-47ea-8ed8-c437234759a5",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID9f70299c_75a9_43ca_b24f_1e34475f0bc6",
        "{",
        "    public class Class_ASCIIFilterDitherAndLUT2 : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Scale = 2,",
        "            Shade = 3,",
        "            DitherPattern = 4,",
        "            LUT = 5,",
        "            DitherStrength01 = 6,",
        "            LUTValues = 7,",
        "            ShadeLift = 8,",
        "            ShadeGamma = 9,",
        "            Map = 10",
        "        }",
        "        //<<< _inputids",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Image = inputs[(int)InputId.Image].Eval(context).Image; // Needs to be checked for null!",
        "            var Scale = inputs[(int)InputId.Scale].Eval(context).Value;",
        "            var Shade = (int) inputs[(int)InputId.Shade].Eval(context).Value;",
        "            var DitherPattern = inputs[(int)InputId.DitherPattern].Eval(context).Image; // Needs to be checked for null!",
        "            var LUT = inputs[(int)InputId.LUT].Eval(context).Image; // Needs to be checked for null!",
        "            var DitherStrength01 = inputs[(int)InputId.DitherStrength01].Eval(context).Value;",
        "            var LUTValues = inputs[(int)InputId.LUTValues].Eval(context).Value;",
        "            var ShadeLift = inputs[(int)InputId.ShadeLift].Eval(context).Value;",
        "            var ShadeGamma = inputs[(int)InputId.ShadeGamma].Eval(context).Value;",
        "            var Map = inputs[(int)InputId.Map].Eval(context).Dynamic;  // Needs to be checked for null!",
        "            //<<< _params",
        "",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                using (var DitherPatternView = new ShaderResourceView(context.D3DDevice, DitherPattern))",
        "                using (var LUTView = new ShaderResourceView(context.D3DDevice, LUT))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"Scale\").AsScalar().Set(Scale);",
        "                    _effect.GetVariableByName(\"Shade\").AsScalar().Set(Shade);",
        "                    _effect.GetVariableByName(\"DitherPattern\").AsShaderResource().SetResource(DitherPatternView);",
        "                    _effect.GetVariableByName(\"LUT\").AsShaderResource().SetResource(LUTView);",
        "                    _effect.GetVariableByName(\"DitherStrength01\").AsScalar().Set(DitherStrength01);",
        "                    _effect.GetVariableByName(\"LUTValues\").AsScalar().Set(LUTValues);",
        "                    _effect.GetVariableByName(\"ShadeLift\").AsScalar().Set(ShadeLift);",
        "                    _effect.GetVariableByName(\"ShadeGamma\").AsScalar().Set(ShadeGamma);",
        "                //<<< _setup",
        "",
        "                    using (var MapImageView = new ShaderResourceView(context.D3DDevice, Map[\"Image\"]))",
        "                    {",
        "                        //Logger.Debug(this,\"MapImageView is {0}\", MapImageView.GetType());",
        "                        _effect.GetVariableByName(\"MapImage\").AsShaderResource().SetResource(MapImageView);",
        "                ",
        "                        _effect.GetVariableByName(\"CharSize\").AsVector().Set(Map[\"CharSize\"]);",
        "                        _effect.GetVariableByName(\"TilesPerChar\").AsVector().Set(Map[\"TilesPerChar\"]);",
        "                        _effect.GetVariableByName(\"ValuesPerTile\").AsScalar().Set(Map[\"ValuesPerTile\"]);",
        "                        _effect.GetVariableByName(\"MapCellCount\").AsVector().Set(Map[\"MapCellCount\"]);",
        "",
        "                        Render(context);",
        "                    }",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "77f91079-46dc-475d-b7da-828361c6b4f5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d2f986b1-4a9d-47ec-8c95-6221c5b23fef"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6e6b2f1a-f09c-4760-8ed2-caedcd020147",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "77f91079-46dc-475d-b7da-828361c6b4f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0a7d52a2-1123-411d-bfb1-63a911d00f1f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "77f91079-46dc-475d-b7da-828361c6b4f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "fe1dffac-36d9-4aca-a7ac-723bd3e949ee",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "77f91079-46dc-475d-b7da-828361c6b4f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "85b70fd9-9c64-4a9b-92f9-2d7b09e7e8a1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "77f91079-46dc-475d-b7da-828361c6b4f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "85518a39-2072-4a55-abb6-bd6d201934b6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "77f91079-46dc-475d-b7da-828361c6b4f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7d4a62e1-7b88-4713-9006-0a6fd84a411f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "77f91079-46dc-475d-b7da-828361c6b4f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "185c583a-7fdc-4412-8997-09e3a2af7986",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "77f91079-46dc-475d-b7da-828361c6b4f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3eddd1df-5cd7-44a3-aec7-2b0f44c5d2a2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "77f91079-46dc-475d-b7da-828361c6b4f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9d8faa7d-6ba8-40c9-a463-4b6ce2c27833",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "77f91079-46dc-475d-b7da-828361c6b4f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "200ea82e-8856-4579-902e-3bcbe0648749",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "77f91079-46dc-475d-b7da-828361c6b4f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c42b3ffa-83da-4fd3-b584-0d2d1e49340d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "77f91079-46dc-475d-b7da-828361c6b4f5"
    }
  ]
}