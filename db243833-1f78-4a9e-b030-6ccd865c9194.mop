{
  "Name": "SH_CelestialCircles",
  "_id": "db243833-1f78-4a9e-b030-6ccd865c9194",
  "Namespace": "user.tenfour.shaders",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "b9433cee-6acc-4191-ba54-985aa7984b1c",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "float Brilliance;",
          "float Animate;",
          "float SubBallSize;",
          "//<<< _parameters\r",
          "\r",
          "const float iBPM;\r",
          "const float iProgram;\r",
          "const float iTime;\r",
          "const float iBeat;\r",
          "static const float PI = atan(1.)*4.;\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "#define iResolution RenderTargetSize\r",
          "#define vec2 float2\r",
          "#define vec3 float3\r",
          "#define vec4 float4\r",
          "#define mat2 float2x2\r",
          "#define fract frac\r",
          "#define mod fmod\r",
          "#define mix lerp\r",
          "#define vec20 (float2(0,0))\r",
          "#define vec30 (float3(0,0,0))\r",
          "#define vec40 (float4(0,0,0,0))\r",
          "#define vec21 (float2(1,1))\r",
          "#define vec31 (float3(1,1,1))\r",
          "#define vec41 (float4(1,1,1,1))\r",
          "#define vec2x(x) (float2((x),(x)))\r",
          "#define vec3x(x) (float3((x),(x),(x)))\r",
          "#define vec4x(x) (float4((x),(x),(x),(x)))\r",
          "\r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "\r",
          "vec3 hash32(vec2 p) {\r",
          "\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\r",
          "    p3 += dot(p3, p3.yxz+19.19);\r",
          "    return fract((p3.xxy+p3.yzz)*p3.zyx);\r",
          "}\r",
          "mat2 rot2D(float r){\r",
          "    float c = cos(r), s = sin(r);\r",
          "    return mat2(c, s, -s, c);\r",
          "}\r",
          "float opUnion( float d1, float d2 ) { return min(d1,d2); }\r",
          "float opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\r",
          "float opIntersection( float d1, float d2 ) { return max(d1,d2); }\r",
          "float opXor(float lhs, float rhs) {\r",
          "    return opUnion(opIntersection(lhs, -(rhs)), opIntersection(rhs, -(lhs)));\r",
          "}\r",
          "float dtoa(float d, float amount){\r",
          "    return 1. / clamp(d*amount, 1., amount);\r",
          "}\r",
          "\r",
          "void mainImage( out vec4 o, in vec2 fragCoord )\r",
          "{\r",
          "    vec2 uv = fragCoord/iResolution.xy-.5;\r",
          "    uv.x *= iResolution.x / iResolution.y;\r",
          "    uv *= 16.;\r",
          "    //float t = iTime + 1000.;\r",
          "    float t = Animate;\r",
          "    //t *= .2;\r",
          "    //t += frac(iBeat/2.);\r",
          "    //float beat = (iBeat+1.)/2.;\r",
          "    //t = iTime*.5+sin(beat*PI2*1.)*.2*Brilliance;//floor(beat)+frac(beat)*.5;\r",
          "    \r",
          "\r",
          "    float f = 1000.;\r",
          "    const float layerCount = 4.;\r",
          "    const float ringRadiusStep = sqrt(2.);\r",
          "\r",
          "    for (float layer = 0.; layer < layerCount; ++ layer) {\r",
          "        for (float ring = 0.; ring <= 3.; ++ ring){ \r",
          "            float ballSize = 1.;\r",
          "    \t\tfloat ballPadding = layerCount - ballSize;\r",
          "            float ringRadius = ring * ringRadiusStep;\r",
          "            float balls = floor((PI * ringRadius * 1.4) / (ballSize + ballPadding)); // this is not precise\r",
          "            balls = max(balls, 1.);\r",
          "            uv = mul(uv, rot2D(t*.1));\r",
          "            for (float i = 1.; i <= balls; ++ i){ \r",
          "                float subBallSize = cos(t*ring+i)*.5+.5;\r",
          "                //subBallSize += (1.-frac(beat))*Brilliance;\r",
          "                subBallSize += SubBallSize*Brilliance;\r",
          "                uv = mul(uv, rot2D((PI2/balls)));\r",
          "                f = opXor(f, length(uv-ringRadius)-subBallSize);\r",
          "            }\r",
          "        }\r",
          "    }\r",
          "    \r",
          "    o = vec4x(dtoa(f, 80.));//*vec4(.9,.2,1.,0);\r",
          "    if (Brilliance > .5) {\r",
          "        o.rb = mul(o.rb-.5, rot2D((Animate)*PI))+.5;\r",
          "        o.gb = mul(o.gb-.5, rot2D((Animate)*PI))+.5;\r",
          "        float x = 1;\r",
          "        //o = mix(o, vec4x(o.r+o.g+o.b)/3.,1.- frac(beat));\r",
          "        o = mix(o, vec4x(o.r+o.g+o.b)/3.,1.- x);\r",
          "    }\r",
          "\r",
          "    o += .2;\r",
          "    o.rgb += .05*(hash32(fragCoord+iTime)-.5);// noise\r",
          "    vec2 N = fragCoord / iResolution.xy - .5;\r",
          "    o = pow(o, vec4x(.5));\r",
          "    o *= 1.-dot(N,N*1.4);\r",
          "    //o *= 1.-step(.4,abs(N.y));\r",
          "}",
          "//<<< PS\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o;\r",
          "    mainImage(o, input.pos.xy);\r",
          "    o.a = 1.0;\r",
          "    return o;\r",
          "}\r",
          "\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Brilliance",
      "MetaInstanceID": "cb380a68-5656-4e1e-a3b2-6142eb38f49c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Animate",
      "MetaInstanceID": "48cfd392-9293-4c6e-9e16-fd8befdbce62",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SubBallSize",
      "MetaInstanceID": "8c03591c-1e91-49a7-910d-38b6db9c4085",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "2a4e602c-4ce2-412e-88ce-213a50677499",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "586682b0-10b1-4b2a-b0f3-e994646f1c76",
      "MetaID": "5292de01-889d-47ab-aecd-e152327d62d6",
      "Name": "SH_CelestialCirclesFunc",
      "Version": "9ca08e37-e219-4403-a452-665f5c4b5a1f",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID5292de01_889d_47ab_aecd_e152327d62d6",
        "{",
        "    public class Class_SH_CelestialCircles : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Brilliance = 1,",
        "            Animate = 2,",
        "            SubBallSize = 3",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Brilliance = inputs[(int)InputId.Brilliance].Eval(context).Value;",
        "            var Animate = inputs[(int)InputId.Animate].Eval(context).Value;",
        "            var SubBallSize = inputs[(int)InputId.SubBallSize].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Brilliance\").AsScalar().Set(Brilliance);",
        "                    _effect.GetVariableByName(\"Animate\").AsScalar().Set(Animate);",
        "                    _effect.GetVariableByName(\"SubBallSize\").AsScalar().Set(SubBallSize);",
        "                //<<< _setup",
        "",
        "                if (context.GlobalObjects.ContainsKey(\"SKPlayerState\")) {",
        "                  var skstate = (SlashKickPerformer.SKPlayerState)context.GlobalObjects[\"SKPlayerState\"];",
        "                    _effect.GetVariableByName(\"iBPM\").AsScalar().Set((float)skstate.BPM);",
        "                    _effect.GetVariableByName(\"iProgram\").AsScalar().Set(skstate.ProgramIndex);",
        "                    _effect.GetVariableByName(\"iBeat\").AsScalar().Set((float)skstate.Beat);",
        "                }",
        "",
        "                _effect.GetVariableByName(\"iTime\").AsScalar().Set(context.Time);",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "586682b0-10b1-4b2a-b0f3-e994646f1c76",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2a4e602c-4ce2-412e-88ce-213a50677499"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b9433cee-6acc-4191-ba54-985aa7984b1c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "586682b0-10b1-4b2a-b0f3-e994646f1c76"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cb380a68-5656-4e1e-a3b2-6142eb38f49c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "586682b0-10b1-4b2a-b0f3-e994646f1c76"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "48cfd392-9293-4c6e-9e16-fd8befdbce62",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "586682b0-10b1-4b2a-b0f3-e994646f1c76"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8c03591c-1e91-49a7-910d-38b6db9c4085",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "586682b0-10b1-4b2a-b0f3-e994646f1c76"
    }
  ]
}