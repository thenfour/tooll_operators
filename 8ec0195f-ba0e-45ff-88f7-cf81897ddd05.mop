{
  "Name": "SH_RunnyInk",
  "_id": "8ec0195f-ba0e-45ff-88f7-cf81897ddd05",
  "Namespace": "user.tenfour.shaders",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "2f835812-6194-4f77-8612-ec641baa4f9a",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "",
          "//<<< _parameters\r",
          "\r",
          "const float iBPM;\r",
          "const float iProgram;\r",
          "const float iTime;\r",
          "const float iBeat;\r",
          "static const float PI = atan(1.)*4.;\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "#define iResolution RenderTargetSize\r",
          "#define vec2 float2\r",
          "#define vec3 float3\r",
          "#define vec4 float4\r",
          "#define mat2 float2x2\r",
          "#define fract frac\r",
          "#define mod fmod\r",
          "#define mix lerp\r",
          "#define vec20 (float2(0,0))\r",
          "#define vec30 (float3(0,0,0))\r",
          "#define vec40 (float4(0,0,0,0))\r",
          "#define vec21 (float2(1,1))\r",
          "#define vec31 (float3(1,1,1))\r",
          "#define vec41 (float4(1,1,1,1))\r",
          "#define vec2x(x) (float2((x),(x)))\r",
          "#define vec3x(x) (float3((x),(x),(x)))\r",
          "#define vec4x(x) (float4((x),(x),(x),(x)))\r",
          "\r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "\r",
          "vec3 hash32(vec2 p){\r",
          "\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\r",
          "    p3 += dot(p3, p3.yxz+19.19);\r",
          "    return fract((p3.xxy+p3.yzz)*p3.zyx);\r",
          "}\r",
          "vec4 disco(vec2 uv) {\r",
          "    float v = abs(cos(uv.x * PI * 2.) + cos(uv.y *PI * 2.)) * .5;\r",
          "    uv.x -= .5;\r",
          "    vec3 cid2 = hash32(vec2(floor(uv.x - uv.y), floor(uv.x + uv.y)));\r",
          "    return vec4(cid2, v);\r",
          "}\r",
          "float nsin(float t) {return sin(t)*.5+.5; }\r",
          "\r",
          "void mainImage( out vec4 o, in vec2 fragCoord)\r",
          "{\r",
          "    //fragCoord.y = -.5-fragCoord.y;\r",
          "    \r",
          "    vec2 R = iResolution.xy;\r",
          "    vec2 uv = fragCoord / R - .5;\r",
          "    uv.x *= R.x / R.y;\r",
          "    uv.y = -uv.y;\r",
          "\r",
          "    float t = (iTime + 129.) * .6; //t = 0.;\r",
          "    uv = uv.yx;\r",
          "    uv *= 3.;//+frac(iBeat/4.);\r",
          "    uv.x += t*.5;\r",
          "    \r",
          "    o = vec4x(1);\r",
          "    float sgn = -1.;\r",
          "    for(float i = 1.; i <= 5.; ++i) {\r",
          "        vec4 d = disco(uv);\r",
          "        float curv = pow(d.a, .5-((1./i)*.3));\r",
          "        curv = pow(curv, .8+(d.b * 2.));\r",
          "        curv = smoothstep(nsin(t)*.3+.2,.8,curv);\r",
          "        o += sgn * d * curv;\r",
          "        o *= d.a;\r",
          "        sgn = -sgn;\r",
          "        uv += 100.;// move to a different cell\r",
          "        //uv += sin(d.ar*7.33+t*1.77)*(nsin(t*.7)*.1+.04);\r",
          "        uv += sin(d.ar*7.33+t*1.77)*((frac(iBeat/4.)*.08)+.05);\r",
          "    }\r",
          "    \r",
          "    // post\r",
          "   \to.gb *= vec2(1.,.5);//tint\r",
          "    vec2 N = (fragCoord / R )- .5;\r",
          "    o = clamp(o,.0,1.);\r",
          "    o = pow(o, vec4x(.2));\r",
          "    //o.rgb -= hash32(fragCoord + iTime).r*(1./255.);\r",
          "    \r",
          "    N = pow(abs(N), vec2x(2.5));\r",
          "    N *= 7.;\r",
          "    o *= 1.5-length(N);// ving\r",
          "    //o = clamp(o,.0,1.);\r",
          "    //o.a = 1.;\r",
          "}\r",
          "\r",
          "\r",
          "",
          "//<<< PS\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o;\r",
          "    mainImage(o, input.pos.xy);\r",
          "    o = clamp(o,0.,1.);\r",
          "    o.a = 1.0;\r",
          "    return o;\r",
          "}\r",
          "\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "e09c643c-f45b-487d-b13e-284087ec3791",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "6c822fa5-90d0-457a-9e23-7fbfac96b793",
      "MetaID": "e9092bd4-157a-4d9b-8e57-97b846959ee9",
      "Name": "SH_RunnyInkFunc",
      "Version": "fbaaaa11-bec7-4286-83b1-505e98971b42",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.IDe9092bd4_157a_4d9b_8e57_97b846959ee9",
        "{",
        "    public class Class_SH_RunnyInk : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            //<<< _params",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                //<<< _setup",
        "",
        "            var skstate = Framefield.Core.OperatorPartContext.SKServerState;",
        "                    _effect.GetVariableByName(\"iBPM\").AsScalar().Set((float)skstate.BPM);",
        "                    _effect.GetVariableByName(\"iProgram\").AsScalar().Set(skstate.ProgramIndex);",
        "                    _effect.GetVariableByName(\"iBeat\").AsScalar().Set((float)skstate.Beat);",
        "",
        "                _effect.GetVariableByName(\"iTime\").AsScalar().Set(context.Time);",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6c822fa5-90d0-457a-9e23-7fbfac96b793",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e09c643c-f45b-487d-b13e-284087ec3791"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2f835812-6194-4f77-8612-ec641baa4f9a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6c822fa5-90d0-457a-9e23-7fbfac96b793"
    }
  ]
}