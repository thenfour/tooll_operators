{
  "Name": "SH_TriangleExperiment2",
  "_id": "b0932370-3832-413b-bd66-aaabb1a21e6e",
  "Namespace": "user.tenfour.shaders",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "a09144b3-36ab-4e18-b665-1ff5780faaa9",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "float Zoom;",
          "float2 Position;",
          "//<<< _parameters\r",
          "\r",
          "const float iBPM;\r",
          "const float iProgram;\r",
          "const float iTime;\r",
          "const float iBeat;\r",
          "static const float PI = atan(1.)*4.;\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "#define iResolution RenderTargetSize\r",
          "#define vec2 float2\r",
          "#define vec3 float3\r",
          "#define vec4 float4\r",
          "#define mat2 float2x2\r",
          "#define fract frac\r",
          "#define mod fmod\r",
          "#define mix lerp\r",
          "#define vec20 (float2(0,0))\r",
          "#define vec30 (float3(0,0,0))\r",
          "#define vec40 (float4(0,0,0,0))\r",
          "#define vec21 (float2(1,1))\r",
          "#define vec31 (float3(1,1,1))\r",
          "#define vec41 (float4(1,1,1,1))\r",
          "#define vec2x(x) (float2((x),(x)))\r",
          "#define vec3x(x) (float3((x),(x),(x)))\r",
          "#define vec4x(x) (float4((x),(x),(x),(x)))\r",
          "\r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "\r",
          "vec3 dtoa(float d, vec3 amount){\r",
          "    return vec3(1. / clamp(d*amount, vec3x(1), amount));\r",
          "}\r",
          "float dtoa(float d, float amount){\r",
          "    return 1. / clamp(d*amount, 1., amount);\r",
          "}\r",
          "float2x2 rot2D(float r){\r",
          "    return float2x2(cos(r), -sin(r), sin(r), cos(r));\r",
          "    //return float2x2( cosX, -sinX, sinY, cosX);\r",
          "}\r",
          "float nsin(float x) {\r",
          "    return cos(x)*.5+.5;\r",
          "}\r",
          "vec3 hash32(vec2 p) {\r",
          "\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\r",
          "    p3 += dot(p3, p3.yxz+19.19);\r",
          "    return fract((p3.xxy+p3.yzz)*p3.zyx);\r",
          "}\r",
          "float opUnion( float d1, float d2 ) { return min(d1,d2); }\r",
          "float opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\r",
          "float opIntersection( float d1, float d2 ) { return max(d1,d2); }\r",
          "float opXor(float lhs, float rhs) {\r",
          "    return opUnion(opIntersection(lhs, -(rhs)), opIntersection(rhs, -(lhs)));\r",
          "}\r",
          "static const float C = sqrt(3.)/3.; // dist from center to \r",
          "float sdEquilateralTriangle(in vec2 p)\r",
          "{\r",
          "    p.y += C; // anchor center\r",
          "    const float k = sqrt(3.0);\r",
          "    p.x = abs(p.x) - 1.0;\r",
          "    if( p.x + k*p.y > 0.0 ) p = vec2( p.x - k*p.y, -k*p.x - p.y )/2.0;\r",
          "    p.x += 2.0 - 2.0*clamp( (p.x+2.0)/2.0, 0.0, 1.0 );\r",
          "    return -length(p)*sign(p.y);\r",
          "}\r",
          "// end boilerplate ======================\r",
          "\r",
          "float scurve(float x, float p) {\r",
          "    x = x / p * PI2;\r",
          "    return (x + sin(x+PI)) / PI2;\r",
          "}\r",
          "\r",
          "void sdthing(inout float sd, inout float sd2, vec2 uv, float a, float scale) {\r",
          "    sd2 = opXor(sd2, sdEquilateralTriangle(uv*scale));\r",
          "    \r",
          "    sd = opXor(sd, sdEquilateralTriangle(scale*(mul((uv + vec2(0,-C*2.)), rot2D(a - PI/3.)) - vec2(1.,C))));\r",
          "    \r",
          "    //sd = opXor(sd, sdEquilateralTriangle(scale*(((uv + vec2x(0,-C*2.)) * rot2D(a - PI/3.)) - vec2(1.,C))));\r",
          "    \r",
          "    sd = opXor(sd, sdEquilateralTriangle(scale*(mul((uv + vec2(-1.,C)), rot2D(a+PI)) - vec2(1.,C))));\r",
          "    sd = opXor(sd, sdEquilateralTriangle(scale*(mul((uv + vec2(1.,C)), rot2D(a + PI/3.)) - vec2(1.,C))));\r",
          "}\r",
          "\r",
          "vec4 thing(vec2 uv, float s) {\r",
          "    vec2 modperiod = vec2(8., 12.*C);\r",
          "    uv = mod(uv+modperiod*.5, modperiod) - modperiod*.5;\r",
          "    \r",
          "    float beat = iBeat/2.;\r",
          "    \r",
          "    //float t = s*iTime*.6;\r",
          "    //if (s < 0.)\r",
          "    //\tt = scurve(t, 1.) * .5;\r",
          "    float t = scurve(beat-.1, 1.);\r",
          "\r",
          "    float sd = 1e6, sd2=sd;\r",
          "    // bank 1\r",
          "    float seg = mod(t, 3.);\r",
          "    float a = fract(seg) * PI * 4./3.;\r",
          "    sdthing(sd, sd2, uv, a, 1.);\r",
          "    sdthing(sd, sd2, uv, a, 3.);\r",
          "    \r",
          "    // bank 2\r",
          "    uv = mod(uv + modperiod, modperiod) - modperiod*.5;\r",
          "    seg = mod(-t+.5, 3.);\r",
          "    a = fract(seg) * PI * 4./3.;\r",
          "    sdthing(sd, sd2, uv, a, 1.);\r",
          "    sdthing(sd, sd2, uv, a, 3.);\r",
          "\r",
          "    vec4 o;\r",
          "    o.rgb = dtoa(sd, 3.*vec3(400,400,20)) * .5;\r",
          "    \r",
          "    float abeat = frac(beat)+.3;\r",
          "    \r",
          "    o.rgb += dtoa(sd2, abeat*vec3(5,40,80)) * .8;\r",
          "    o = pow(o, o-o+4.);\r",
          "    o.br = mul(o.br, rot2D(sd*.6));\r",
          "    o = clamp(o,o-o,o-o+1.);\r",
          "    o.a = min(sd,sd2);\r",
          "    return o;\r",
          "}\r",
          "\r",
          "void mainImage( out vec4 o, in vec2 fragCoord )\r",
          "{\r",
          "    vec2 uvorig = fragCoord/iResolution.xy-.5;\r",
          "    uvorig.x *= iResolution.x / iResolution.y;\r",
          "    uvorig += Position;\r",
          "    //uvorig.x += iTime*.1;\r",
          "    uvorig *= Zoom;\r",
          "    vec2 uv = uvorig;\r",
          "\r",
          "    //o = thing(uv*3., 1.) * .5;\r",
          "    //o = vec4x(o.r*dtoa(-o.a,40.)*.05);\r",
          "    float4 fore = thing(uv, -1.);\r",
          "    //o = mix(o, fore, dtoa(fore.a,2000.));\r",
          "    o = fore * vec4x(dtoa(fore.a, 2000.));\r",
          "        \r",
          "    //vec2 N = fragCoord / iResolution.xy-.5;\r",
          "\r",
          "    o = pow(o, o-o+.5);\r",
          "    //o.rgb += (hash32(fragCoord+iTime)-.5)*.08;\r",
          "    //o.rgb += dot(N,N) * vec3(.2,.5,1);\r",
          "    \r",
          "    //o = clamp(o,o-o,o-o+1.);\r",
          "    \r",
          "    \r",
          "    \r",
          "    //o *= 1.-length(12.*pow(abs(N), vec2x(4.)));// vingette\r",
          "    //o.a = 1.;\r",
          "}\r",
          "\r",
          "",
          "//<<< PS\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o;\r",
          "    mainImage(o, input.pos.xy);\r",
          "    o = clamp(o,0.,1.);\r",
          "    o.a = 1.0;\r",
          "    return o;\r",
          "}\r",
          "\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Zoom",
      "MetaInstanceID": "54c4fb32-e81f-4a57-90a9-9c2a326c66d5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "8"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Position.X",
      "MetaInstanceID": "30188568-65b9-41c7-a846-262a7814a55c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Position.Y",
      "MetaInstanceID": "49ff097f-930c-4d7c-96d8-0a92235ae024",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "7e7cb391-dbfc-4526-9a51-0f6059d2315f",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "f5adc5dc-b2e7-45cd-995f-d31dff24e302",
      "MetaID": "7655a2b6-6823-4074-bda9-2595fff8ce9e",
      "Name": "SH_TriangleExperiment2Func",
      "Version": "3d2f11fc-0f31-46ba-acae-f014431fdda2",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID7655a2b6_6823_4074_bda9_2595fff8ce9e",
        "{",
        "    public class Class_SH_TriangleExperiment2 : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Zoom = 1,",
        "            PositionX = 2,",
        "            PositionY = 3",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Zoom = inputs[(int)InputId.Zoom].Eval(context).Value;",
        "            var PositionX = inputs[(int)InputId.PositionX].Eval(context).Value;",
        "            var PositionY = inputs[(int)InputId.PositionY].Eval(context).Value;",
        "            var Position = new Vector2(PositionX, PositionY);",
        "            //<<< _params",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Zoom\").AsScalar().Set(Zoom);",
        "                    _effect.GetVariableByName(\"Position\").AsVector().Set(new Vector2(PositionX, PositionY));",
        "                //<<< _setup",
        "",
        "                if (context.GlobalObjects.ContainsKey(\"SKPlayerState\")) {",
        "                  var skstate = (SlashKickPerformer.SKPlayerState)context.GlobalObjects[\"SKPlayerState\"];",
        "                    _effect.GetVariableByName(\"iBPM\").AsScalar().Set((float)skstate.BPM);",
        "                    _effect.GetVariableByName(\"iProgram\").AsScalar().Set(skstate.ProgramIndex);",
        "                    _effect.GetVariableByName(\"iBeat\").AsScalar().Set((float)skstate.Beat);",
        "                }",
        "",
        "                _effect.GetVariableByName(\"iTime\").AsScalar().Set(context.Time);",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f5adc5dc-b2e7-45cd-995f-d31dff24e302",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7e7cb391-dbfc-4526-9a51-0f6059d2315f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a09144b3-36ab-4e18-b665-1ff5780faaa9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f5adc5dc-b2e7-45cd-995f-d31dff24e302"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "54c4fb32-e81f-4a57-90a9-9c2a326c66d5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f5adc5dc-b2e7-45cd-995f-d31dff24e302"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "30188568-65b9-41c7-a846-262a7814a55c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f5adc5dc-b2e7-45cd-995f-d31dff24e302"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "49ff097f-930c-4d7c-96d8-0a92235ae024",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f5adc5dc-b2e7-45cd-995f-d31dff24e302"
    }
  ]
}