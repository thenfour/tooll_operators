{
  "Name": "SH_Waves04",
  "_id": "3a6abb1c-f888-4be7-b889-25b26c9d3442",
  "Namespace": "user.tenfour.shaders",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "e39def8a-77c5-45f0-82f8-c70b600a3f43",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "float Zoom;",
          "float Thickness;",
          "float2 Position;",
          "float ShadeExponent;",
          "float LayerScale;",
          "float2 LayerYPos;",
          "float3 DTOA;",
          "float DTOAMultiplier;",
          "//<<< _parameters\r",
          "float iTime;\r",
          "static const float PI = atan(1.)*4.;\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "\r",
          "float2x2 rot2D(float r){\r",
          "    return float2x2(cos(r), -sin(r), sin(r), cos(r));\r",
          "}\r",
          "\r",
          "//----------------------------------------------------------------------------------------\r",
          "// 4 out, 2 in...\r",
          "float4 hash42(float2 p)\r",
          "{\r",
          "\tfloat4 p4 = frac(p.xyxy * float4(.1031, .1030, .0973, .1099));\r",
          "    p4 += dot(p4, p4.wzxy+33.33);\r",
          "    return frac((p4.xxyz+p4.yzzw)*p4.zywx);\r",
          "}\r",
          "\r",
          "\r",
          "// polynomial smooth min (k = 0.1);\r",
          "float smin( float a, float b, float k )\r",
          "{\r",
          "    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\r",
          "    return lerp( b, a, h ) - k*h*(1.0-h);\r",
          "}\r",
          "float smax(float a, float b, float k) {\r",
          "    return -smin(-a, -b, k);\r",
          "}\r",
          "\r",
          "static const float k = .1;\r",
          "float opSmoothSubtraction( float d1, float d2 ) { return smax(-d1,d2, k); }\r",
          "float opSmoothIntersection( float d1, float d2 ) { return smax(d1,d2, k); }\r",
          "float opSmoothUnion( float d1, float d2 ) { return smin(d1,d2, k); }\r",
          "\r",
          "float opUnion( float d1, float d2 ) { return min(d1,d2); }\r",
          "float opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\r",
          "float opIntersection( float d1, float d2 ) { return max(d1,d2); }\r",
          "float opXor(float lhs, float rhs) {\r",
          "    return opUnion(opIntersection(lhs, -(rhs)), opIntersection(rhs, -(lhs)));\r",
          "}\r",
          "float opSmoothXor(float lhs, float rhs) {\r",
          "    return opSmoothUnion(opSmoothIntersection(lhs, -(rhs)), opSmoothIntersection(rhs, -(lhs)));\r",
          "}\r",
          "\r",
          "#define dtoa(d, amount) (1. / clamp((d)*(amount), 1., (amount)))\r",
          "\r",
          "\r",
          "float sdTriangle( in float2 p, in float2 p0, in float2 p1, in float2 p2 )\r",
          "{\r",
          "    float2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\r",
          "    float2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\r",
          "    float2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\r",
          "    float2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\r",
          "    float2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\r",
          "    float s = sign( e0.x*e2.y - e0.y*e2.x );\r",
          "    float2 d = min(min(float2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\r",
          "                     float2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\r",
          "                     float2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\r",
          "    return -sqrt(d.x)*sign(d.y);\r",
          "}\r",
          "float sdLine( in float2 p, in float2 a, in float2 b )\r",
          "{\r",
          "    float2 pa = p-a, ba = b-a;\r",
          "    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\r",
          "    return length( pa - ba*h );\r",
          "}\r",
          "\r",
          "float sdEquilateralTriangle( in float2 p )\r",
          "{\r",
          "    const float k = sqrt(3.0);\r",
          "    p.x = abs(p.x) - 1.0;\r",
          "    p.y = p.y + 1.0/k;\r",
          "    if( p.x+k*p.y>0.0 ) p = float2(p.x-k*p.y,-k*p.x-p.y)/2.0;\r",
          "    p.x -= clamp( p.x, -2.0, 0.0 );\r",
          "    return -length(p)*sign(p.y);\r",
          "}\r",
          "\r",
          "float rsin(float x, float low, float high)\r",
          "{\r",
          "    return (sin(x)*.5+.5) * (high-low) + low;\r",
          "}\r",
          "/*\r",
          "float sdshape(float2 uv)\r",
          "{\r",
          "    uv.y *= rsin(uv.x*3.33+iTime,1,1.5);\r",
          "    uv.x = frac(uv.x)-.5;\r",
          "    float ret = length(uv)-.5;\r",
          "    ret = min(ret,uv.y);\r",
          "    return -ret;\r",
          "}\r",
          "*/\r",
          "\r",
          "float sdshape(float2 uv)\r",
          "{\r",
          "    uv.y *= rsin(uv.x*3.33+iTime,1,1.5);\r",
          "    uv.x = frac(uv.x)-.5;\r",
          "    float ret = length(uv)-.5;\r",
          "    ret = min(ret,uv.y);\r",
          "    return -ret;\r",
          "}\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o = float4(1,1,1,1);\r",
          "    float2 R = RenderTargetSize.xy;\r",
          "    float2 uv = input.pos.xy / R;\r",
          "    \r",
          "    float t = iTime*.6;\r",
          "    uv -= .5;\r",
          "    uv += Position * float2(.1,1);\r",
          "    uv.x *= R.x / R.y;\r",
          "    uv *= Zoom;\r",
          "    float s = 1;\r",
          "\r",
          "    o = float4(0,0,0,1);\r",
          "    float sd = 1e7;\r",
          "    \r",
          "    for(float i = 0; i < 16; i += 2) {\r",
          "        uv.x += rsin(uv.y*8+iTime+i, -.01,.01);// wave teh screen\r",
          "        float sd2 = sdshape(uv);\r",
          "        uv.x += rsin(uv.y*8+iTime+i, -.01,.05);\r",
          "        sd2 = opSubtraction(sd2, sdshape(uv));\r",
          "        sd = opUnion(sd, sd2);\r",
          "        \r",
          "        // prepare next (back) layer\r",
          "        uv *= LayerScale;// smaller.\r",
          "        uv.x += s * (Position.x*-1.5 + i + sin(iTime*.1));// phase + alternation\r",
          "        uv.y += rsin(iTime*.1+i, LayerYPos.x, LayerYPos.y);// modulate y position\r",
          "        s = -s;\r",
          "        o.rgb += dtoa(sd-Thickness, DTOAMultiplier*DTOA) / (1+i*1.5);// * (pow(max(0,sd*100), .3));\r",
          "    }\r",
          "    \r",
          "    return clamp(o,0,1);\r",
          "}\r",
          "\r",
          "",
          "//<<< PS\r",
          "\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Zoom",
      "MetaInstanceID": "70027044-3911-47a8-9c7a-785b80ba1818",
      "DefaultValue": {
        "Type": "Float",
        "Value": "3"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0.001",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Thickness",
      "MetaInstanceID": "aea7c83f-0980-4271-93f7-dda676de5776",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-1",
      "Max": "1",
      "Scale": "0.005",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "LayerScale",
      "MetaInstanceID": "35808e6c-41d5-4547-8119-417340d0cc94",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1.3"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ShadeExponent",
      "MetaInstanceID": "33ece95b-04ce-4013-a932-ce76fb119c3c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.3"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0.001",
      "Max": "10000",
      "Scale": "0.005",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Position.X",
      "MetaInstanceID": "af961b0c-2aec-4494-8613-89d701e5e921",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Position.Y",
      "MetaInstanceID": "30143bbc-7072-449c-8532-7a97d85a6ca7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "LayerYPos.Min",
      "MetaInstanceID": "b0bd2118-3061-4ece-a89c-03b50b327843",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "LayerYPos.Max",
      "MetaInstanceID": "d151255a-e7f9-4c27-a0c1-68bb3ee74feb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.2"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DTOA.X",
      "MetaInstanceID": "0845f40d-4f8b-4955-8dbb-d1adbeb02fa3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DTOA.Y",
      "MetaInstanceID": "b2b30a37-47f0-4558-ba3a-b380877ececb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DTOA.Z",
      "MetaInstanceID": "1dc28952-dbf1-4082-b353-4267d8ec2872",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DTOAMultiplier",
      "MetaInstanceID": "8a19c3a7-3736-4622-b9de-6c000945060f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "0cf0bf43-9e1f-4e4d-a368-03626c3aed98",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "11511af7-c25d-4c1e-a828-411c76c6612d",
      "MetaID": "d98ec63f-c53a-48f8-8fba-cd7d5574cfb1",
      "Name": "SH_Waves04Func",
      "Version": "62168012-6a3f-4b5c-b629-7246687c7d9a",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.IDd98ec63f_c53a_48f8_8fba_cd7d5574cfb1",
        "{",
        "    public class Class_SH_Waves04 : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Zoom = 1,",
        "            Thickness = 2,",
        "            PositionX = 3,",
        "            PositionY = 4,",
        "            ShadeExponent = 5,",
        "            LayerScale = 6,",
        "            LayerYPosMin = 7,",
        "            LayerYPosMax = 8,",
        "            DTOAX = 9,",
        "            DTOAY = 10,",
        "            DTOAZ = 11,",
        "            DTOAMultiplier = 12",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Zoom = inputs[(int)InputId.Zoom].Eval(context).Value;",
        "            var Thickness = inputs[(int)InputId.Thickness].Eval(context).Value;",
        "            var PositionX = inputs[(int)InputId.PositionX].Eval(context).Value;",
        "            var PositionY = inputs[(int)InputId.PositionY].Eval(context).Value;",
        "            var Position = new Vector2(PositionX, PositionY);",
        "            var ShadeExponent = inputs[(int)InputId.ShadeExponent].Eval(context).Value;",
        "            var LayerScale = inputs[(int)InputId.LayerScale].Eval(context).Value;",
        "            var LayerYPosMin = inputs[(int)InputId.LayerYPosMin].Eval(context).Value;",
        "            var LayerYPosMax = inputs[(int)InputId.LayerYPosMax].Eval(context).Value;",
        "            var LayerYPos = new Vector2(LayerYPosMin, LayerYPosMax);",
        "            var DTOAX = inputs[(int)InputId.DTOAX].Eval(context).Value;",
        "            var DTOAY = inputs[(int)InputId.DTOAY].Eval(context).Value;",
        "            var DTOAZ = inputs[(int)InputId.DTOAZ].Eval(context).Value;",
        "            var DTOA = new Vector3(DTOAX, DTOAY, DTOAZ);",
        "            var DTOAMultiplier = inputs[(int)InputId.DTOAMultiplier].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Zoom\").AsScalar().Set(Zoom);",
        "                    _effect.GetVariableByName(\"Thickness\").AsScalar().Set(Thickness);",
        "                    _effect.GetVariableByName(\"Position\").AsVector().Set(new Vector2(PositionX, PositionY));",
        "                    _effect.GetVariableByName(\"ShadeExponent\").AsScalar().Set(ShadeExponent);",
        "                    _effect.GetVariableByName(\"LayerScale\").AsScalar().Set(LayerScale);",
        "                    _effect.GetVariableByName(\"LayerYPos\").AsVector().Set(new Vector2(LayerYPosMin, LayerYPosMax));",
        "                    _effect.GetVariableByName(\"DTOA\").AsVector().Set(new Vector3(DTOAX, DTOAY, DTOAZ));",
        "                    _effect.GetVariableByName(\"DTOAMultiplier\").AsScalar().Set(DTOAMultiplier);",
        "                //<<< _setup",
        "",
        "                _effect.GetVariableByName(\"iTime\").AsScalar().Set(context.Time);",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "11511af7-c25d-4c1e-a828-411c76c6612d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0cf0bf43-9e1f-4e4d-a368-03626c3aed98"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e39def8a-77c5-45f0-82f8-c70b600a3f43",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "11511af7-c25d-4c1e-a828-411c76c6612d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "70027044-3911-47a8-9c7a-785b80ba1818",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "11511af7-c25d-4c1e-a828-411c76c6612d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "aea7c83f-0980-4271-93f7-dda676de5776",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "11511af7-c25d-4c1e-a828-411c76c6612d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "af961b0c-2aec-4494-8613-89d701e5e921",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "11511af7-c25d-4c1e-a828-411c76c6612d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "30143bbc-7072-449c-8532-7a97d85a6ca7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "11511af7-c25d-4c1e-a828-411c76c6612d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "33ece95b-04ce-4013-a932-ce76fb119c3c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "11511af7-c25d-4c1e-a828-411c76c6612d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "35808e6c-41d5-4547-8119-417340d0cc94",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "11511af7-c25d-4c1e-a828-411c76c6612d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b0bd2118-3061-4ece-a89c-03b50b327843",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "11511af7-c25d-4c1e-a828-411c76c6612d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d151255a-e7f9-4c27-a0c1-68bb3ee74feb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "11511af7-c25d-4c1e-a828-411c76c6612d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0845f40d-4f8b-4955-8dbb-d1adbeb02fa3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "11511af7-c25d-4c1e-a828-411c76c6612d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b2b30a37-47f0-4558-ba3a-b380877ececb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "11511af7-c25d-4c1e-a828-411c76c6612d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1dc28952-dbf1-4082-b353-4267d8ec2872",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "11511af7-c25d-4c1e-a828-411c76c6612d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8a19c3a7-3736-4622-b9de-6c000945060f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "11511af7-c25d-4c1e-a828-411c76c6612d"
    }
  ]
}