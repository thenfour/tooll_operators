{
  "Name": "SH_Waves",
  "_id": "6326ff8b-0c4c-468a-834a-d1d4bd518539",
  "Namespace": "user.tenfour.shaders",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "34637548-d86b-4fc1-9a36-0992f6bf0bd1",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "float Layers;",
          "float Speed;",
          "//<<< _parameters\r",
          "\r",
          "const float iBPM;\r",
          "const float iProgram;\r",
          "const float iTime;\r",
          "const float iBeat;\r",
          "static const float PI = atan(1.)*4.;\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "#define iResolution RenderTargetSize\r",
          "#define vec2 float2\r",
          "#define vec3 float3\r",
          "#define vec4 float4\r",
          "#define mat2 float2x2\r",
          "#define fract frac\r",
          "#define mod fmod\r",
          "#define mix lerp\r",
          "#define vec20 (float2(0,0))\r",
          "#define vec30 (float3(0,0,0))\r",
          "#define vec40 (float4(0,0,0,0))\r",
          "#define vec21 (float2(1,1))\r",
          "#define vec31 (float3(1,1,1))\r",
          "#define vec41 (float4(1,1,1,1))\r",
          "#define vec2x(x) (float2((x),(x)))\r",
          "#define vec3x(x) (float3((x),(x),(x)))\r",
          "#define vec4x(x) (float4((x),(x),(x),(x)))\r",
          "\r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "\r",
          "vec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\r",
          "{\r",
          "    return a + b*cos( 6.28318*(c*t+d) );\r",
          "}\r",
          "\r",
          "vec3 dtoa(float sd)\r",
          "{\r",
          "    vec3 divAmt = vec3(200,100,90);\r",
          "    return 1. / clamp(sd*divAmt, 1., divAmt);\r",
          "}\r",
          "\r",
          "void mainImage( out vec4 o, in vec2 fragCoord)\r",
          "{\r",
          "    vec2 R = iResolution.xy;\r",
          "    vec2 uv = fragCoord / iResolution - .5;\r",
          "    uv.x *= R.x/R.y;\r",
          "    uv *= .8;\r",
          "    uv.y += .1;\r",
          "    \r",
          "    // just generate some interfering waves\r",
          "    float sd = 1e6;\r",
          "    float s = .05;\r",
          "    float width;// = frac(iBeat*2.);\r",
          "    //width *= .1;\r",
          "    //width = (pow(width, .7));\r",
          "    \r",
          "    //width = 1.-width;\r",
          "    width = cos(iTime+Speed*uv.x)*.5;\r",
          "    for (float i = 1.; i <= Layers; ++ i) {\r",
          "    \tuv.x += iTime*s*Speed;\r",
          "        float sd2 = uv.y + sin(uv.x*i)*.2;\r",
          "        sd2 = max(sd2, -uv.y-sin(uv.x*i+s*i*width)*.25);\r",
          "        sd = min(sd, sd2);\r",
          "        s = -s * (1.1);\r",
          "        uv+= s;\r",
          "    }\r",
          "    \r",
          "    o.rgb = (dtoa(sd+.05));\r",
          "\r",
          "    o.rgb *= pal(iTime*.1 + uv.y * sin(uv.x + iTime*Speed), vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );\r",
          "\r",
          "o = clamp(o, 0.,1.);\r",
          "}\r",
          "\r",
          "",
          "//<<< PS\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o;\r",
          "    mainImage(o, input.pos.xy);\r",
          "    o = clamp(o,0.,1.);\r",
          "    o.a = 1.0;\r",
          "    return o;\r",
          "}\r",
          "\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Layers",
      "MetaInstanceID": "8aca8e27-6381-475a-82f2-1e511f5a788b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "12"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Speed",
      "MetaInstanceID": "fa0a52bc-18ee-48dd-a0a6-8293246206b5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "a41635b0-3ea5-40bb-bebc-cead0ac2ab78",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "55226e65-afca-4fa0-8dba-8bf72744bf44",
      "MetaID": "56082f89-c194-469d-9399-5bc2089440f3",
      "Name": "SH_WavesFunc",
      "Version": "14f91181-ff02-4918-89b7-53ffbb94c30e",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID56082f89_c194_469d_9399_5bc2089440f3",
        "{",
        "    public class Class_SH_Waves : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Layers = 1,",
        "            Speed = 2",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Layers = inputs[(int)InputId.Layers].Eval(context).Value;",
        "            var Speed = inputs[(int)InputId.Speed].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Layers\").AsScalar().Set(Layers);",
        "                    _effect.GetVariableByName(\"Speed\").AsScalar().Set(Speed);",
        "                //<<< _setup",
        "",
        "            var skstate = Framefield.Core.OperatorPartContext.SKServerState;",
        "                    _effect.GetVariableByName(\"iBPM\").AsScalar().Set((float)skstate.BPM);",
        "                    _effect.GetVariableByName(\"iProgram\").AsScalar().Set(skstate.ProgramIndex);",
        "                    _effect.GetVariableByName(\"iBeat\").AsScalar().Set((float)skstate.ProgramStreamBeat);",
        "",
        "                _effect.GetVariableByName(\"iTime\").AsScalar().Set(context.Time);",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "55226e65-afca-4fa0-8dba-8bf72744bf44",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a41635b0-3ea5-40bb-bebc-cead0ac2ab78"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "34637548-d86b-4fc1-9a36-0992f6bf0bd1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "55226e65-afca-4fa0-8dba-8bf72744bf44"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8aca8e27-6381-475a-82f2-1e511f5a788b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "55226e65-afca-4fa0-8dba-8bf72744bf44"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "fa0a52bc-18ee-48dd-a0a6-8293246206b5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "55226e65-afca-4fa0-8dba-8bf72744bf44"
    }
  ]
}