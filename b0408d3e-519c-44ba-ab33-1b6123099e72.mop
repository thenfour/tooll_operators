{
  "Name": "ASCIIFilterDitherAndLUT",
  "_id": "b0408d3e-519c-44ba-ab33-1b6123099e72",
  "Namespace": "user.tenfour",
  "Description": "uses custom map, generated by external tool, and uses it to acheive the traditional ASCII filter. actually it w orks best with PETSCII",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "2b0e4b6d-3a14-4c32-a365-cb9eea33bcca",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D MapImage;",
          "Texture2D Image;",
          "float2 CharSize;",
          "float2 TilesPerChar;",
          "float ValuesPerTile;",
          "float2 MapCellCount;",
          "float Scale;",
          "float Shade;",
          "Texture2D DitherPattern;",
          "Texture2D LUT;",
          "float DitherStrength01;",
          "float LUTValues;",
          "float ShadeLift;",
          "float ShadeGamma;",
          "//<<< _parameters\r",
          " \r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float2 texCoord : TEXCOORD;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float2 texCoord: TEXCOORD0;\r",
          "};\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "#define Round(c) (floor((c)+.5)\r",
          "\r",
          "float Grayscale(float3 c) {\r",
          "    return ((0.3 * c.r) + (0.59 * c.g) + (0.11 * c.b));\r",
          "}\r",
          "\r",
          "\r",
          "// 3D LUT texture format:\r",
          "// R = X coord within swatch\r",
          "// G = Y coord (neg)\r",
          "// B = X coord swatches\r",
          "float3 applyColorLUT(Texture2D lut, float3 color) {\r",
          "    float lutWidth, lutRes;\r",
          "    lut.GetDimensions(lutWidth, lutRes);\r",
          "    float2 lutSize = float2(lutWidth, lutRes);\r",
          "  float lutB = floor(color.b * lutRes);// blue swatch index\r",
          "  lutB = clamp(lutB, 0., lutRes - 1.);// clamp to array bounds\r",
          "  lutB = lutB / lutRes; // floor'd X position of blue swatch\r",
          "  float lutR = color.r / lutRes;// position within R swatch\r",
          "  float swatchMaxWidth = 1. / (lutRes + 1.);// a 1.0 value would bleed into the next swatch. clamping utilizes the full mapping range but prevents the overflow.\r",
          "  lutR = clamp(lutR, 0., swatchMaxWidth);\r",
          "  return lut.Load(int3(lutSize * float2(lutR + lutB, 1.-color.g), 0)).rgb;\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "// dithering will be applied at the tile level.\r",
          "\r",
          "// the LUT will be applied at the block level\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    // the upper-left pixel position of the character-sized cell.\r",
          "    //float inputWidth, inputHeight;\r",
          "    //Image.GetDimensions(inputWidth, inputHeight);\r",
          "    //int2 srcCellOrigin = floor(input.texCoord.xy * float2(inputWidth, inputHeight) / CharSize) * CharSize;\r",
          "    float2 ScaledCharSize = CharSize * Scale;\r",
          "    int2 srcCellOrigin = floor(input.pos.xy / ScaledCharSize) * ScaledCharSize;// pixel position of the cell upper left\r",
          "    int2 srcCellPos = input.pos.xy - srcCellOrigin; // pixel position within this cell, 0-ScaledCharSize\r",
          "    float2 HalfTileSize = ScaledCharSize / TilesPerChar / 2.;\r",
          "    srcCellPos /= Scale;// now in coords that play well with the font texture\r",
          "    \r",
          "    float3 cellSrcColor = float3(0,0,0);\r",
          "\r",
          "    float ditherWidth, ditherHeight;\r",
          "    DitherPattern.GetDimensions(ditherWidth, ditherHeight);\r",
          "    \r",
          "    // sample in the cell to determine the \"key\" \"ID\".\r",
          "    int ID = 0; // 1D ID\r",
          "    for (int ty = TilesPerChar.y - 1; ty >= 0; --ty)\r",
          "    {\r",
          "        for (int tx = TilesPerChar.x - 1; tx >= 0; --tx)\r",
          "        {\r",
          "            float2 tileIndex = float2(tx,ty);\r",
          "            float2 tilePos = (tileIndex / TilesPerChar) * ScaledCharSize; // pixel position of the upper-left corner of this tile relative to the char cell\r",
          "            float3 srcColor = Image.Load(int3(srcCellOrigin + tilePos + HalfTileSize + .5, 0)).rgb; // sample the center-ish pix of this tile\r",
          "            \r",
          "            if (tx == 0 && ty == 0) {\r",
          "                cellSrcColor = srcColor;\r",
          "            }\r",
          "            \r",
          "            float val = Grayscale(srcColor);\r",
          "            \r",
          "            // dither this value.\r",
          "            float2 absoluteTileIndex = (srcCellOrigin / TilesPerChar) + tileIndex;\r",
          "            uint2 ditherPos = floor(absoluteTileIndex);\r",
          "            float dith = DitherPattern.Load(uint3(ditherPos % uint2(ditherWidth, ditherHeight), 0)).r;\r",
          "            dith -= .5;\r",
          "            float strength = DitherStrength01 * (1./LUTValues);\r",
          "            dith *= strength;\r",
          "            \r",
          "            val += dith;\r",
          "        \r",
          "            // figure out which \"ID\" this value corresponds to. so we need to transform grayscale val\r",
          "            // to integer 0-ValuesPerTile.\r",
          "            // (val - segCenter) would give us the boundary. for example between 0-1 with 2 segments, the center vals are .25 and .75.\r",
          "            // subtract the center and you get .0 and .5 where you could multiply by segCount and get the proper seg of 0,1.\r",
          "            // however let's not subtract the center, but rather segCenter*.5. Then after integer floor rounding, it will be the correct\r",
          "            // value regardless of scale or any rounding issues.\r",
          "            float halfSegCenter = 0.25 / ValuesPerTile;\r",
          "            val -= halfSegCenter;\r",
          "            val = clamp(val,0,1);\r",
          "            val *= ValuesPerTile;\r",
          "            ID *= ValuesPerTile;\r",
          "            ID += floor(val);// thisTileID;\r",
          "        }\r",
          "    }\r",
          "\r",
          "    // ID is now calculated.\r",
          "    int2 mapCell = int2(0, ID / MapCellCount.x);\r",
          "    mapCell.x = ID - (mapCell.y * MapCellCount.x);\r",
          "\r",
          "    float3 fontColor = MapImage.Load(int3(mapCell * CharSize + srcCellPos, 0)).rgb;\r",
          "    \r",
          "    if (Shade > .5) {\r",
          "        //cellSrcColor = step(.6,cellSrcColor) * .5 + .5;\r",
          "        //fontColor *= cellSrcColor;\r",
          "        float3 shade = applyColorLUT(LUT, cellSrcColor);\r",
          "        shade = lerp(ShadeLift,1,shade);\r",
          "        shade = pow(clamp(shade,0,1), 1./ShadeGamma);\r",
          "        fontColor *= shade;\r",
          "    }\r",
          "    return float4(fontColor,1);\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "3d98d355-cbd5-4158-b234-a11ecc65b24e",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MapImage",
      "MetaInstanceID": "f6d280ad-2722-439e-bac5-3b7be7c719c9",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DitherPattern",
      "MetaInstanceID": "3bc8b21c-9c28-4057-84a8-4c30b0c6c46a",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "LUT",
      "MetaInstanceID": "95f6d9c4-0f8c-405b-8c0d-9d6eb1683f95",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "CharSize.X",
      "MetaInstanceID": "2e7b04e4-0c05-4e56-bb11-310d6a651863",
      "DefaultValue": {
        "Type": "Float",
        "Value": "8"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "1024",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "CharSize.Y",
      "MetaInstanceID": "4cafccfa-785c-4348-ad31-8fa5fe31ba70",
      "DefaultValue": {
        "Type": "Float",
        "Value": "8"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "1024",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TilesPerChar.X",
      "MetaInstanceID": "a35104a4-4b5d-4078-9f30-31b0d097ba65",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "32",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TilesPerChar.Y",
      "MetaInstanceID": "90749ad7-0e00-4fe2-81a5-1d0ff7303975",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "32",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ValuesPerTile",
      "MetaInstanceID": "832043dc-2128-49e9-ab00-4daca44d9413",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "2048",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MapCellCount.X",
      "MetaInstanceID": "28f1e9a4-1e3e-48f4-ad20-098aef6e2ba8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "16"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "2048",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MapCellCount.Y",
      "MetaInstanceID": "63cb5615-561b-4d8e-b9a9-d4301960a775",
      "DefaultValue": {
        "Type": "Float",
        "Value": "16"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "2048",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scale",
      "MetaInstanceID": "8f54143c-2833-43fe-92f6-7f3ff6cfec11",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "INTEGRAL.\r\n",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Shade",
      "MetaInstanceID": "b2f46230-8570-413a-b777-2b6a8ffaefb4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "No",
          "Value": "0"
        },
        {
          "Name": "Yes",
          "Value": "1"
        }
      ]
    },
    {
      "Name": "DitherStrength01",
      "MetaInstanceID": "fd917865-bb0a-43a2-9b51-6a4830254939",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.33"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "LUTValues",
      "MetaInstanceID": "ede15130-164f-45af-8dd1-d57d414f2c64",
      "DefaultValue": {
        "Type": "Float",
        "Value": "16"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "used for dithering to apply strength\r\n",
      "Min": "1",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ShadeLift",
      "MetaInstanceID": "dec7aa32-eaeb-4137-bc0e-f047a8ec75c0",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "Lifts the shade value to let the ASCII character show even for very dark colors.",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ShadeGamma",
      "MetaInstanceID": "f08b3630-5a5a-42d2-bacf-d68b95ccd821",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1.21"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "dd25b0d8-d2bc-4431-bf5f-aafac6de2344",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "5985b786-3b72-4a28-9e56-ae00bbbece0b",
      "MetaID": "a42d7a01-b678-41da-bdfe-5caa78497014",
      "Name": "ASCIIFilterDitherAndLUTFunc",
      "Version": "faf46bb2-8cd6-4361-b465-fba6abb31494",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.IDa42d7a01_b678_41da_bdfe_5caa78497014",
        "{",
        "    public class Class_ASCIIFilterDitherAndLUT : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            MapImage = 1,",
        "            Image = 2,",
        "            CharSizeX = 3,",
        "            CharSizeY = 4,",
        "            TilesPerCharX = 5,",
        "            TilesPerCharY = 6,",
        "            ValuesPerTile = 7,",
        "            MapCellCountX = 8,",
        "            MapCellCountY = 9,",
        "            Scale = 10,",
        "            Shade = 11,",
        "            DitherPattern = 12,",
        "            LUT = 13,",
        "            DitherStrength01 = 14,",
        "            LUTValues = 15,",
        "            ShadeLift = 16,",
        "            ShadeGamma = 17",
        "        }",
        "        //<<< _inputids",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var MapImage = inputs[(int)InputId.MapImage].Eval(context).Image; // Needs to be checked for null!",
        "            var Image = inputs[(int)InputId.Image].Eval(context).Image; // Needs to be checked for null!",
        "            var CharSizeX = inputs[(int)InputId.CharSizeX].Eval(context).Value;",
        "            var CharSizeY = inputs[(int)InputId.CharSizeY].Eval(context).Value;",
        "            var CharSize = new Vector2(CharSizeX, CharSizeY);",
        "            var TilesPerCharX = inputs[(int)InputId.TilesPerCharX].Eval(context).Value;",
        "            var TilesPerCharY = inputs[(int)InputId.TilesPerCharY].Eval(context).Value;",
        "            var TilesPerChar = new Vector2(TilesPerCharX, TilesPerCharY);",
        "            var ValuesPerTile = inputs[(int)InputId.ValuesPerTile].Eval(context).Value;",
        "            var MapCellCountX = inputs[(int)InputId.MapCellCountX].Eval(context).Value;",
        "            var MapCellCountY = inputs[(int)InputId.MapCellCountY].Eval(context).Value;",
        "            var MapCellCount = new Vector2(MapCellCountX, MapCellCountY);",
        "            var Scale = inputs[(int)InputId.Scale].Eval(context).Value;",
        "            var Shade = (int) inputs[(int)InputId.Shade].Eval(context).Value;",
        "            var DitherPattern = inputs[(int)InputId.DitherPattern].Eval(context).Image; // Needs to be checked for null!",
        "            var LUT = inputs[(int)InputId.LUT].Eval(context).Image; // Needs to be checked for null!",
        "            var DitherStrength01 = inputs[(int)InputId.DitherStrength01].Eval(context).Value;",
        "            var LUTValues = inputs[(int)InputId.LUTValues].Eval(context).Value;",
        "            var ShadeLift = inputs[(int)InputId.ShadeLift].Eval(context).Value;",
        "            var ShadeGamma = inputs[(int)InputId.ShadeGamma].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                using (var MapImageView = new ShaderResourceView(context.D3DDevice, MapImage))",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                using (var DitherPatternView = new ShaderResourceView(context.D3DDevice, DitherPattern))",
        "                using (var LUTView = new ShaderResourceView(context.D3DDevice, LUT))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"MapImage\").AsShaderResource().SetResource(MapImageView);",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"CharSize\").AsVector().Set(new Vector2(CharSizeX, CharSizeY));",
        "                    _effect.GetVariableByName(\"TilesPerChar\").AsVector().Set(new Vector2(TilesPerCharX, TilesPerCharY));",
        "                    _effect.GetVariableByName(\"ValuesPerTile\").AsScalar().Set(ValuesPerTile);",
        "                    _effect.GetVariableByName(\"MapCellCount\").AsVector().Set(new Vector2(MapCellCountX, MapCellCountY));",
        "                    _effect.GetVariableByName(\"Scale\").AsScalar().Set(Scale);",
        "                    _effect.GetVariableByName(\"Shade\").AsScalar().Set(Shade);",
        "                    _effect.GetVariableByName(\"DitherPattern\").AsShaderResource().SetResource(DitherPatternView);",
        "                    _effect.GetVariableByName(\"LUT\").AsShaderResource().SetResource(LUTView);",
        "                    _effect.GetVariableByName(\"DitherStrength01\").AsScalar().Set(DitherStrength01);",
        "                    _effect.GetVariableByName(\"LUTValues\").AsScalar().Set(LUTValues);",
        "                    _effect.GetVariableByName(\"ShadeLift\").AsScalar().Set(ShadeLift);",
        "                    _effect.GetVariableByName(\"ShadeGamma\").AsScalar().Set(ShadeGamma);",
        "                //<<< _setup",
        "",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dd25b0d8-d2bc-4431-bf5f-aafac6de2344"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2b0e4b6d-3a14-4c32-a365-cb9eea33bcca",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f6d280ad-2722-439e-bac5-3b7be7c719c9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3d98d355-cbd5-4158-b234-a11ecc65b24e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2e7b04e4-0c05-4e56-bb11-310d6a651863",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4cafccfa-785c-4348-ad31-8fa5fe31ba70",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a35104a4-4b5d-4078-9f30-31b0d097ba65",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "90749ad7-0e00-4fe2-81a5-1d0ff7303975",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "832043dc-2128-49e9-ab00-4daca44d9413",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "28f1e9a4-1e3e-48f4-ad20-098aef6e2ba8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "63cb5615-561b-4d8e-b9a9-d4301960a775",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8f54143c-2833-43fe-92f6-7f3ff6cfec11",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b2f46230-8570-413a-b777-2b6a8ffaefb4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3bc8b21c-9c28-4057-84a8-4c30b0c6c46a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "95f6d9c4-0f8c-405b-8c0d-9d6eb1683f95",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "fd917865-bb0a-43a2-9b51-6a4830254939",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ede15130-164f-45af-8dd1-d57d414f2c64",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "dec7aa32-eaeb-4137-bc0e-f047a8ec75c0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f08b3630-5a5a-42d2-bacf-d68b95ccd821",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5985b786-3b72-4a28-9e56-ae00bbbece0b"
    }
  ]
}