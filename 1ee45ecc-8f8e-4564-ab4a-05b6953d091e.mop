{
  "Name": "TwistDistortAxis",
  "_id": "1ee45ecc-8f8e-4564-ab4a-05b6953d091e",
  "Namespace": "user.tenfour",
  "Description": "GPU deformer which rotates a mesh along axes.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "c4dba041-d91d-43ba-9f47-f6ce1c131fa6",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _parameters\r",
          "float3 Period;",
          "float3 Phase;",
          "Texture2D AngleAmt;",
          "//<<< _parameters\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "float _noiseTime=0;\r",
          "float _frequency=0;\r",
          "\r",
          "float4x4 RotationMatrix(float3 axis, float angle)\r",
          "{\r",
          "    axis = normalize(axis);\r",
          "    float s = sin(angle);\r",
          "    float c = cos(angle);\r",
          "    float oc = 1.0 - c;\r",
          "    \r",
          "    return float4x4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\r",
          "                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\r",
          "                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\r",
          "                0.0,                                0.0,                                0.0,                                1.0);\r",
          "}\r",
          "\r",
          "float getAngle(float phase, float x) {\r",
          "    return phase + x;\r",
          "    //float amt = smoothstep(0.,.1,x);\r",
          "    //return lerp(0, x, amt) + phase;\r",
          "}\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{\r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "        Vertex vertex = input[i];\r",
          "        float4x4 transform;\r",
          "\r",
          "        if (Period.x != 0) {\r",
          "            transform = RotationMatrix(float3(1,0,0), getAngle(Phase.x, vertex.pos.x) * Period.x);\r",
          "            vertex.pos = mul(transform, vertex.pos);\r",
          "            vertex.normal = mul(transform, vertex.normal.xyzz).xyz;\r",
          "        }\r",
          "        if (Period.y != 0) {\r",
          "            transform = RotationMatrix(float3(0,1,0), getAngle(Phase.y, vertex.pos.y) * Period.y);\r",
          "            vertex.pos = mul(transform, vertex.pos);\r",
          "            vertex.normal = mul(transform, vertex.normal.xyzz).xyz;\r",
          "        }\r",
          "        if (Period.z != 0) {\r",
          "            transform = RotationMatrix(float3(0,0,1), getAngle(Phase.z, vertex.pos.z) * Period.z);\r",
          "            vertex.pos = mul(transform, vertex.pos);\r",
          "            vertex.normal = mul(transform, vertex.normal.xyzz).xyz;\r",
          "        }\r",
          "\r",
          "\r",
          "        outputStream.Append(vertex);\r",
          "    }\r",
          "\r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scene",
      "MetaInstanceID": "68316e71-2e0d-4903-87e0-c11d678c5ab9",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Period.X",
      "MetaInstanceID": "9ecc4ba8-8e2a-4a5b-bd6b-a41990d318f4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Period.Y",
      "MetaInstanceID": "d79375ee-618b-4a9b-95b1-309754737f62",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Period.Z",
      "MetaInstanceID": "0ff0bd6a-1174-43a3-85da-152b617b328b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Phase.X",
      "MetaInstanceID": "ccf2d137-c283-4785-9c09-9f7afce1dc4d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Phase.Y",
      "MetaInstanceID": "bc7a7360-6b2b-4672-89a6-e961ccd0d0bf",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Phase.Z",
      "MetaInstanceID": "d622bb34-93af-44e7-8ef5-5cb18d62980d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "AngleAmt",
      "MetaInstanceID": "87701b53-c221-4ed9-8c00-56077f017032",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "d48f3b3b-a437-4eac-be7c-eb5c371c869e",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "f779dc31-ed28-459f-8cd8-95228e081a49",
      "MetaID": "e03d5bd1-1efd-4012-903a-07ba8eae3d42",
      "Name": "TwistDistortAxisFunc",
      "Version": "cbf9418d-40ae-4746-9b4e-c45869f6443e",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using SharpDX.Direct3D;",
        "",
        "namespace Framefield.Core.IDe03d5bd1_1efd_4012_903a_07ba8eae3d42",
        "{",
        "    public class Class_TwistDistortAxis : FXSourceCodeFunction, IFXSceneSourceCode, IMeshSupplier",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scene = 1,",
        "            PeriodX = 2,",
        "            PeriodY = 3,",
        "            PeriodZ = 4,",
        "            PhaseX = 5,",
        "            PhaseY = 6,",
        "            PhaseZ = 7,",
        "            AngleAmt = 8",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class_TwistDistortAxis()",
        "        {",
        "            _meshCollector = new MeshCollector(this);",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public void AddMeshesTo(ICollection<Mesh> meshes)",
        "        {",
        "            UpdateMesh(new OperatorPartContext(), OperatorPart.Connections);",
        "            if (_mesh != null)",
        "                meshes.Add(_mesh);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "",
        "                if (_mesh.Vertices != null)",
        "                {",
        "                    // render stream output to screen or whatever target is set",
        "                    context.Renderer.SetupEffect(context);",
        "                    context.Renderer.Render(_mesh, context);",
        "                }",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            if (!Changed && _mesh.Vertices != null)",
        "                return;",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Scene = inputs[(int)InputId.Scene];",
        "            var PeriodX = inputs[(int)InputId.PeriodX].Eval(context).Value;",
        "            var PeriodY = inputs[(int)InputId.PeriodY].Eval(context).Value;",
        "            var PeriodZ = inputs[(int)InputId.PeriodZ].Eval(context).Value;",
        "            var Period = new Vector3(PeriodX, PeriodY, PeriodZ);",
        "            var PhaseX = inputs[(int)InputId.PhaseX].Eval(context).Value;",
        "            var PhaseY = inputs[(int)InputId.PhaseY].Eval(context).Value;",
        "            var PhaseZ = inputs[(int)InputId.PhaseZ].Eval(context).Value;",
        "            var Phase = new Vector3(PhaseX, PhaseY, PhaseZ);",
        "            var AngleAmt = inputs[(int)InputId.AngleAmt].Eval(context).Image; // Needs to be checked for null!",
        "            //<<< _params",
        "",
        "            if (Scene.Func.Changed || _mesh.Vertices == null)",
        "            {",
        "                //Logger.Info(this, \"collect meshes\");",
        "                _meshCollector.Collect(Scene);",
        "                Scene.Func.Changed = false;",
        "            }",
        "",
        "            var inputMesh = _meshCollector.FirstMeshOrDefault;",
        "            if (inputMesh == null)",
        "                return;",
        "",
        "            _mesh.AttributesSize = inputMesh.AttributesSize;",
        "            _mesh.NumTriangles = inputMesh.NumTriangles;",
        "            _mesh.InputElements = inputMesh.InputElements;",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != inputMesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                if (_mesh.Vertices != null)",
        "                    _mesh.Vertices.Dispose();",
        "",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                    {",
        "                                                                        BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                        CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                        OptionFlags = ResourceOptionFlags.None,",
        "                                                                        SizeInBytes = _mesh.NumTriangles*inputMesh.AttributesSize*3,",
        "                                                                        Usage = ResourceUsage.Default",
        "                                                                    });",
        "            }",
        "",
        "            _effect.GetVariableByName(\"Phase\").AsVector().Set(Phase);",
        "            _effect.GetVariableByName(\"Period\").AsVector().Set(Period);",
        "            ",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, 0) });",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(inputMesh.Vertices, inputMesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw(_mesh.NumTriangles*3, 0);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "        private MeshCollector _meshCollector;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f779dc31-ed28-459f-8cd8-95228e081a49",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d48f3b3b-a437-4eac-be7c-eb5c371c869e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c4dba041-d91d-43ba-9f47-f6ce1c131fa6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f779dc31-ed28-459f-8cd8-95228e081a49"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "68316e71-2e0d-4903-87e0-c11d678c5ab9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f779dc31-ed28-459f-8cd8-95228e081a49"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9ecc4ba8-8e2a-4a5b-bd6b-a41990d318f4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f779dc31-ed28-459f-8cd8-95228e081a49"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d79375ee-618b-4a9b-95b1-309754737f62",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f779dc31-ed28-459f-8cd8-95228e081a49"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0ff0bd6a-1174-43a3-85da-152b617b328b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f779dc31-ed28-459f-8cd8-95228e081a49"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ccf2d137-c283-4785-9c09-9f7afce1dc4d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f779dc31-ed28-459f-8cd8-95228e081a49"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bc7a7360-6b2b-4672-89a6-e961ccd0d0bf",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f779dc31-ed28-459f-8cd8-95228e081a49"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d622bb34-93af-44e7-8ef5-5cb18d62980d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f779dc31-ed28-459f-8cd8-95228e081a49"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "87701b53-c221-4ed9-8c00-56077f017032",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f779dc31-ed28-459f-8cd8-95228e081a49"
    }
  ]
}