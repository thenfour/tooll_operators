{
  "Name": "Interstellar",
  "_id": "c2239587-cb4c-40a5-857c-e6e968c51831",
  "Namespace": "user.tenfour.shaders",
  "Description": "https://www.shadertoy.com/view/Xdl3D2\r\n\r\nstar field effect\r\nfor noise, use perlin",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "c7e0f150-fe8d-4ba5-8f24-1b1f0d7ab58f",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "float Z;",
          "float Iterations;",
          "Texture2D Noise;",
          "float Speed;",
          "float Rotation;",
          "//<<< _parameters\r",
          "\r",
          "const float iTime;\r",
          "static const float PI = atan(1.)*4.;\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "#define iResolution RenderTargetSize\r",
          "#define vec2 float2\r",
          "#define vec3 float3\r",
          "#define vec4 float4\r",
          "#define mat2 float2x2\r",
          "#define fract frac\r",
          "#define mod fmod\r",
          "#define mix lerp\r",
          "#define vec20 (float2(0,0))\r",
          "#define vec30 (float3(0,0,0))\r",
          "#define vec40 (float4(0,0,0,0))\r",
          "#define vec21 (float2(1,1))\r",
          "#define vec31 (float3(1,1,1))\r",
          "#define vec41 (float4(1,1,1,1))\r",
          "#define vec2x(x) (float2((x),(x)))\r",
          "#define vec3x(x) (float3((x),(x),(x)))\r",
          "#define vec4x(x) (float4((x),(x),(x),(x)))\r",
          "\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Wrap;",
          "    AddressV = Wrap;",
          "};",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "static const float tau = 6.2831853;\r",
          "\r",
          "vec4 SampleNoise( in int2 x )\r",
          "{\r",
          "\treturn Noise.Sample(samLinear, (vec2(x+.618))/RenderTargetSize);\r",
          "}\r",
          "\r",
          "float2x2 rot2D(float r){\r",
          "    return float2x2(cos(r), -sin(r), sin(r), cos(r));\r",
          "}\r",
          "\r",
          "void mainImage( out vec4 fragColor, in vec2 fragCoord )\r",
          "{\r",
          "\tvec3 ray;\r",
          "\tray.xy = 2.0*(fragCoord.xy-iResolution.xy*.5)/iResolution.x;\r",
          "\tray.xy = mul(ray.xy, rot2D(Rotation / 360 * PI2));\r",
          "\tray.z = 1.0;\r",
          "\r",
          "\t//float offset = iTime*.5;\t\r",
          "\t//float speed2 = (cos(offset)+1.0)*2.0;\r",
          "\t//float speed = speed2+.1;\r",
          "    float speed = Speed * 4;\r",
          "    float speed2 = Speed * 2;// red shift\r",
          "    //float offset = 0;\r",
          "    //float t = iTime * .1;\r",
          "\t//offset += sin(offset)*.96;\r",
          "\t//offset *= 2.0;\r",
          "\t\r",
          "\tvec3 col = vec3x(0);\r",
          "\t\r",
          "\tvec3 stp = ray/max(abs(ray.x),abs(ray.y));\r",
          "\t\r",
          "\tvec3 pos = 2.0*stp+.5;\r",
          "\tfor ( int i=0; i < Iterations; i++ )\r",
          "\t{\r",
          "\r",
          "\t\tfloat4 n = SampleNoise(pos.xy) * 1111.8;\r",
          "\t\tfloat z = n.r;\r",
          "\t\t//pos.xy = mul(pos.xy, rot2D(mod(z, .1)));\r",
          "\t\tz = fract(z - Z);\r",
          "\t\tfloat d = 50.0*z-pos.z;\r",
          "\t\tfloat w = pow(max(0.0,1.0-8.0*length(fract(pos.xy)-.5)),2.0);\r",
          "\t\tvec3 c = max(vec3x(0),vec3(1.0-abs(d+speed2*.5)/speed,1.0-abs(d)/speed,1.0-abs(d-speed2*.5)/speed));\r",
          "\t\tcol += 1.5*(1.0-z)*c*w;\r",
          "\t\tpos += stp;\r",
          "\t}\r",
          "\t\r",
          "\tfragColor = float4(col, 1);\r",
          "}\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o;\r",
          "    mainImage(o, input.pos.xy);\r",
          "    o = clamp(o,0.,1.);\r",
          "    return o;\r",
          "}\r",
          "",
          "//<<< PS\r",
          "\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Z",
      "MetaInstanceID": "849f1c60-47b0-4a27-bd14-7bd54164fef5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Iterations",
      "MetaInstanceID": "20578233-ee2b-4038-9571-e444cd64058f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "20"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Noise",
      "MetaInstanceID": "ac53eb1a-50d5-4879-b287-31357c36a01e",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Speed",
      "MetaInstanceID": "127aa152-301c-4925-9051-7684fa956ab5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.6"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0.02",
      "Max": "5",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotation",
      "MetaInstanceID": "bbf7aaa3-68fe-407a-ab46-50338e5ca707",
      "DefaultValue": {
        "Type": "Float",
        "Value": "35"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "2bdba715-da0a-45a9-a9d6-0462fb93d8eb",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "7d42e8e8-d7e3-409d-8484-cb0e06142833",
      "MetaID": "bbef501d-52bc-4540-a806-6a7a250349d8",
      "Name": "InterstellarFunc",
      "Version": "ee4ba319-46a9-4f4c-8c66-434d1f3c6181",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.IDbbef501d_52bc_4540_a806_6a7a250349d8",
        "{",
        "    public class Class_Interstellar : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Z = 1,",
        "            Iterations = 2,",
        "            Noise = 3,",
        "            Speed = 4,",
        "            Rotation = 5",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Z = inputs[(int)InputId.Z].Eval(context).Value;",
        "            var Iterations = inputs[(int)InputId.Iterations].Eval(context).Value;",
        "            var Noise = inputs[(int)InputId.Noise].Eval(context).Image; // Needs to be checked for null!",
        "            var Speed = inputs[(int)InputId.Speed].Eval(context).Value;",
        "            var Rotation = inputs[(int)InputId.Rotation].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                using (var NoiseView = new ShaderResourceView(context.D3DDevice, Noise))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Z\").AsScalar().Set(Z);",
        "                    _effect.GetVariableByName(\"Iterations\").AsScalar().Set(Iterations);",
        "                    _effect.GetVariableByName(\"Noise\").AsShaderResource().SetResource(NoiseView);",
        "                    _effect.GetVariableByName(\"Speed\").AsScalar().Set(Speed);",
        "                    _effect.GetVariableByName(\"Rotation\").AsScalar().Set(Rotation);",
        "                //<<< _setup",
        "",
        "                _effect.GetVariableByName(\"iTime\").AsScalar().Set(context.Time);",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7d42e8e8-d7e3-409d-8484-cb0e06142833",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2bdba715-da0a-45a9-a9d6-0462fb93d8eb"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c7e0f150-fe8d-4ba5-8f24-1b1f0d7ab58f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7d42e8e8-d7e3-409d-8484-cb0e06142833"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "849f1c60-47b0-4a27-bd14-7bd54164fef5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7d42e8e8-d7e3-409d-8484-cb0e06142833"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "20578233-ee2b-4038-9571-e444cd64058f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7d42e8e8-d7e3-409d-8484-cb0e06142833"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ac53eb1a-50d5-4879-b287-31357c36a01e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7d42e8e8-d7e3-409d-8484-cb0e06142833"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "127aa152-301c-4925-9051-7684fa956ab5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7d42e8e8-d7e3-409d-8484-cb0e06142833"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bbf7aaa3-68fe-407a-ab46-50338e5ca707",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7d42e8e8-d7e3-409d-8484-cb0e06142833"
    }
  ]
}