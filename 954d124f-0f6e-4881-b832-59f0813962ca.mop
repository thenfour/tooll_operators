{
  "Name": "SH_CopperCoil",
  "_id": "954d124f-0f6e-4881-b832-59f0813962ca",
  "Namespace": "user.tenfour.shaders",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "1ea62f18-a7f5-44cd-bcc3-19906070132b",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "",
          "//<<< _parameters\r",
          "\r",
          "const float iBPM;\r",
          "const float iProgram;\r",
          "const float iTime;\r",
          "const float iBeat;\r",
          "static const float PI = atan(1.)*4.;\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "#define iResolution RenderTargetSize\r",
          "#define vec2 float2\r",
          "#define vec3 float3\r",
          "#define vec4 float4\r",
          "#define mat2 float2x2\r",
          "#define fract frac\r",
          "#define mod fmod\r",
          "#define mix lerp\r",
          "#define vec20 (float2(0,0))\r",
          "#define vec30 (float3(0,0,0))\r",
          "#define vec40 (float4(0,0,0,0))\r",
          "#define vec21 (float2(1,1))\r",
          "#define vec31 (float3(1,1,1))\r",
          "#define vec41 (float4(1,1,1,1))\r",
          "#define vec2x(x) (float2((x),(x)))\r",
          "#define vec3x(x) (float3((x),(x),(x)))\r",
          "#define vec4x(x) (float4((x),(x),(x),(x)))\r",
          "\r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "\r",
          "vec3 dtoa(float d, vec3 amount){\r",
          "    return vec3(1. / clamp(d*amount, vec3x(1), amount));\r",
          "}\r",
          "mat2 rot2D(float r){\r",
          "    return mat2(cos(r), sin(r), -sin(r), cos(r));\r",
          "}\r",
          "float nsin(float x) {\r",
          "    return sin(x)*.5+.5;\r",
          "}\r",
          "vec3 hash32(vec2 p) {\r",
          "\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\r",
          "    p3 += dot(p3, p3.yxz+19.19);\r",
          "    return fract((p3.xxy+p3.yzz)*p3.zyx);\r",
          "}\r",
          "float opUnion( float d1, float d2 ) { return min(d1,d2); }\r",
          "float opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\r",
          "\r",
          "static const float centerDist = sqrt(3.)/3.;\r",
          "\r",
          "float sdCirc(vec2 p) {\r",
          "    p.y -= centerDist;\r",
          "    return length(p)-1.;\r",
          "}\r",
          "\r",
          "float sdEquilateralTriangle(  in vec2 p )\r",
          "{\r",
          "    const float k = sqrt(3.0);\r",
          "    p.x = abs(p.x) - 1.0;\r",
          "    if( p.x + k*p.y > 0.0 ) p = vec2( p.x - k*p.y, -k*p.x - p.y )/2.0;\r",
          "    p.x += 2.0 - 2.0*clamp( (p.x+2.0)/2.0, 0.0, 1.0 );\r",
          "    return -length(p)*sign(p.y);\r",
          "}\r",
          "float sdShape(vec2 p, float m) {\r",
          "    return mix(sdEquilateralTriangle(p), sdCirc(p), m);\r",
          "}\r",
          "\r",
          "void mainImage( out vec4 o, in vec2 fragCoord )\r",
          "{\r",
          "    vec2 uv = fragCoord/iResolution.xy-.5;\r",
          "    uv.x *= iResolution.x / iResolution.y;\r",
          "    uv.y += .05;\r",
          "    uv *= 2.2;\r",
          "    float t = 2.3 + iTime*PI/4.;\r",
          "    float sd = 1.;\r",
          "    float sgn = 1.;\r",
          "    vec2 uv2 = uv;\r",
          "    for (float i = 0.; i < 25.; ++ i) {\r",
          "        float a = (t+iBeat)*(sgn*=-1.);\r",
          "        float sd2 = sdShape(mul(uv2*.9,rot2D(a))+vec2(0,centerDist), nsin(i*.2+t));\r",
          "    \tsd2 = opSubtraction(sd2, sdShape(uv2+vec2(0,centerDist), nsin(i*.2+t)));\r",
          "        sd = opUnion(sd, sd2);\r",
          "        uv2 *= 1.05 + pow(iBeat*.4,3.);\r",
          "    }\r",
          "\r",
          "    o.rgb = dtoa(sd, vec3(50,400,400)) * vec3(.9,.8,.5);\r",
          "    o *= .9;\r",
          "    if (sd < 0.) {\r",
          "        o.rg = mul(o.rg, rot2D(sd*5.));// yes i know this is kinda nonsense\r",
          "    \to -= clamp(sd,sd,0.)*4.;\r",
          "    }\r",
          "    //o = fract(o);\r",
          "    o = clamp(o,0.,1.);\r",
          "    o = pow(o, o-o+.5);\r",
          "    o.rgb += (hash32(fragCoord+t)-.5)*.1;\r",
          "    vec2 N = fragCoord / iResolution.xy-.5;\r",
          "    o.rgb += dot(N,N) * vec3(0,1,1);\r",
          "}\r",
          "\r",
          "",
          "//<<< PS\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o;\r",
          "    mainImage(o, input.pos.xy);\r",
          "    o = clamp(o,0.,1.);\r",
          "    o.a = 1.0;\r",
          "    return o;\r",
          "}\r",
          "\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "09bc7c26-660b-4032-88f0-c72784c6eda0",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "cedd58ba-b45c-4c25-86eb-d65003b410b4",
      "MetaID": "7fef30f5-f8eb-487d-85ea-876a79a90e46",
      "Name": "SH_CopperCoilFunc",
      "Version": "e674a5bb-8a09-419e-8fa1-7d7a199cb309",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID7fef30f5_f8eb_487d_85ea_876a79a90e46",
        "{",
        "    public class Class_SH_CopperCoil : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            //<<< _params",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                //<<< _setup",
        "",
        "                if (context.Objects.ContainsKey(\"SKPlayerState\")) {",
        "                  var skstate = (SlashKickPerformer.SKPlayerState)context.Objects[\"SKPlayerState\"];",
        "                    _effect.GetVariableByName(\"iBPM\").AsScalar().Set((float)skstate.BPM);",
        "                    _effect.GetVariableByName(\"iProgram\").AsScalar().Set(skstate.ProgramIndex);",
        "                    _effect.GetVariableByName(\"iBeat\").AsScalar().Set((float)skstate.Beatfrac);",
        "                }",
        "",
        "                _effect.GetVariableByName(\"iTime\").AsScalar().Set(context.Time);",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cedd58ba-b45c-4c25-86eb-d65003b410b4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "09bc7c26-660b-4032-88f0-c72784c6eda0"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1ea62f18-a7f5-44cd-bcc3-19906070132b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "cedd58ba-b45c-4c25-86eb-d65003b410b4"
    }
  ]
}