{
  "Name": "SH_HypnoSpiral",
  "_id": "5c4f17e1-adeb-4b3c-b2ba-61f612b749cd",
  "Namespace": "user.tenfour.shaders",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "78c80bbb-aeee-4dfd-bec5-d58294b72c80",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "float Phase;",
          "float Power;",
          "float TextureScale;",
          "float ShadeAmount;",
          "float ShadePower;",
          "float FOV;",
          "float3 ChromaticSeparation;",
          "//<<< _parameters\r",
          "\r",
          "const float iBPM;\r",
          "const float iProgram;\r",
          "const float iTime;\r",
          "const float iBeat;\r",
          "static const float PI = atan(1.)*4.;\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "#define iResolution RenderTargetSize\r",
          "#define vec2 float2\r",
          "#define vec3 float3\r",
          "#define vec4 float4\r",
          "#define mat2 float2x2\r",
          "#define fract frac\r",
          "#define mod fmod\r",
          "#define mix lerp\r",
          "#define vec20 (float2(0,0))\r",
          "#define vec30 (float3(0,0,0))\r",
          "#define vec40 (float4(0,0,0,0))\r",
          "#define vec21 (float2(1,1))\r",
          "#define vec31 (float3(1,1,1))\r",
          "#define vec41 (float4(1,1,1,1))\r",
          "#define vec2x(x) (float2((x),(x)))\r",
          "#define vec3x(x) (float3((x),(x),(x)))\r",
          "#define vec4x(x) (float4((x),(x),(x),(x)))\r",
          "\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Wrap;",
          "    AddressV = Wrap;",
          "};",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "\r",
          "\r",
          "void mainImage(out vec4 o, vec2 O)\r",
          "{\r",
          "    vec2 R = iResolution.xy;\r",
          "    vec2 uv = O / R - .5;\r",
          "    uv.x *= R.x / R.y;\r",
          "\r",
          "    if (length(uv) == 0) {\r",
          "        o = vec4(0,0,0,0);\r",
          "        return;\r",
          "    }\r",
          "    \r",
          "    float p = Power;\r",
          "    float r = atan2(uv.x, uv.y);\r",
          "\r",
          "    uv = sign(uv) * pow(abs(uv), p);\r",
          "\r",
          "    float z = 1./length(uv);\r",
          "    z = pow(max(0,z), 1/p + FOV);\r",
          "    float screenZ = z;\r",
          "\r",
          "    //z += Phase;\r",
          "    z += (r + Phase) * TextureScale;\r",
          "    z = frac(z / PI2);\r",
          "    \r",
          "    //z += r;// * TextureScale;\r",
          "    //z = frac(texZ);\r",
          "    //texZ = (texZ) % TextureScale;\r",
          "    \r",
          "\r",
          "    //o = Texture.Sample(samLinear, texuv);// vec4(tex,tex,0,0);\r",
          "    o = float4(1,1,1,1);\r",
          "    \r",
          "    //z /= TextureScale / PI2;\r",
          "    //z = frac(z);\r",
          "    \r",
          "    float3 z2 = z +ChromaticSeparation;// float3(-.1,0,.1);\r",
          "    float3 shade = abs(z2); //min(length(z2), length(1-z2));\r",
          "    //shade = length(shade);\r",
          "    shade = lerp(1, shade, ShadeAmount);\r",
          "    shade = pow(max(0,shade),ShadePower);\r",
          "    \r",
          "    o.rgb *= shade;\r",
          "    o /= screenZ;\r",
          "}\r",
          "\r",
          "",
          "//<<< PS\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o;\r",
          "    mainImage(o, input.pos.xy);\r",
          "    o = clamp(o,0.,1.);\r",
          "    o.a = 1.0;\r",
          "    return o;\r",
          "}\r",
          "\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Phase",
      "MetaInstanceID": "c99efcb9-0858-4872-9171-cb5a3c076e22",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Power",
      "MetaInstanceID": "783d0a24-a102-4738-a80c-1924be440fc3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "6"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TextureScale",
      "MetaInstanceID": "7e0b6c0d-7865-4acb-9a68-a9e38cd67d9e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-1000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FOV",
      "MetaInstanceID": "eec31487-126a-4006-9074-82ad32ec8a66",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-1",
      "Max": "1",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ShadeAmount",
      "MetaInstanceID": "b7cf0104-6848-4d5e-b3b9-25b7aaab6a03",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ShadePower",
      "MetaInstanceID": "421cd827-cae3-4832-beaf-1c67b87a6793",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ChromaticSeparation.X",
      "MetaInstanceID": "63d263e5-368a-4f64-a2ca-ba9393dd9769",
      "DefaultValue": {
        "Type": "Float",
        "Value": "-0.04"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ChromaticSeparation.Y",
      "MetaInstanceID": "7f2289d1-9b39-4f65-97e3-54cc360e5d1a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.02"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ChromaticSeparation.Z",
      "MetaInstanceID": "bed85072-1f11-495a-ace0-d0819ea6a1da",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.03"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "a101304c-a21e-4e24-8aeb-449740d8b10c",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "0f8153ff-e9ad-4264-adc3-1238ef81c975",
      "MetaID": "adbf664e-2ed2-41fe-95e0-28ddd828c07f",
      "Name": "SH_HypnoSpiralFunc",
      "Version": "90fbc040-9522-4c53-8e66-ea6e3b85108f",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.IDadbf664e_2ed2_41fe_95e0_28ddd828c07f",
        "{",
        "    public class Class_SH_HypnoSpiral : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Phase = 1,",
        "            Power = 2,",
        "            TextureScale = 3,",
        "            ShadeAmount = 4,",
        "            ShadePower = 5,",
        "            FOV = 6,",
        "            ChromaticSeparationX = 7,",
        "            ChromaticSeparationY = 8,",
        "            ChromaticSeparationZ = 9",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Phase = inputs[(int)InputId.Phase].Eval(context).Value;",
        "            var Power = inputs[(int)InputId.Power].Eval(context).Value;",
        "            var TextureScale = inputs[(int)InputId.TextureScale].Eval(context).Value;",
        "            var ShadeAmount = inputs[(int)InputId.ShadeAmount].Eval(context).Value;",
        "            var ShadePower = inputs[(int)InputId.ShadePower].Eval(context).Value;",
        "            var FOV = inputs[(int)InputId.FOV].Eval(context).Value;",
        "            var ChromaticSeparationX = inputs[(int)InputId.ChromaticSeparationX].Eval(context).Value;",
        "            var ChromaticSeparationY = inputs[(int)InputId.ChromaticSeparationY].Eval(context).Value;",
        "            var ChromaticSeparationZ = inputs[(int)InputId.ChromaticSeparationZ].Eval(context).Value;",
        "            var ChromaticSeparation = new Vector3(ChromaticSeparationX, ChromaticSeparationY, ChromaticSeparationZ);",
        "            //<<< _params",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Phase\").AsScalar().Set(Phase);",
        "                    _effect.GetVariableByName(\"Power\").AsScalar().Set(Power);",
        "                    _effect.GetVariableByName(\"TextureScale\").AsScalar().Set(TextureScale);",
        "                    _effect.GetVariableByName(\"ShadeAmount\").AsScalar().Set(ShadeAmount);",
        "                    _effect.GetVariableByName(\"ShadePower\").AsScalar().Set(ShadePower);",
        "                    _effect.GetVariableByName(\"FOV\").AsScalar().Set(FOV);",
        "                    _effect.GetVariableByName(\"ChromaticSeparation\").AsVector().Set(new Vector3(ChromaticSeparationX, ChromaticSeparationY, ChromaticSeparationZ));",
        "                //<<< _setup",
        "",
        "                if (context.GlobalObjects.ContainsKey(\"SKPlayerState\")) {",
        "                  var skstate = (SlashKickPerformer.SKPlayerState)context.GlobalObjects[\"SKPlayerState\"];",
        "                    _effect.GetVariableByName(\"iBPM\").AsScalar().Set((float)skstate.BPM);",
        "                    _effect.GetVariableByName(\"iProgram\").AsScalar().Set(skstate.ProgramIndex);",
        "                    _effect.GetVariableByName(\"iBeat\").AsScalar().Set((float)skstate.Beat);",
        "                }",
        "",
        "                _effect.GetVariableByName(\"iTime\").AsScalar().Set(context.Time);",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0f8153ff-e9ad-4264-adc3-1238ef81c975",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a101304c-a21e-4e24-8aeb-449740d8b10c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "78c80bbb-aeee-4dfd-bec5-d58294b72c80",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0f8153ff-e9ad-4264-adc3-1238ef81c975"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c99efcb9-0858-4872-9171-cb5a3c076e22",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0f8153ff-e9ad-4264-adc3-1238ef81c975"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "783d0a24-a102-4738-a80c-1924be440fc3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0f8153ff-e9ad-4264-adc3-1238ef81c975"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7e0b6c0d-7865-4acb-9a68-a9e38cd67d9e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0f8153ff-e9ad-4264-adc3-1238ef81c975"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b7cf0104-6848-4d5e-b3b9-25b7aaab6a03",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0f8153ff-e9ad-4264-adc3-1238ef81c975"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "421cd827-cae3-4832-beaf-1c67b87a6793",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0f8153ff-e9ad-4264-adc3-1238ef81c975"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "eec31487-126a-4006-9074-82ad32ec8a66",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0f8153ff-e9ad-4264-adc3-1238ef81c975"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "63d263e5-368a-4f64-a2ca-ba9393dd9769",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0f8153ff-e9ad-4264-adc3-1238ef81c975"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7f2289d1-9b39-4f65-97e3-54cc360e5d1a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0f8153ff-e9ad-4264-adc3-1238ef81c975"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bed85072-1f11-495a-ace0-d0819ea6a1da",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0f8153ff-e9ad-4264-adc3-1238ef81c975"
    }
  ]
}