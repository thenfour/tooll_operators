{
  "Name": "SKPlayerStateToString",
  "_id": "afaa004b-6d16-4a1f-a13d-2a2b55d024b0",
  "Namespace": "user.tenfour",
  "Description": "Extracts the Nth Element of an incoming generic String List.\r\n\r\nTip: Try formats like...\r\n\r\n  {0:0.00} for two digit precision\r\n  {0:0} for integer\r\n  \"Some text: {0:0}\" for additional text\r\n  {0:+0.000;-#0.000}  to add + and - signs in front ",
  "Inputs": [],
  "Outputs": [
    {
      "Name": "Value",
      "MetaInstanceID": "da8a046b-677f-4278-ae17-c66bc200c6dd",
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "b1006d87-ac75-4a72-a23f-277677ce1c19",
      "MetaID": "676a46e9-529d-4616-b6bb-71c848b6dc7c",
      "Name": "SKPlayerStateToStringFunc",
      "Version": "3a59b580-6bb3-4356-9f3c-6f162a2f08a2",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "",
        "",
        "namespace Framefield.Core.ID676a46e9_529d_4616_b6bb_71c848b6dc7c",
        "{",
        "",
        "    // https://stackoverflow.com/questions/87304/calculating-frames-per-second-in-a-game",
        "    public class RateCalc{",
        "        const int MAXSAMPLES = 40;",
        "        int tickindex=0;",
        "        double ticksum=0;",
        "        double[] ticklist = new double[MAXSAMPLES];",
        "",
        "        public double? AverageEventDurationSeconds { get; private set; }",
        "        public double? AverageEventsPerSecond {",
        "            get {",
        "                if (!AverageEventDurationSeconds.HasValue)",
        "                    return null;",
        "                return 1.0 / AverageEventDurationSeconds.Value;",
        "            }",
        "        }",
        "",
        "        public RateCalc() {",
        "            Reset();",
        "        }",
        "        public void Reset() {",
        "            tickindex=0;",
        "            ticksum=0;",
        "            AverageEventDurationSeconds = null;",
        "            for(int i = 0; i < MAXSAMPLES; ++ i) {",
        "                ticklist[i] = 0;",
        "            }",
        "        }",
        "        ",
        "        public override string ToString() {",
        "            double? rate = AverageEventsPerSecond;",
        "            if (!rate.HasValue)",
        "                return \"(n/a)\";",
        "            return rate.Value.ToString(\"0.00\");",
        "        }",
        "        ",
        "        /* average will ramp up until the buffer is full */",
        "        /* returns average ticks per frame over the MAXSAMPLES last frames */",
        "        ",
        "        public void OnEvent(double eventDurationSeconds)",
        "        {",
        "            ticksum-=ticklist[tickindex];  /* subtract value falling off */",
        "            ticksum+=eventDurationSeconds;              /* add new value */",
        "            ticklist[tickindex]=eventDurationSeconds;   /* save new value so it can be subtracted later */",
        "            if(++tickindex==MAXSAMPLES)    /* inc buffer index */",
        "                tickindex=0;",
        "        ",
        "            /* return average */",
        "            this.AverageEventDurationSeconds = ticksum/MAXSAMPLES;",
        "        }",
        "    }",
        "",
        "    public class Class_SKPlayerStateToString : OperatorPart.Function, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "        }",
        "        //<<< _inputids",
        "",
        "",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            ",
        "            //<<< _params            ",
        "              //Logger.Info(this, \"contains SKSTtate? {0}\", context.Objects.ContainsKey(\"SKPlayerState\"));",
        "",
        "            string s=\"No server state found\";",
        "",
        "            try {",
        "                if (context.GlobalObjects.ContainsKey(\"SKPlayerState\")) {",
        "                    var state = (SlashKickPerformer.SKPlayerState)context.GlobalObjects[\"SKPlayerState\"];",
        "",
        "                    int currentRequestCount = state.Server.RequestCount;",
        "                    int newRequests = currentRequestCount - _lastServerRequestCount;",
        "                    if (newRequests < 0) {",
        "                        _lastServerRequestCount = 0;",
        "                        newRequests = currentRequestCount;",
        "                    }",
        "                    ",
        "                    if (newRequests > 0 && context.GlobalTime != _lastRequestCountTime) {",
        "                        double reqDuration = context.GlobalTime - _lastRequestCountTime;",
        "                        _lastRequestCountTime = context.GlobalTime;",
        "                        _lastServerRequestCount = currentRequestCount;",
        "                        _requestsPerSec.OnEvent(reqDuration / newRequests);",
        "                    } else if (newRequests == 0) {",
        "                        double reqDuration = context.GlobalTime - _lastRequestCountTime;",
        "                        if (reqDuration > 1.0)",
        "                            _requestsPerSec.Reset();",
        "                    }",
        "",
        "                    if(context.GlobalTime != _lastTime) {",
        "                        _lastDuration = context.GlobalTime - _lastTime;",
        "                        _lastTime = context.GlobalTime;",
        "                        _fps.OnEvent(_lastDuration);",
        "                    }",
        "                    ",
        "                    //Logger.Info(this,\"typeof serverstate: {0}\", state.GetType().ToString());",
        "                    //var state = (SlashKickPerformer.SKPlayerState)ServerState;",
        "                    s = string.Format(\"\"",
        "                        + \"FPS: {10}\\n\"",
        "                        + \"Program: {2}, start:{16:0.00}, ProgramTime:{17:0.00}\\n\"",
        "                        + \"BPM: {1}, Beat: {4:0.0} (+{9:0.000}) (sync events: {14})\\n\" // {5}{6}",
        "                        + \"ReaperTime: {3:0.00} (+{8:0.00}) (sync events: {15}) ({0})\\n\"",
        "                        + \"Requests: {7} ({11}/sec)\\n\"",
        "                        + \"Time: {12:0.00} // GlobalTime: {13:0.00}\"",
        "                        ,",
        "                        state.IsPlaying ? \"playing\" : \"stopped\",",
        "                        state.BPM,",
        "                        state.ProgramIndex,",
        "                        state.ReaperTime,",
        "                        state.Beat,",
        "                        \"\",//state.Beat >= 0 ? (new String('▓', (int)((state.Beat % 1) * 15))) : \"\",",
        "                        \"\",//state.Beat >= 0 ? (new String('░', (int)((1.0-(state.Beat % 1)) * 15))) : \"\",",
        "                        currentRequestCount,",
        "                        state.Server.Transport.CalculatedTimeOffsetSeconds,",
        "                        state.Server.Transport.CalculatedBeatOffsetSeconds,",
        "                        _fps.ToString(),//_lastDuration < 0.001 ? \"N/A\" : (1.0 / Math.Max(.001, _lastDuration)).ToString(\"0.0\")",
        "                        _requestsPerSec.ToString(),// 11",
        "                        context.Time, context.GlobalTime,",
        "                        state.Server.Transport.BeatCorrectionEvents,// 14",
        "                        state.Server.Transport.TimeCorrectionEvents,// 15",
        "                        state.ProgramStart,",
        "                        state.ProgramTime",
        "                        );",
        "                } else {",
        "                //Logger.Info(this,\"Server state is NULL\");",
        "                }",
        "            }",
        "            catch(Exception ex) {",
        "                //Logger.Info(this,\"Can't convert value to string. {0}\", ex);",
        "                s = string.Format(\"SK server state exception: {0}\", ex);",
        "            }",
        "            context.Text= s;",
        "            ",
        "            return context;",
        "        }",
        "        private int _lastServerRequestCount = 0;",
        "        private double _lastRequestCountTime;",
        "        ",
        "        private double _lastDuration;",
        "        private double _lastTime; ",
        "        ",
        "        private RateCalc _fps = new RateCalc();",
        "        private RateCalc _requestsPerSec = new RateCalc();",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b1006d87-ac75-4a72-a23f-277677ce1c19",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "da8a046b-677f-4278-ae17-c66bc200c6dd"
    }
  ]
}