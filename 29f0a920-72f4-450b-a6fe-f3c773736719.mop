{
  "Name": "SKWebServer",
  "_id": "29f0a920-72f4-450b-a6fe-f3c773736719",
  "Namespace": "user.tenfour",
  "Description": "web server that listens for specific events.\r\nsets context.Objects[\"SKPlayerState\"],\r\nsets context time to playhead time,\r\nand evaluates subtree.\r\n\r\nThis also adjusts the \"idle program\".\r\nSo program indices are +1\r\nIdle program is index 0\r\nAnd time is set for idle program as well.",
  "Inputs": [
    {
      "Name": "Input",
      "MetaInstanceID": "43ae3ec7-81f8-4c1a-bb9c-6c6edfa3d964",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SyncOffsetMS",
      "MetaInstanceID": "72c67e8d-d5e8-4832-8070-af6288204715",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "milliseconds to shift beats and timing to keep in sync\r\n",
      "Min": "-1000",
      "Max": "1000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ServerPort",
      "MetaInstanceID": "f901fe55-c3ee-462f-846c-c88c99f1c800",
      "DefaultValue": {
        "Type": "Float",
        "Value": "7777"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "65535",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "IPAddressIndex",
      "MetaInstanceID": "6982a0a5-ee3b-409b-b274-c0c47d7ee304",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "which IP address should the web server listen on?\r\n",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Output",
      "MetaInstanceID": "4722d312-1e90-40b6-8143-afcd1de4557f",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "a6046534-ed3f-4b26-a304-a74a9ed12d0e",
      "MetaID": "fc530095-f8cd-494b-b66f-e1f0ce675291",
      "Name": "SKWebServerFunc",
      "Version": "d96dc195-3cfb-4e46-a879-613de625b3a4",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SlashKickPerformer;",
        "using System.Net;",
        "using System.Net.NetworkInformation;",
        "",
        "namespace Framefield.Core.IDfc530095_f8cd_494b_b66f_e1f0ce675291",
        "{",
        "    public class Class_SKWebServer : OperatorPart.Function,",
        "        Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            SyncOffsetMS = 0,",
        "            Input = 1,",
        "            ServerPort = 2,",
        "            IPAddressIndex = 3",
        "        }",
        "        //<<< _inputids",
        "        ",
        "        public override void Dispose() {",
        "        ",
        "            if (_server != null) { ",
        "                _server.Dispose();",
        "                Logger.Info(this,\"Stopping SK Web server\");",
        "                _server = null;",
        "            }",
        "        }",
        "        ",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "",
        "            //>>> _params ",
        "            var SyncOffsetMS = inputs[(int)InputId.SyncOffsetMS].Eval(context).Value;",
        "            var Input = inputs[(int)InputId.Input];",
        "            var ServerPort = inputs[(int)InputId.ServerPort].Eval(context).Value;",
        "            var IPAddressIndex = inputs[(int)InputId.IPAddressIndex].Eval(context).Value;",
        "            //<<< _params ",
        "",
        "            // http://127.0.0.1:7777",
        "            if ((int)ServerPort != _oldPort) {",
        "                if (_server != null) {",
        "                    _server.Dispose();",
        "                    _server = null;",
        "                }",
        "                _oldPort = (int)ServerPort;",
        "                //_oldIPAddressIndex = (int)IPAddressIndex;",
        "                //_oldPrefix = SlashKickPerformer.SKWebServer.GetServerPrefix(_oldPort, _oldIPAddressIndex);",
        "                //Logger.Info(this,\"desc: {0}, pref: {1}\", _oldPrefix.ServerPrefix, _oldPrefix.Description);",
        "                ",
        "                try {",
        "                    _server = SlashKickPerformer.ServerUtils.CreateServer((int)ServerPort);",
        "                    Logger.Info(this,\"Started SK Web server @ {0}\", _server.CurrentPrefix.Description);",
        "                    //context.GlobalObjects[\"SKServerState\"] = string.Format(\"SKServer started @ {1} / {0}\", _server.CurrentPrefix.ServerPrefix, _server.CurrentPrefix.Description);",
        "                } catch (System.Net.HttpListenerException ex) {",
        "                    if (_server != null) {",
        "                        _server.Dispose();",
        "                        _server = null;",
        "                    }",
        "                    Logger.Info(this,\"UNABLE TO start SK Web server. Try another address?\");",
        "                    //context.GlobalObjects[\"SKServerState\"] = string.Format(\"Error starting SKServer @ {1} / {0}\", _oldPrefix.ServerPrefix, _oldPrefix.Description);",
        "                }",
        "                //_server.Transport.ToleranceSeconds = .1;",
        "                ",
        "            }",
        "            var oldTime = context.Time;",
        "            ",
        "            if (_server != null) {",
        "                _server.Transport.OffsetSeconds = SyncOffsetMS / 1000;",
        "    ",
        "                var ServerState = _server.GetState();",
        "                if ((object)ServerState == null)",
        "                    Logger.Info(this,\"sk server state is NULL from the server!\");",
        "                else {",
        "                    //Logger.Info(this,\"sk server state SET\");",
        "                    if (ServerState.ProgramIndex < 0) {",
        "                        ServerState.ProgramStreamTime = context.Time;",
        "                        ServerState.ProgramProjectTime = context.Time;",
        "                    } else {",
        "                        context.Time = (float)ServerState.ProgramStreamTime;",
        "                    }",
        "                    ServerState.ProgramIndex ++;// account for -1 being the 1st program.",
        "                    context.Objects[\"SKPlayerState\"] = ServerState;",
        "                    context.GlobalObjects[\"SKPlayerState\"] = ServerState;",
        "                    Framefield.Core.OperatorPartContext.SKServerState = ServerState;",
        "                }",
        "            }",
        "                    //context.Objects[\"SKPlayerState\"] = null;",
        "                    //context.GlobalObjects[\"SKPlayerState\"] = null;",
        "                    //Framefield.Core.OperatorPartContext.SKServerState = new SlashKickPerformer.SKPlayerState();",
        "            context = Input.Eval(context);",
        "            context.Time = oldTime;",
        "            return context;",
        "        }",
        "        ",
        "        SlashKickPerformer.ISKServer _server = null;",
        "        int _oldPort = -1;",
        "        //int _oldIPAddressIndex = -1;",
        "        //SlashKickPerformer.ServerPrefixInfo _oldPrefix;",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "72c67e8d-d5e8-4832-8070-af6288204715",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a6046534-ed3f-4b26-a304-a74a9ed12d0e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "43ae3ec7-81f8-4c1a-bb9c-6c6edfa3d964",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a6046534-ed3f-4b26-a304-a74a9ed12d0e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f901fe55-c3ee-462f-846c-c88c99f1c800",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a6046534-ed3f-4b26-a304-a74a9ed12d0e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6982a0a5-ee3b-409b-b274-c0c47d7ee304",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a6046534-ed3f-4b26-a304-a74a9ed12d0e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a6046534-ed3f-4b26-a304-a74a9ed12d0e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4722d312-1e90-40b6-8143-afcd1de4557f"
    }
  ]
}