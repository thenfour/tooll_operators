{
  "Name": "SH_TriangleFlower",
  "_id": "1a3c022e-9223-4f49-a8b8-6379369404e6",
  "Namespace": "user.tenfour.shaders",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "2ab41f69-a158-4d29-9791-e6cde3bd74de",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "float Zoom;",
          "float2 LineThickness;",
          "float RingIterations;",
          "float ShapesPerRing;",
          "float RotationMethod;",
          "float RadiusFactor;",
          "float Phase;",
          "float DTOAMultiplier;",
          "float3 DTOA;",
          "float K;",
          "float DTOAAdd;",
          "float4 StartColor;",
          "float DTOAAlpha;",
          "float2 Position;",
          "//<<< _parameters\r",
          "float iTime;\r",
          "static const float PI = atan(1.)*4.;\r",
          "static const float PI2 = atan(1.)*8.;\r",
          "\r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "// http://www.iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\r",
          "\r",
          "float2x2 rot2D(float r){\r",
          "    return float2x2(cos(r), -sin(r), sin(r), cos(r));\r",
          "}\r",
          "\r",
          "//----------------------------------------------------------------------------------------\r",
          "// 4 out, 2 in...\r",
          "float4 hash42(float2 p)\r",
          "{\r",
          "\tfloat4 p4 = frac(p.xyxy * float4(.1031, .1030, .0973, .1099));\r",
          "    p4 += dot(p4, p4.wzxy+33.33);\r",
          "    return frac((p4.xxyz+p4.yzzw)*p4.zywx);\r",
          "}\r",
          "\r",
          "\r",
          "// polynomial smooth min (k = 0.1);\r",
          "float smin( float a, float b, float k )\r",
          "{\r",
          "    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\r",
          "    return lerp( b, a, h ) - k*h*(1.0-h);\r",
          "}\r",
          "float smax(float a, float b, float k) {\r",
          "    return -smin(-a, -b, k);\r",
          "}\r",
          "\r",
          "//static const float k = .1;\r",
          "float opSmoothSubtraction( float d1, float d2 ) { return smax(-d1,d2, K); }\r",
          "float opSmoothIntersection( float d1, float d2 ) { return smax(d1,d2, K); }\r",
          "float opSmoothUnion( float d1, float d2 ) { return smin(d1,d2, K); }\r",
          "\r",
          "float opUnion( float d1, float d2 ) { return min(d1,d2); }\r",
          "float opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\r",
          "float opIntersection( float d1, float d2 ) { return max(d1,d2); }\r",
          "float opXor(float lhs, float rhs) {\r",
          "    return opUnion(opIntersection(lhs, -(rhs)), opIntersection(rhs, -(lhs)));\r",
          "}\r",
          "float opSmoothXor(float lhs, float rhs) {\r",
          "    return opSmoothUnion(opSmoothIntersection(lhs, -(rhs)), opSmoothIntersection(rhs, -(lhs)));\r",
          "}\r",
          "\r",
          "#define dtoa(d, amount) (1. / clamp((d)*(amount), 1., (amount)))\r",
          "\r",
          "\r",
          "float3 pal( in float t, in float3 a, in float3 b, in float3 c, in float3 d )\r",
          "{\r",
          "    return a + b*cos( PI2*(c*t+d) );\r",
          "}\r",
          "\r",
          "\r",
          "float sdTriangle( in float2 p, in float2 p0, in float2 p1, in float2 p2 )\r",
          "{\r",
          "    float2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\r",
          "    float2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\r",
          "    float2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\r",
          "    float2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\r",
          "    float2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\r",
          "    float s = sign( e0.x*e2.y - e0.y*e2.x );\r",
          "    float2 d = min(min(float2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\r",
          "                     float2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\r",
          "                     float2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\r",
          "    return -sqrt(d.x)*sign(d.y);\r",
          "}\r",
          "float sdLine( in float2 p, in float2 a, in float2 b )\r",
          "{\r",
          "    float2 pa = p-a, ba = b-a;\r",
          "    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\r",
          "    return length( pa - ba*h );\r",
          "}\r",
          "\r",
          "float sdEquilateralTriangle( in float2 p )\r",
          "{\r",
          "    const float k = sqrt(3.0);\r",
          "    p.x = abs(p.x) - 1.0;\r",
          "    p.y = p.y + 1.0/k;\r",
          "    if( p.x+k*p.y>0.0 ) p = float2(p.x-k*p.y,-k*p.x-p.y)/2.0;\r",
          "    p.x -= clamp( p.x, -2.0, 0.0 );\r",
          "    return -length(p)*sign(p.y);\r",
          "}\r",
          "\r",
          "\r",
          "float sdBox( in float2 p, in float2 b )\r",
          "{\r",
          "    float2 d = abs(p)-b;\r",
          "    return length(max(d,float2(0,0))) + min(max(d.x,d.y),0.0);\r",
          "}\r",
          "\r",
          "float sdTri( in float2 p, float scale )\r",
          "{\r",
          "    float thicknessRound = LineThickness.y;\r",
          "    float thicknessSharp = LineThickness.x;\r",
          "    float sdt = sdEquilateralTriangle(p / scale) * scale;\r",
          "    sdt = abs(sdt - thicknessRound - thicknessSharp) - thicknessRound;\r",
          "    return sdt;\r",
          "\r",
          "}\r",
          "/*\r",
          "float sdTri( in float2 p, float scale )\r",
          "{\r",
          "    return sdBox(p, float2(scale,scale)*.2);\r",
          "}*/\r",
          "\r",
          "float sdPat(float2 uv, float dist, float radius, float phase)\r",
          "{\r",
          "    //const float numCircles = 3;\r",
          "    float sd = 1e6;\r",
          "    float s = 1;\r",
          "    for (float i = 0; i < ShapesPerRing; ++ i) {\r",
          "        float a = PI2*i/ShapesPerRing;\r",
          "        a += phase;\r",
          "        s = -s;\r",
          "        float2 cp = float2(sin(-a), cos(-a))*dist;\r",
          "        //float2 cp = float2(dist,0);\r",
          "        \r",
          "        float a2 = a;\r",
          "        switch (RotationMethod)\r",
          "        {\r",
          "            case 0:\r",
          "                // just use the rotation angle raw.\r",
          "                break;\r",
          "            case 1:\r",
          "                // alternating\r",
          "                a2 = a * s;\r",
          "                break;\r",
          "            case 2:\r",
          "                // own angle\r",
          "                a2 = PI2 / ShapesPerRing *i;// * s;\r",
          "                break;\r",
          "            case 3:\r",
          "                // own angle, alternating\r",
          "                a2 = PI2 / ShapesPerRing *i* s;\r",
          "                break;\r",
          "            case 4:\r",
          "                // fixed\r",
          "                a2 = 0;\r",
          "                break;\r",
          "        }\r",
          "        \r",
          "        //float qa = floor(a/PI/4)*PI/4;\r",
          "        //float a2 = PI2 / ShapesPerRing *i * s;\r",
          "        //a2 += phase * s;\r",
          "        \r",
          "        float2 uv2 = mul(uv-cp, rot2D(a2));\r",
          "        sd = min(sd, sdTri(uv2, radius));\r",
          "    }\r",
          "    return sd;\r",
          "}\r",
          "float rsin(float x, float low, float high)\r",
          "{\r",
          "    return (sin(x)*.5+.5) * (high-low) + low;\r",
          "}\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 o = float4(1,1,1,1);\r",
          "    float2 uv = input.texCoord.xy;\r",
          "    float2 R = RenderTargetSize.xy;\r",
          "    \r",
          "    //float t = iTime*.1;\r",
          "    uv -= .5;\r",
          "    uv.x *= R.x / R.y;\r",
          "    uv += Position;\r",
          "    uv *= Zoom;\r",
          "    //uv.x += t;\r",
          "\r",
          "    //o = StartColor;\r",
          "    //const float numIterations = 2;\r",
          "    float sd = sdTri(uv, 1);\r",
          "    float ring = 1;// distance to the center of circles around the ring\r",
          "    //const float radiusFact = .5;//rsin(t, .5,.5);\r",
          "    float radius = ring * RadiusFactor;\r",
          "    float phase = 0;\r",
          "    float s = 1;\r",
          "    \r",
          "    for (float i = 0; i < RingIterations;  i += 1) {\r",
          "        //uv.y *= -1;\r",
          "        phase += Phase;// * (i+1);\r",
          "        \r",
          "        float sd1 = sdPat(uv, ring, radius, phase);\r",
          "        //sd = opSmoothSubtraction(sd1, sd);\r",
          "        //sd = opSubtraction(sd1, sd);\r",
          "        sd = opSmoothUnion(sd1, sd);\r",
          "        //sd = opSmoothXor(sd1, sd);\r",
          "        ring -= radius;\r",
          "        radius *= RadiusFactor;\r",
          "        s *= -1.;\r",
          "    }\r",
          "\r",
          "    float3 m = dtoa(sd, DTOAAdd + DTOAMultiplier * DTOA);\r",
          "    \r",
          "    float cx = sd * 2 + iTime*.2;\r",
          "    \r",
          "    float3 col = pal(cx, float3(0.,0.5,0.5),float3(0.5,0.5,0.5),float3(2.0,1.0,0.0),float3(0.5,0.20,0.25) );\r",
          "    \r",
          "    //o.rgb = StartColor.rgb;// * dtoa(sd, DTOAAdd + DTOAMultiplier * DTOA);\r",
          "    o.rgb = col;\r",
          "    o.a = StartColor.a * dtoa(sd, DTOAAlpha);\r",
          "    \r",
          "    \r",
          "    return o;\r",
          "}\r",
          "\r",
          "",
          "//<<< PS\r",
          "\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Zoom",
      "MetaInstanceID": "b0149924-85a8-4da2-b425-2fedbfa4b41e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "3"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0.001",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "LineThickness.Sharp",
      "MetaInstanceID": "7a2fee7f-234f-42d4-98e8-e7519c700f12",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.05"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-1",
      "Max": "1",
      "Scale": "0.005",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "LineThickness.Round",
      "MetaInstanceID": "e93f192e-23fd-4913-b211-bad509ef250d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-1",
      "Max": "1",
      "Scale": "0.005",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RingIterations",
      "MetaInstanceID": "4fa79501-6b04-4861-8965-4115e922fd85",
      "DefaultValue": {
        "Type": "Float",
        "Value": "3"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "20",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ShapesPerRing",
      "MetaInstanceID": "26fc41bd-d480-4671-bdf1-2be9628c7fad",
      "DefaultValue": {
        "Type": "Float",
        "Value": "3"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "100",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RotationMethod",
      "MetaInstanceID": "ed0cf82f-f9d3-4010-adcc-23f736138dca",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "RawAngle",
          "Value": "0"
        },
        {
          "Name": "RawAngleAlternating",
          "Value": "1"
        },
        {
          "Name": "OwnAngle",
          "Value": "2"
        },
        {
          "Name": "OwnAngleAlternating",
          "Value": "3"
        },
        {
          "Name": "Fixed",
          "Value": "4"
        }
      ]
    },
    {
      "Name": "RadiusFactor",
      "MetaInstanceID": "a1f965b0-5ee0-4609-a1f8-e46389253093",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.9"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Phase",
      "MetaInstanceID": "e3815415-6d32-4dc6-9795-616fcb736028",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DTOAMultiplier",
      "MetaInstanceID": "fbcc8415-ef66-406f-b550-2a4288ffe9ac",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0.001",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DTOA.X",
      "MetaInstanceID": "21734228-59dc-43ae-994d-a143ce9f88d2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1000"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DTOA.Y",
      "MetaInstanceID": "692f0f0e-1418-4330-912d-47c38f2383ec",
      "DefaultValue": {
        "Type": "Float",
        "Value": "100"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DTOA.Z",
      "MetaInstanceID": "f719529b-967e-41dd-a81e-50c2a5c546b8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "90"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "K",
      "MetaInstanceID": "ec14cd21-ea44-40d0-bf4f-2f33f5ec9cd1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "0.005",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DTOAAdd",
      "MetaInstanceID": "e204d0d3-ffb7-4871-8017-625795b6bf5b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "StartColor.R",
      "MetaInstanceID": "53d9ef7d-6e16-48f4-a28b-97661724f318",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "StartColor.G",
      "MetaInstanceID": "2c16a014-47e5-4beb-8b5e-bb0aa1ea86d8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "StartColor.B",
      "MetaInstanceID": "5c9687db-8ed5-4c31-8ea6-4e3a050c51bb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "StartColor.A",
      "MetaInstanceID": "15223f55-0ec4-41cc-8606-dae3c7275365",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DTOAAlpha",
      "MetaInstanceID": "d33a2612-9e40-4aa8-8fe3-405f602cb7c2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "70"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Position.X",
      "MetaInstanceID": "87a49419-4a2b-43d1-98af-c5b3d0ced817",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Position.Y",
      "MetaInstanceID": "95e17910-560f-4264-8f1a-073408e20f75",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "cf6ea447-b04d-4d57-b3a8-7e520a597cab",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "dbe70bde-b9ca-456a-8826-00847d4f2bc4",
      "MetaID": "8e79e9d2-3093-4cd8-98e0-30f35948f0e8",
      "Name": "SH_TriangleFlowerFunc",
      "Version": "4feedaea-1f36-49bd-8b9f-2ee83a91470c",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID8e79e9d2_3093_4cd8_98e0_30f35948f0e8",
        "{",
        "    public class Class_SH_TriangleFlower : FXImageFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Zoom = 1,",
        "            LineThicknessSharp = 2,",
        "            RingIterations = 3,",
        "            ShapesPerRing = 4,",
        "            LineThicknessRound = 5,",
        "            RotationMethod = 6,",
        "            RadiusFactor = 7,",
        "            Phase = 8,",
        "            DTOAMultiplier = 9,",
        "            DTOAX = 10,",
        "            DTOAY = 11,",
        "            DTOAZ = 12,",
        "            K = 13,",
        "            DTOAAdd = 14,",
        "            StartColorR = 15,",
        "            StartColorG = 16,",
        "            StartColorB = 17,",
        "            StartColorA = 18,",
        "            DTOAAlpha = 19,",
        "            PositionX = 20,",
        "            PositionY = 21",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Zoom = inputs[(int)InputId.Zoom].Eval(context).Value;",
        "            var LineThicknessSharp = inputs[(int)InputId.LineThicknessSharp].Eval(context).Value;",
        "            var LineThicknessRound = inputs[(int)InputId.LineThicknessRound].Eval(context).Value;",
        "            var LineThickness = new Vector2(LineThicknessSharp, LineThicknessRound);",
        "            var RingIterations = inputs[(int)InputId.RingIterations].Eval(context).Value;",
        "            var ShapesPerRing = inputs[(int)InputId.ShapesPerRing].Eval(context).Value;",
        "            var RotationMethod = (int) inputs[(int)InputId.RotationMethod].Eval(context).Value;",
        "            var RadiusFactor = inputs[(int)InputId.RadiusFactor].Eval(context).Value;",
        "            var Phase = inputs[(int)InputId.Phase].Eval(context).Value;",
        "            var DTOAMultiplier = inputs[(int)InputId.DTOAMultiplier].Eval(context).Value;",
        "            var DTOAX = inputs[(int)InputId.DTOAX].Eval(context).Value;",
        "            var DTOAY = inputs[(int)InputId.DTOAY].Eval(context).Value;",
        "            var DTOAZ = inputs[(int)InputId.DTOAZ].Eval(context).Value;",
        "            var DTOA = new Vector3(DTOAX, DTOAY, DTOAZ);",
        "            var K = inputs[(int)InputId.K].Eval(context).Value;",
        "            var DTOAAdd = inputs[(int)InputId.DTOAAdd].Eval(context).Value;",
        "            var StartColorR = inputs[(int)InputId.StartColorR].Eval(context).Value;",
        "            var StartColorG = inputs[(int)InputId.StartColorG].Eval(context).Value;",
        "            var StartColorB = inputs[(int)InputId.StartColorB].Eval(context).Value;",
        "            var StartColorA = inputs[(int)InputId.StartColorA].Eval(context).Value;",
        "            var StartColor = new Color4(StartColorR, StartColorG, StartColorB, StartColorA);",
        "            var DTOAAlpha = inputs[(int)InputId.DTOAAlpha].Eval(context).Value;",
        "            var PositionX = inputs[(int)InputId.PositionX].Eval(context).Value;",
        "            var PositionY = inputs[(int)InputId.PositionY].Eval(context).Value;",
        "            var Position = new Vector2(PositionX, PositionY);",
        "            //<<< _params",
        "            ",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Zoom\").AsScalar().Set(Zoom);",
        "                    _effect.GetVariableByName(\"LineThickness\").AsVector().Set(new Vector2(LineThicknessSharp, LineThicknessRound));",
        "                    _effect.GetVariableByName(\"RingIterations\").AsScalar().Set(RingIterations);",
        "                    _effect.GetVariableByName(\"ShapesPerRing\").AsScalar().Set(ShapesPerRing);",
        "                    _effect.GetVariableByName(\"RotationMethod\").AsScalar().Set(RotationMethod);",
        "                    _effect.GetVariableByName(\"RadiusFactor\").AsScalar().Set(RadiusFactor);",
        "                    _effect.GetVariableByName(\"Phase\").AsScalar().Set(Phase);",
        "                    _effect.GetVariableByName(\"DTOAMultiplier\").AsScalar().Set(DTOAMultiplier);",
        "                    _effect.GetVariableByName(\"DTOA\").AsVector().Set(new Vector3(DTOAX, DTOAY, DTOAZ));",
        "                    _effect.GetVariableByName(\"K\").AsScalar().Set(K);",
        "                    _effect.GetVariableByName(\"DTOAAdd\").AsScalar().Set(DTOAAdd);",
        "                    _effect.GetVariableByName(\"StartColor\").AsVector().Set(new Vector4(StartColorR, StartColorG, StartColorB, StartColorA));",
        "                    _effect.GetVariableByName(\"DTOAAlpha\").AsScalar().Set(DTOAAlpha);",
        "                    _effect.GetVariableByName(\"Position\").AsVector().Set(new Vector2(PositionX, PositionY));",
        "                //<<< _setup",
        "",
        "                _effect.GetVariableByName(\"iTime\").AsScalar().Set(context.Time);",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "LibToollTenfour.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "cf6ea447-b04d-4d57-b3a8-7e520a597cab"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2ab41f69-a158-4d29-9791-e6cde3bd74de",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b0149924-85a8-4da2-b425-2fedbfa4b41e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7a2fee7f-234f-42d4-98e8-e7519c700f12",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4fa79501-6b04-4861-8965-4115e922fd85",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "26fc41bd-d480-4671-bdf1-2be9628c7fad",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e93f192e-23fd-4913-b211-bad509ef250d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ed0cf82f-f9d3-4010-adcc-23f736138dca",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a1f965b0-5ee0-4609-a1f8-e46389253093",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e3815415-6d32-4dc6-9795-616fcb736028",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "fbcc8415-ef66-406f-b550-2a4288ffe9ac",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "21734228-59dc-43ae-994d-a143ce9f88d2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "692f0f0e-1418-4330-912d-47c38f2383ec",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f719529b-967e-41dd-a81e-50c2a5c546b8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ec14cd21-ea44-40d0-bf4f-2f33f5ec9cd1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e204d0d3-ffb7-4871-8017-625795b6bf5b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "53d9ef7d-6e16-48f4-a28b-97661724f318",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2c16a014-47e5-4beb-8b5e-bb0aa1ea86d8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5c9687db-8ed5-4c31-8ea6-4e3a050c51bb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "15223f55-0ec4-41cc-8606-dae3c7275365",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d33a2612-9e40-4aa8-8fe3-405f602cb7c2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "87a49419-4a2b-43d1-98af-c5b3d0ced817",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "95e17910-560f-4264-8f1a-073408e20f75",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dbe70bde-b9ca-456a-8826-00847d4f2bc4"
    }
  ]
}